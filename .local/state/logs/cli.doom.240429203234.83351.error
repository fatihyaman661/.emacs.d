;; -*- lisp-interaction -*-
;; vim: set ft=lisp:
;; command=("/snap/emacs/2440/usr/bin/emacs-gtk" "--load" "/home/fatihyaman/.config/emacs/bin/doom" "--" "sync" "-e")
;; date="2024-04-29 20-32-34"

;;;; ENVIRONMENT
GNU Emacs     v29.3            73d7d08f3f07a68b198e5ba230a474ba019e6a8a
Doom core     v3.0.0-pre       grafted, HEAD -> master, origin/master, origin/HEAD 9620bb45 2024-04-18 14:20:48 -0400
Doom modules  v24.04.0-pre     grafted, HEAD -> master, origin/master, origin/HEAD 9620bb45 2024-04-18 14:20:48 -0400

;;;; 0
((use-package! ivy-rich)
 ((debugger-may-continue . t)
  (inhibit-redisplay)
  (inhibit-debugger . t)
  (inhibit-changing-match-data)))

;;;; 1
((load-with-code-conversion "/home/fatihyaman/.config/doom/packages.el" "/home/fatihyaman/.config/doom/packages.el" t t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "/home/fatihyaman/.config/doom/packages.el")
  (load-true-file-name . "/home/fatihyaman/.config/doom/packages.el")
  (read-symbol-shorthands)
  (eval-buffer-list #<buffer  *load*-755180> #<buffer  *load*>)
  (standard-output)
  (lexical-binding)
  (standard-input . #<buffer  *load*-755180>)
  (macroexp--dynvars)
  (current-load-list "/home/fatihyaman/.config/doom/packages.el")))

;;;; 2
((load "/home/fatihyaman/.config/doom/packages.el" noerror nomessage nosuffix)
 ((lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 3
((if
     (not noeval)
     (load file noerror 'nomessage 'nosuffix)
   (if
       (file-exists-p file)
       (progn
	 (insert-file-contents file)
	 (let
	     ((table
	       (syntax-table))
	      (buffer
	       (current-buffer)))
	   (unwind-protect
	       (progn
		 (set-syntax-table emacs-lisp-mode-syntax-table)
		 (while
		     (search-forward "(package!" nil t)
		   (let
		       ((ppss
			 (save-excursion
			   (syntax-ppss))))
		     (if
			 (or
			  (nth 3 ppss)
			  (nth 4 ppss))
			 nil
		       (goto-char
			(match-beginning 0))
		       (let*
			   ((plist
			     (read
			      (current-buffer)))
			    (_
			     (if
				 (cdr plist)
				 (car-safe
				  (prog1 plist
				    (setq plist
					  (cdr plist))))
			       (signal 'wrong-number-of-arguments
				       (list
					'(_ name . plist)
					(length plist)))))
			    (name
			     (car-safe
			      (prog1 plist
				(setq plist
				      (cdr plist))))))
			 (setq doom-packages
			       (cons
				(cons name
				      (plist-put plist :modules
						 (list
						  (doom-module-context-key))))
				doom-packages)))))))
	     (save-current-buffer
	       (set-buffer buffer)
	       (set-syntax-table table)))))))
 nil)

;;;; 4
((progn
   (if
       (not noeval)
       (load file noerror 'nomessage 'nosuffix)
     (if
	 (file-exists-p file)
	 (progn
	   (insert-file-contents file)
	   (let
	       ((table
		 (syntax-table))
		(buffer
		 (current-buffer)))
	     (unwind-protect
		 (progn
		   (set-syntax-table emacs-lisp-mode-syntax-table)
		   (while
		       (search-forward "(package!" nil t)
		     (let
			 ((ppss
			   (save-excursion
			     (syntax-ppss))))
		       (if
			   (or
			    (nth 3 ppss)
			    (nth 4 ppss))
			   nil
			 (goto-char
			  (match-beginning 0))
			 (let*
			     ((plist
			       (read
				(current-buffer)))
			      (_
			       (if
				   (cdr plist)
				   (car-safe
				    (prog1 plist
				      (setq plist
					    (cdr plist))))
				 (signal 'wrong-number-of-arguments
					 (list
					  '(_ name . plist)
					  (length plist)))))
			      (name
			       (car-safe
				(prog1 plist
				  (setq plist
					(cdr plist))))))
			   (setq doom-packages
				 (cons
				  (cons name
					(plist-put plist :modules
						   (list
						    (doom-module-context-key))))
				  doom-packages)))))))
	       (save-current-buffer
		 (set-buffer buffer)
		 (set-syntax-table table))))))))
 nil)

;;;; 5
((unwind-protect
     (progn
       (if
	   (not noeval)
	   (load file noerror 'nomessage 'nosuffix)
	 (if
	     (file-exists-p file)
	     (progn
	       (insert-file-contents file)
	       (let
		   ((table
		     (syntax-table))
		    (buffer
		     (current-buffer)))
		 (unwind-protect
		     (progn
		       (set-syntax-table emacs-lisp-mode-syntax-table)
		       (while
			   (search-forward "(package!" nil t)
			 (let
			     ((ppss
			       (save-excursion
				 (syntax-ppss))))
			   (if
			       (or
				(nth 3 ppss)
				(nth 4 ppss))
			       nil
			     (goto-char
			      (match-beginning 0))
			     (let*
				 ((plist
				   (read
				    (current-buffer)))
				  (_
				   (if
				       (cdr plist)
				       (car-safe
					(prog1 plist
					  (setq plist
						(cdr plist))))
				     (signal 'wrong-number-of-arguments
					     (list
					      '(_ name . plist)
					      (length plist)))))
				  (name
				   (car-safe
				    (prog1 plist
				      (setq plist
					    (cdr plist))))))
			       (setq doom-packages
				     (cons
				      (cons name
					    (plist-put plist :modules
						       (list
							(doom-module-context-key))))
				      doom-packages)))))))
		   (save-current-buffer
		     (set-buffer buffer)
		     (set-syntax-table table))))))))
   (and
    (buffer-name temp-buffer)
    (kill-buffer temp-buffer)))
 nil)

;;;; 6
((save-current-buffer
   (set-buffer temp-buffer)
   (unwind-protect
       (progn
	 (if
	     (not noeval)
	     (load file noerror 'nomessage 'nosuffix)
	   (if
	       (file-exists-p file)
	       (progn
		 (insert-file-contents file)
		 (let
		     ((table
		       (syntax-table))
		      (buffer
		       (current-buffer)))
		   (unwind-protect
		       (progn
			 (set-syntax-table emacs-lisp-mode-syntax-table)
			 (while
			     (search-forward "(package!" nil t)
			   (let
			       ((ppss
				 (save-excursion
				   (syntax-ppss))))
			     (if
				 (or
				  (nth 3 ppss)
				  (nth 4 ppss))
				 nil
			       (goto-char
				(match-beginning 0))
			       (let*
				   ((plist
				     (read
				      (current-buffer)))
				    (_
				     (if
					 (cdr plist)
					 (car-safe
					  (prog1 plist
					    (setq plist
						  (cdr plist))))
				       (signal 'wrong-number-of-arguments
					       (list
						'(_ name . plist)
						(length plist)))))
				    (name
				     (car-safe
				      (prog1 plist
					(setq plist
					      (cdr plist))))))
				 (setq doom-packages
				       (cons
					(cons name
					      (plist-put plist :modules
							 (list
							  (doom-module-context-key))))
					doom-packages)))))))
		     (save-current-buffer
		       (set-buffer buffer)
		       (set-syntax-table table))))))))
     (and
      (buffer-name temp-buffer)
      (kill-buffer temp-buffer))))
 nil)

;;;; 7
((let
     ((temp-buffer
       (generate-new-buffer " *temp*" t)))
   (save-current-buffer
     (set-buffer temp-buffer)
     (unwind-protect
	 (progn
	   (if
	       (not noeval)
	       (load file noerror 'nomessage 'nosuffix)
	     (if
		 (file-exists-p file)
		 (progn
		   (insert-file-contents file)
		   (let
		       ((table
			 (syntax-table))
			(buffer
			 (current-buffer)))
		     (unwind-protect
			 (progn
			   (set-syntax-table emacs-lisp-mode-syntax-table)
			   (while
			       (search-forward "(package!" nil t)
			     (let
				 ((ppss
				   (save-excursion
				     (syntax-ppss))))
			       (if
				   (or
				    (nth 3 ppss)
				    (nth 4 ppss))
				   nil
				 (goto-char
				  (match-beginning 0))
				 (let*
				     ((plist
				       (read
					(current-buffer)))
				      (_
				       (if
					   (cdr plist)
					   (car-safe
					    (prog1 plist
					      (setq plist
						    (cdr plist))))
					 (signal 'wrong-number-of-arguments
						 (list
						  '(_ name . plist)
						  (length plist)))))
				      (name
				       (car-safe
					(prog1 plist
					  (setq plist
						(cdr plist))))))
				   (setq doom-packages
					 (cons
					  (cons name
						(plist-put plist :modules
							   (list
							    (doom-module-context-key))))
					  doom-packages)))))))
		       (save-current-buffer
			 (set-buffer buffer)
			 (set-syntax-table table))))))))
       (and
	(buffer-name temp-buffer)
	(kill-buffer temp-buffer)))))
 ((file . "/home/fatihyaman/.config/doom/packages.el")
  (noeval)
  (noerror . noerror)
  (temp-buffer . #<buffer  *temp*>)))

;;;; 8
((condition-case e
     (let
	 ((temp-buffer
	   (generate-new-buffer " *temp*" t)))
       (save-current-buffer
	 (set-buffer temp-buffer)
	 (unwind-protect
	     (progn
	       (if
		   (not noeval)
		   (load file noerror 'nomessage 'nosuffix)
		 (if
		     (file-exists-p file)
		     (progn
		       (insert-file-contents file)
		       (let
			   ((table
			     (syntax-table))
			    (buffer
			     (current-buffer)))
			 (unwind-protect
			     (progn
			       (set-syntax-table emacs-lisp-mode-syntax-table)
			       (while
				   (search-forward "(package!" nil t)
				 (let
				     ((ppss
				       (save-excursion
					 (syntax-ppss))))
				   (if
				       (or
					(nth 3 ppss)
					(nth 4 ppss))
				       nil
				     (goto-char
				      (match-beginning 0))
				     (let*
					 ((plist
					   (read
					    (current-buffer)))
					  (_
					   (if
					       (cdr plist)
					       (car-safe
						(prog1 plist
						  (setq plist
							(cdr plist))))
					     (signal 'wrong-number-of-arguments
						     (list
						      '(_ name . plist)
						      (length plist)))))
					  (name
					   (car-safe
					    (prog1 plist
					      (setq plist
						    (cdr plist))))))
				       (setq doom-packages
					     (cons
					      (cons name
						    (plist-put plist :modules
							       (list
								(doom-module-context-key))))
					      doom-packages)))))))
			   (save-current-buffer
			     (set-buffer buffer)
			     (set-syntax-table table))))))))
	   (and
	    (buffer-name temp-buffer)
	    (kill-buffer temp-buffer)))))
   ((debug user-error)
    (user-error
     (error-message-string e)))
   ((debug error)
    (signal 'doom-package-error
	    (list
	     (doom-module-context-key)
	     file e))))
 nil)

;;;; 9
((doom-packages--read "/home/fatihyaman/.config/doom/packages.el" nil noerror)
 ((file . "/home/fatihyaman/.config/doom/packages.el")
  (noeval)
  (noerror . noerror)))

;;;; 10
((if file
     (doom-packages--read file nil 'noerror)
   nil)
 nil)

;;;; 11
((let*
     ((file
       (and t
	    (doom-module-locate-path
	     (car key)
	     (cdr key)
	     doom-module-packages-file))))
   (if file
       (doom-packages--read file nil 'noerror)
     nil))
 ((key :user)
  (file . "/home/fatihyaman/.config/doom/packages.el")))

;;;; 12
((let
     ((doom-module-context
       (doom-module-context key)))
   (if doom-inhibit-log nil
     (doom--log ":context:module: =%s" doom-module-context))
   (let*
       ((file
	 (and t
	      (doom-module-locate-path
	       (car key)
	       (cdr key)
	       doom-module-packages-file))))
     (if file
	 (doom-packages--read file nil 'noerror)
       nil)))
 ((doom-module-context .
		       [1 105 -105 :user nil nil nil])))

;;;; 13
((read-packages
  (:user))
 ((key :user)))

;;;; 14
((let
     (doom-packages)
   (read-packages
    (cons :user nil)))
 ((doom-packages
   (anzu :modules
	 ((:user)
	  (:user . modules)))
   (all-the-icons-ivy-rich :modules
			   ((:user)
			    (:user . modules)))
   (all-the-icons :modules
		  ((:user)
		   (:user . modules)))
   (ivy-rich :modules
	     ((:user)
	      (:user . modules))))))

;;;; 15
((progn
   (let
       (doom-packages)
     (read-packages
      (cons :user nil))))
 nil)

;;;; 16
((if user?
     (progn
       (let
	   (doom-packages)
	 (read-packages
	  (cons :user nil)))))
 nil)

;;;; 17
((let
     ((user?
       (assq :user module-list)))
   (if user?
       (progn
	 (let
	     (doom-packages)
	   (read-packages
	    (cons :user nil)))))
   (mapc #'read-packages module-list)
   (if user?
       (read-packages
	(cons :user nil)))
   (nreverse doom-packages))
 ((module-list)
  (module-list
   (:config . use-package)
   (:core)
   (:user)
   (:completion . company)
   (:completion . ivy)
   (:ui . doom)
   (:ui . doom-dashboard)
   (:ui . emoji)
   (:ui . hl-todo)
   (:ui . hydra)
   (:ui . indent-guides)
   (:ui . minimap)
   (:ui . modeline)
   (:ui . ophints)
   (:ui . popup)
   (:ui . treemacs)
   (:ui . vc-gutter)
   (:ui . vi-tilde-fringe)
   (:ui . workspaces)
   (:editor . file-templates)
   (:editor . fold)
   (:editor . snippets)
   (:emacs . dired)
   (:emacs . electric)
   (:emacs . undo)
   (:emacs . vc)
   (:term . eshell)
   (:checkers . syntax)
   (:tools . eval)
   (:tools . lookup)
   (:tools . magit)
   (:tools . make)
   (:tools . pdf)
   (:lang . dart)
   (:lang . emacs-lisp)
   (:lang . fortran)
   (:lang . gdscript)
   (:lang . julia)
   (:lang . latex)
   (:lang . lua)
   (:lang . markdown)
   (:lang . org)
   (:lang . sh)
   (:app . calendar)
   (:config . default))
  (packages-file . "packages.el")
  (read-packages)
  (vnew closure
	(t)
	(key)
	(let
	    ((doom-module-context
	      (doom-module-context key)))
	  (if doom-inhibit-log nil
	    (doom--log ":context:module: =%s" doom-module-context))
	  (let*
	      ((file
		(and t
		     (doom-module-locate-path
		      (car key)
		      (cdr key)
		      doom-module-packages-file))))
	    (if file
		(doom-packages--read file nil 'noerror)
	      nil))))
  (old)
  (user? :user)))

;;;; 18
((let
     ((doom-context doom-context))
   (let
       ((tail
	 (ensure-list 'packages)))
     (while tail
       (let
	   ((context
	     (car tail)))
	 (doom-context-push context)
	 (setq tail
	       (cdr tail)))))
   (let
       ((user?
	 (assq :user module-list)))
     (if user?
	 (progn
	   (let
	       (doom-packages)
	     (read-packages
	      (cons :user nil)))))
     (mapc #'read-packages module-list)
     (if user?
	 (read-packages
	  (cons :user nil)))
     (nreverse doom-packages)))
 ((doom-context packages cli t)))

;;;; 19
((progn
   (fset #'read-packages vnew)
   (let
       ((doom-context doom-context))
     (let
	 ((tail
	   (ensure-list 'packages)))
       (while tail
	 (let
	     ((context
	       (car tail)))
	   (doom-context-push context)
	   (setq tail
		 (cdr tail)))))
     (let
	 ((user?
	   (assq :user module-list)))
       (if user?
	   (progn
	     (let
		 (doom-packages)
	       (read-packages
		(cons :user nil)))))
       (mapc #'read-packages module-list)
       (if user?
	   (read-packages
	    (cons :user nil)))
       (nreverse doom-packages))))
 nil)

;;;; 20
((unwind-protect
     (progn
       (fset #'read-packages vnew)
       (let
	   ((doom-context doom-context))
	 (let
	     ((tail
	       (ensure-list 'packages)))
	   (while tail
	     (let
		 ((context
		   (car tail)))
	       (doom-context-push context)
	       (setq tail
		     (cdr tail)))))
	 (let
	     ((user?
	       (assq :user module-list)))
	   (if user?
	       (progn
		 (let
		     (doom-packages)
		   (read-packages
		    (cons :user nil)))))
	   (mapc #'read-packages module-list)
	   (if user?
	       (read-packages
		(cons :user nil)))
	   (nreverse doom-packages))))
   (fset #'read-packages old))
 nil)

;;;; 21
((let*
     ((vnew
       #'(lambda
	   (key)
	   (let
	       ((doom-module-context
		 (doom-module-context key)))
	     (if doom-inhibit-log nil
	       (doom--log ":context:module: =%s" doom-module-context))
	     (let*
		 ((file
		   (and t
			(doom-module-locate-path
			 (car key)
			 (cdr key)
			 doom-module-packages-file))))
	       (if file
		   (doom-packages--read file nil 'noerror)
		 nil)))))
      (old
       (symbol-function #'read-packages)))
   (unwind-protect
       (progn
	 (fset #'read-packages vnew)
	 (let
	     ((doom-context doom-context))
	   (let
	       ((tail
		 (ensure-list 'packages)))
	     (while tail
	       (let
		   ((context
		     (car tail)))
		 (doom-context-push context)
		 (setq tail
		       (cdr tail)))))
	   (let
	       ((user?
		 (assq :user module-list)))
	     (if user?
		 (progn
		   (let
		       (doom-packages)
		     (read-packages
		      (cons :user nil)))))
	     (mapc #'read-packages module-list)
	     (if user?
		 (read-packages
		  (cons :user nil)))
	     (nreverse doom-packages))))
     (fset #'read-packages old)))
 ((module-list)
  (module-list
   (:config . use-package)
   (:core)
   (:user)
   (:completion . company)
   (:completion . ivy)
   (:ui . doom)
   (:ui . doom-dashboard)
   (:ui . emoji)
   (:ui . hl-todo)
   (:ui . hydra)
   (:ui . indent-guides)
   (:ui . minimap)
   (:ui . modeline)
   (:ui . ophints)
   (:ui . popup)
   (:ui . treemacs)
   (:ui . vc-gutter)
   (:ui . vi-tilde-fringe)
   (:ui . workspaces)
   (:editor . file-templates)
   (:editor . fold)
   (:editor . snippets)
   (:emacs . dired)
   (:emacs . electric)
   (:emacs . undo)
   (:emacs . vc)
   (:term . eshell)
   (:checkers . syntax)
   (:tools . eval)
   (:tools . lookup)
   (:tools . magit)
   (:tools . make)
   (:tools . pdf)
   (:lang . dart)
   (:lang . emacs-lisp)
   (:lang . fortran)
   (:lang . gdscript)
   (:lang . julia)
   (:lang . latex)
   (:lang . lua)
   (:lang . markdown)
   (:lang . org)
   (:lang . sh)
   (:app . calendar)
   (:config . default))
  (packages-file . "packages.el")
  (read-packages)
  (vnew closure
	(t)
	(key)
	(let
	    ((doom-module-context
	      (doom-module-context key)))
	  (if doom-inhibit-log nil
	    (doom--log ":context:module: =%s" doom-module-context))
	  (let*
	      ((file
		(and t
		     (doom-module-locate-path
		      (car key)
		      (cdr key)
		      doom-module-packages-file))))
	    (if file
		(doom-packages--read file nil 'noerror)
	      nil))))
  (old)))

;;;; 22
((let
     ((read-packages
       (symbol-function #'read-packages)))
   (ignore read-packages)
   (let*
       ((vnew
	 #'(lambda
	     (key)
	     (let
		 ((doom-module-context
		   (doom-module-context key)))
	       (if doom-inhibit-log nil
		 (doom--log ":context:module: =%s" doom-module-context))
	       (let*
		   ((file
		     (and t
			  (doom-module-locate-path
			   (car key)
			   (cdr key)
			   doom-module-packages-file))))
		 (if file
		     (doom-packages--read file nil 'noerror)
		   nil)))))
	(old
	 (symbol-function #'read-packages)))
     (unwind-protect
	 (progn
	   (fset #'read-packages vnew)
	   (let
	       ((doom-context doom-context))
	     (let
		 ((tail
		   (ensure-list 'packages)))
	       (while tail
		 (let
		     ((context
		       (car tail)))
		   (doom-context-push context)
		   (setq tail
			 (cdr tail)))))
	     (let
		 ((user?
		   (assq :user module-list)))
	       (if user?
		   (progn
		     (let
			 (doom-packages)
		       (read-packages
			(cons :user nil)))))
	       (mapc #'read-packages module-list)
	       (if user?
		   (read-packages
		    (cons :user nil)))
	       (nreverse doom-packages))))
       (fset #'read-packages old))))
 ((module-list)
  (module-list
   (:config . use-package)
   (:core)
   (:user)
   (:completion . company)
   (:completion . ivy)
   (:ui . doom)
   (:ui . doom-dashboard)
   (:ui . emoji)
   (:ui . hl-todo)
   (:ui . hydra)
   (:ui . indent-guides)
   (:ui . minimap)
   (:ui . modeline)
   (:ui . ophints)
   (:ui . popup)
   (:ui . treemacs)
   (:ui . vc-gutter)
   (:ui . vi-tilde-fringe)
   (:ui . workspaces)
   (:editor . file-templates)
   (:editor . fold)
   (:editor . snippets)
   (:emacs . dired)
   (:emacs . electric)
   (:emacs . undo)
   (:emacs . vc)
   (:term . eshell)
   (:checkers . syntax)
   (:tools . eval)
   (:tools . lookup)
   (:tools . magit)
   (:tools . make)
   (:tools . pdf)
   (:lang . dart)
   (:lang . emacs-lisp)
   (:lang . fortran)
   (:lang . gdscript)
   (:lang . julia)
   (:lang . latex)
   (:lang . lua)
   (:lang . markdown)
   (:lang . org)
   (:lang . sh)
   (:app . calendar)
   (:config . default))
  (packages-file . "packages.el")
  (read-packages)))

;;;; 23
((let
     ((module-list
       (cond
	((null module-list)
	 (doom-module-list))
	((symbolp module-list)
	 (doom-module-list 'all))
	(module-list)))
      (packages-file doom-module-packages-file)
      doom-disabled-packages doom-packages)
   (let
       ((read-packages
	 (symbol-function #'read-packages)))
     (ignore read-packages)
     (let*
	 ((vnew
	   #'(lambda
	       (key)
	       (let
		   ((doom-module-context
		     (doom-module-context key)))
		 (if doom-inhibit-log nil
		   (doom--log ":context:module: =%s" doom-module-context))
		 (let*
		     ((file
		       (and t
			    (doom-module-locate-path
			     (car key)
			     (cdr key)
			     doom-module-packages-file))))
		   (if file
		       (doom-packages--read file nil 'noerror)
		     nil)))))
	  (old
	   (symbol-function #'read-packages)))
       (unwind-protect
	   (progn
	     (fset #'read-packages vnew)
	     (let
		 ((doom-context doom-context))
	       (let
		   ((tail
		     (ensure-list 'packages)))
		 (while tail
		   (let
		       ((context
			 (car tail)))
		     (doom-context-push context)
		     (setq tail
			   (cdr tail)))))
	       (let
		   ((user?
		     (assq :user module-list)))
		 (if user?
		     (progn
		       (let
			   (doom-packages)
			 (read-packages
			  (cons :user nil)))))
		 (mapc #'read-packages module-list)
		 (if user?
		     (read-packages
		      (cons :user nil)))
		 (nreverse doom-packages))))
	 (fset #'read-packages old)))))
 ((doom-disabled-packages)
  (doom-packages)
  (module-list)
  (module-list
   (:config . use-package)
   (:core)
   (:user)
   (:completion . company)
   (:completion . ivy)
   (:ui . doom)
   (:ui . doom-dashboard)
   (:ui . emoji)
   (:ui . hl-todo)
   (:ui . hydra)
   (:ui . indent-guides)
   (:ui . minimap)
   (:ui . modeline)
   (:ui . ophints)
   (:ui . popup)
   (:ui . treemacs)
   (:ui . vc-gutter)
   (:ui . vi-tilde-fringe)
   (:ui . workspaces)
   (:editor . file-templates)
   (:editor . fold)
   (:editor . snippets)
   (:emacs . dired)
   (:emacs . electric)
   (:emacs . undo)
   (:emacs . vc)
   (:term . eshell)
   (:checkers . syntax)
   (:tools . eval)
   (:tools . lookup)
   (:tools . magit)
   (:tools . make)
   (:tools . pdf)
   (:lang . dart)
   (:lang . emacs-lisp)
   (:lang . fortran)
   (:lang . gdscript)
   (:lang . julia)
   (:lang . latex)
   (:lang . lua)
   (:lang . markdown)
   (:lang . org)
   (:lang . sh)
   (:app . calendar)
   (:config . default))
  (packages-file . "packages.el")))

;;;; 24
((doom-package-list)
 ((module-list)))

;;;; 25
((setq doom-packages
       (doom-package-list))
 nil)

;;;; 26
((progn
   (setq doom-disabled-packages nil)
   (setq doom-packages
	 (doom-package-list)))
 nil)

;;;; 27
((progn
   (if doom-inhibit-log nil
     (doom--log "Initializing straight.el"))
   (progn
     (setq doom-disabled-packages nil)
     (setq doom-packages
	   (doom-package-list)))
   (let
       (packages)
     (let
	 ((tail doom-packages))
       (while tail
	 (let
	     ((package
	       (car tail)))
	   (let*
	       ((--cl-rest-- package)
		(name
		 (if --cl-rest--
		     (car-safe
		      (prog1 --cl-rest--
			(setq --cl-rest--
			      (cdr --cl-rest--))))
		   (signal 'wrong-number-of-arguments
			   (list
			    '(name &key recipe disable ignore &allow-other-keys)
			    (length --cl-rest--)))))
		(recipe
		 (car
		  (cdr
		   (plist-member --cl-rest-- ':recipe))))
		(disable
		 (car
		  (cdr
		   (plist-member --cl-rest-- ':disable))))
		(ignore
		 (car
		  (cdr
		   (plist-member --cl-rest-- ':ignore)))))
	     (if ignore
		 (straight-override-recipe
		  (cons name
			'(:type built-in)))
	       (if disable
		   (let*
		       ((var name))
		     (if
			 (memql var doom-disabled-packages)
			 (with-no-warnings doom-disabled-packages)
		       (setq doom-disabled-packages
			     (cons var doom-disabled-packages))))
		 (if recipe
		     (progn
		       (straight-override-recipe
			(cons name recipe))))
		 (setq packages
		       (append packages
			       (cons name
				     (straight--get-dependencies name)))))))
	   (setq tail
		 (cdr tail)))))
     (let
	 ((tail
	   (cl-delete-duplicates packages :test #'equal)))
       (while tail
	 (let
	     ((package
	       (car tail)))
	   (straight-register-package package)
	   (let
	       ((name
		 (symbol-name package)))
	     (add-to-list 'load-path
			  (directory-file-name
			   (straight--build-dir name)))
	     (straight--load-package-autoloads name))
	   (setq tail
		 (cdr tail)))))))
 nil)

;;;; 28
((if
     (or force-p
	 (null doom-packages))
     (progn
       (if doom-inhibit-log nil
	 (doom--log "Initializing straight.el"))
       (progn
	 (setq doom-disabled-packages nil)
	 (setq doom-packages
	       (doom-package-list)))
       (let
	   (packages)
	 (let
	     ((tail doom-packages))
	   (while tail
	     (let
		 ((package
		   (car tail)))
	       (let*
		   ((--cl-rest-- package)
		    (name
		     (if --cl-rest--
			 (car-safe
			  (prog1 --cl-rest--
			    (setq --cl-rest--
				  (cdr --cl-rest--))))
		       (signal 'wrong-number-of-arguments
			       (list
				'(name &key recipe disable ignore &allow-other-keys)
				(length --cl-rest--)))))
		    (recipe
		     (car
		      (cdr
		       (plist-member --cl-rest-- ':recipe))))
		    (disable
		     (car
		      (cdr
		       (plist-member --cl-rest-- ':disable))))
		    (ignore
		     (car
		      (cdr
		       (plist-member --cl-rest-- ':ignore)))))
		 (if ignore
		     (straight-override-recipe
		      (cons name
			    '(:type built-in)))
		   (if disable
		       (let*
			   ((var name))
			 (if
			     (memql var doom-disabled-packages)
			     (with-no-warnings doom-disabled-packages)
			   (setq doom-disabled-packages
				 (cons var doom-disabled-packages))))
		     (if recipe
			 (progn
			   (straight-override-recipe
			    (cons name recipe))))
		     (setq packages
			   (append packages
				   (cons name
					 (straight--get-dependencies name)))))))
	       (setq tail
		     (cdr tail)))))
	 (let
	     ((tail
	       (cl-delete-duplicates packages :test #'equal)))
	   (while tail
	     (let
		 ((package
		   (car tail)))
	       (straight-register-package package)
	       (let
		   ((name
		     (symbol-name package)))
		 (add-to-list 'load-path
			      (directory-file-name
			       (straight--build-dir name)))
		 (straight--load-package-autoloads name))
	       (setq tail
		     (cdr tail))))))))
 nil)

;;;; 29
((doom-initialize-packages)
 ((force-p)))

;;;; 30
((doom-packages-ensure nil)
 ((force-p)))

;;;; 31
((let
     ((doom-print-level
       (or nil doom-print-level))
      (doom-print-indent
       (+
	(if t
	    (or nil doom-print-indent-increment)
	  0)
	doom-print-indent)))
   (let
       ((x0
	 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
	(to-rebuild nil))
     (progn
       (ignore
	(consp x0))
       (let*
	   ((x53
	     (car-safe x0))
	    (x54
	     (cdr-safe x0)))
	 (let
	     ((old-version x53)
	      (old-host x54))
	   (progn
	     (if
		 (and old-version
		      (not
		       (equal old-version emacs-version)))
		 (progn
		   (doom-print
		    (doom-print--format
		     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
		     old-version emacs-version))
		   (setq to-rebuild t)))
	     (if
		 (and old-host
		      (not
		       (equal old-host
			      (system-name))))
		 (progn
		   (doom-print
		    (doom-print--format
		     (doom-print--class 'warn "Your system has changed since last sync")))
		   (setq to-rebuild t)))
	     (if
		 (and to-rebuild
		      (not
		       (progn
			 (or
			  (progn
			    (and
			     (memq
			      (type-of context)
			      cl-struct-doom-cli-context-tags)
			     t))
			  (signal 'wrong-type-argument
				  (list 'doom-cli-context context)))
			 (aref context 6))))
		 (progn
		   (cond
		    (nobuild?
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
		    ((doom-cli-context-get context 'upgrading)
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Packages will be rebuilt")))
		     (setq rebuild? t))
		    ((y-or-n-p
		      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
		     (setq rebuild? t))
		    ((exit! 0))))))))))
   (if
       (and
	(not noenvvar?)
	(file-exists-p doom-env-file))
       (progn
	 (call!
	  '(env))))
   (doom-packages-ensure rebuild?)
   (if noupdate? nil
     (doom-packages-update
      (not update?)))
   (doom-packages-purge purge? purge? purge? purge? purge?)
   (if
       (doom-profile-generate)
       (progn
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
	 (run-hooks 'doom-after-sync-hook)))
   (if
       (or rebuild?
	   (not
	    (file-exists-p doom-cli-sync-info-file)))
       (progn
	 (let
	     ((temp-file doom-cli-sync-info-file)
	      (temp-buffer
	       (generate-new-buffer " *temp file*" t)))
	   (unwind-protect
	       (prog1
		   (save-current-buffer
		     (set-buffer temp-buffer)
		     (prin1
		      (cons emacs-version
			    (system-name))
		      (current-buffer)))
		 (save-current-buffer
		   (set-buffer temp-buffer)
		   (write-region nil nil temp-file nil 0)))
	     (and
	      (buffer-name temp-buffer)
	      (kill-buffer temp-buffer))))))
   t)
 ((doom-print-level . notice)
  (doom-print-indent . 2)))

;;;; 32
((progn
   (let
       ((doom-print-level
	 (or nil doom-print-level))
	(doom-print-indent
	 (+
	  (if t
	      (or nil doom-print-indent-increment)
	    0)
	  doom-print-indent)))
     (let
	 ((x0
	   (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
	  (to-rebuild nil))
       (progn
	 (ignore
	  (consp x0))
	 (let*
	     ((x53
	       (car-safe x0))
	      (x54
	       (cdr-safe x0)))
	   (let
	       ((old-version x53)
		(old-host x54))
	     (progn
	       (if
		   (and old-version
			(not
			 (equal old-version emacs-version)))
		   (progn
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
		       old-version emacs-version))
		     (setq to-rebuild t)))
	       (if
		   (and old-host
			(not
			 (equal old-host
				(system-name))))
		   (progn
		     (doom-print
		      (doom-print--format
		       (doom-print--class 'warn "Your system has changed since last sync")))
		     (setq to-rebuild t)))
	       (if
		   (and to-rebuild
			(not
			 (progn
			   (or
			    (progn
			      (and
			       (memq
				(type-of context)
				cl-struct-doom-cli-context-tags)
			       t))
			    (signal 'wrong-type-argument
				    (list 'doom-cli-context context)))
			   (aref context 6))))
		   (progn
		     (cond
		      (nobuild?
		       (doom-print
			(doom-print--format
			 (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
		      ((doom-cli-context-get context 'upgrading)
		       (doom-print
			(doom-print--format
			 (doom-print--class 'warn "Packages will be rebuilt")))
		       (setq rebuild? t))
		      ((y-or-n-p
			(doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
		       (setq rebuild? t))
		      ((exit! 0))))))))))
     (if
	 (and
	  (not noenvvar?)
	  (file-exists-p doom-env-file))
	 (progn
	   (call!
	    '(env))))
     (doom-packages-ensure rebuild?)
     (if noupdate? nil
       (doom-packages-update
	(not update?)))
     (doom-packages-purge purge? purge? purge? purge? purge?)
     (if
	 (doom-profile-generate)
	 (progn
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
	   (run-hooks 'doom-after-sync-hook)))
     (if
	 (or rebuild?
	     (not
	      (file-exists-p doom-cli-sync-info-file)))
	 (progn
	   (let
	       ((temp-file doom-cli-sync-info-file)
		(temp-buffer
		 (generate-new-buffer " *temp file*" t)))
	     (unwind-protect
		 (prog1
		     (save-current-buffer
		       (set-buffer temp-buffer)
		       (prin1
			(cons emacs-version
			      (system-name))
			(current-buffer)))
		   (save-current-buffer
		     (set-buffer temp-buffer)
		     (write-region nil nil temp-file nil 0)))
	       (and
		(buffer-name temp-buffer)
		(kill-buffer temp-buffer))))))
     t))
 nil)

;;;; 33
((unwind-protect
     (progn
       (let
	   ((doom-print-level
	     (or nil doom-print-level))
	    (doom-print-indent
	     (+
	      (if t
		  (or nil doom-print-indent-increment)
		0)
	      doom-print-indent)))
	 (let
	     ((x0
	       (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
	      (to-rebuild nil))
	   (progn
	     (ignore
	      (consp x0))
	     (let*
		 ((x53
		   (car-safe x0))
		  (x54
		   (cdr-safe x0)))
	       (let
		   ((old-version x53)
		    (old-host x54))
		 (progn
		   (if
		       (and old-version
			    (not
			     (equal old-version emacs-version)))
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
			   old-version emacs-version))
			 (setq to-rebuild t)))
		   (if
		       (and old-host
			    (not
			     (equal old-host
				    (system-name))))
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'warn "Your system has changed since last sync")))
			 (setq to-rebuild t)))
		   (if
		       (and to-rebuild
			    (not
			     (progn
			       (or
				(progn
				  (and
				   (memq
				    (type-of context)
				    cl-struct-doom-cli-context-tags)
				   t))
				(signal 'wrong-type-argument
					(list 'doom-cli-context context)))
			       (aref context 6))))
		       (progn
			 (cond
			  (nobuild?
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			  ((doom-cli-context-get context 'upgrading)
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Packages will be rebuilt")))
			   (setq rebuild? t))
			  ((y-or-n-p
			    (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
			   (setq rebuild? t))
			  ((exit! 0))))))))))
	 (if
	     (and
	      (not noenvvar?)
	      (file-exists-p doom-env-file))
	     (progn
	       (call!
		'(env))))
	 (doom-packages-ensure rebuild?)
	 (if noupdate? nil
	   (doom-packages-update
	    (not update?)))
	 (doom-packages-purge purge? purge? purge? purge? purge?)
	 (if
	     (doom-profile-generate)
	     (progn
	       (doom-print
		(doom-print--format
		 (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
	       (run-hooks 'doom-after-sync-hook)))
	 (if
	     (or rebuild?
		 (not
		  (file-exists-p doom-cli-sync-info-file)))
	     (progn
	       (let
		   ((temp-file doom-cli-sync-info-file)
		    (temp-buffer
		     (generate-new-buffer " *temp file*" t)))
		 (unwind-protect
		     (prog1
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (prin1
			    (cons emacs-version
				  (system-name))
			    (current-buffer)))
		       (save-current-buffer
			 (set-buffer temp-buffer)
			 (write-region nil nil temp-file nil 0)))
		   (and
		    (buffer-name temp-buffer)
		    (kill-buffer temp-buffer))))))
	 t))
   (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))
 nil)

;;;; 34
((let
     ((noenvvar?
       (cdr
	(assq 'noenvvar? alist)))
      (update?
       (cdr
	(assq 'update? alist)))
      (noupdate?
       (cdr
	(assq 'noupdate? alist)))
      (purge?
       (cdr
	(assq 'purge? alist)))
      (jobs
       (cdr
	(assq 'jobs alist)))
      (rebuild?
       (cdr
	(assq 'rebuild? alist)))
      (nobuild?
       (cdr
	(assq 'nobuild? alist)))
      (context
       (cdr
	(assq 'context alist))))
   (if
       (doom-profiles-bootloadable-p)
       (progn
	 (call!
	  '(profiles sync "--reload"))))
   (if jobs
       (progn
	 (setq native-comp-async-jobs-number
	       (truncate jobs))))
   (run-hooks 'doom-before-sync-hook)
   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
   (doom-print
    (doom-print--format
     (doom-print--class 'item "Using Emacs %s @ %s")
     emacs-version
     (doom-print--class 'path invocation-directory invocation-name)))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Synchronizing %S profile...")
     (or
      (car doom-profile)
      "default")))
   (unwind-protect
       (progn
	 (let
	     ((doom-print-level
	       (or nil doom-print-level))
	      (doom-print-indent
	       (+
		(if t
		    (or nil doom-print-indent-increment)
		  0)
		doom-print-indent)))
	   (let
	       ((x0
		 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		(to-rebuild nil))
	     (progn
	       (ignore
		(consp x0))
	       (let*
		   ((x53
		     (car-safe x0))
		    (x54
		     (cdr-safe x0)))
		 (let
		     ((old-version x53)
		      (old-host x54))
		   (progn
		     (if
			 (and old-version
			      (not
			       (equal old-version emacs-version)))
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
			     old-version emacs-version))
			   (setq to-rebuild t)))
		     (if
			 (and old-host
			      (not
			       (equal old-host
				      (system-name))))
			 (progn
			   (doom-print
			    (doom-print--format
			     (doom-print--class 'warn "Your system has changed since last sync")))
			   (setq to-rebuild t)))
		     (if
			 (and to-rebuild
			      (not
			       (progn
				 (or
				  (progn
				    (and
				     (memq
				      (type-of context)
				      cl-struct-doom-cli-context-tags)
				     t))
				  (signal 'wrong-type-argument
					  (list 'doom-cli-context context)))
				 (aref context 6))))
			 (progn
			   (cond
			    (nobuild?
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			    ((doom-cli-context-get context 'upgrading)
			     (doom-print
			      (doom-print--format
			       (doom-print--class 'warn "Packages will be rebuilt")))
			     (setq rebuild? t))
			    ((y-or-n-p
			      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
			     (setq rebuild? t))
			    ((exit! 0))))))))))
	   (if
	       (and
		(not noenvvar?)
		(file-exists-p doom-env-file))
	       (progn
		 (call!
		  '(env))))
	   (doom-packages-ensure rebuild?)
	   (if noupdate? nil
	     (doom-packages-update
	      (not update?)))
	   (doom-packages-purge purge? purge? purge? purge? purge?)
	   (if
	       (doom-profile-generate)
	       (progn
		 (doom-print
		  (doom-print--format
		   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		 (run-hooks 'doom-after-sync-hook)))
	   (if
	       (or rebuild?
		   (not
		    (file-exists-p doom-cli-sync-info-file)))
	       (progn
		 (let
		     ((temp-file doom-cli-sync-info-file)
		      (temp-buffer
		       (generate-new-buffer " *temp file*" t)))
		   (unwind-protect
		       (prog1
			   (save-current-buffer
			     (set-buffer temp-buffer)
			     (prin1
			      (cons emacs-version
				    (system-name))
			      (current-buffer)))
			 (save-current-buffer
			   (set-buffer temp-buffer)
			   (write-region nil nil temp-file nil 0)))
		     (and
		      (buffer-name temp-buffer)
		      (kill-buffer temp-buffer))))))
	   t))
     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))
 ((cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (alist
   (context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e"))
  (noenvvar? . "-e")
  (update?)
  (noupdate?)
  (purge?)
  (jobs)
  (rebuild?)
  (nobuild?)
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 35
(((closure
      (t)
      (cli alist)
    (let
	((noenvvar?
	  (cdr
	   (assq 'noenvvar? alist)))
	 (update?
	  (cdr
	   (assq 'update? alist)))
	 (noupdate?
	  (cdr
	   (assq 'noupdate? alist)))
	 (purge?
	  (cdr
	   (assq 'purge? alist)))
	 (jobs
	  (cdr
	   (assq 'jobs alist)))
	 (rebuild?
	  (cdr
	   (assq 'rebuild? alist)))
	 (nobuild?
	  (cdr
	   (assq 'nobuild? alist)))
	 (context
	  (cdr
	   (assq 'context alist))))
      (if
	  (doom-profiles-bootloadable-p)
	  (progn
	    (call!
	     '(profiles sync "--reload"))))
      (if jobs
	  (progn
	    (setq native-comp-async-jobs-number
		  (truncate jobs))))
      (run-hooks 'doom-before-sync-hook)
      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
      (doom-print
       (doom-print--format
	(doom-print--class 'item "Using Emacs %s @ %s")
	emacs-version
	(doom-print--class 'path invocation-directory invocation-name)))
      (doom-print
       (doom-print--format
	(doom-print--class 'start "Synchronizing %S profile...")
	(or
	 (car doom-profile)
	 "default")))
      (unwind-protect
	  (progn
	    (let
		((doom-print-level
		  (or nil doom-print-level))
		 (doom-print-indent
		  (+
		   (if t
		       (or nil doom-print-indent-increment)
		     0)
		   doom-print-indent)))
	      (let
		  ((x0
		    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		   (to-rebuild nil))
		(progn
		  (ignore
		   (consp x0))
		  (let*
		      ((x53
			(car-safe x0))
		       (x54
			(cdr-safe x0)))
		    (let
			((old-version x53)
			 (old-host x54))
		      (progn
			(if
			    (and old-version
				 (not
				  (equal old-version emacs-version)))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				old-version emacs-version))
			      (setq to-rebuild t)))
			(if
			    (and old-host
				 (not
				  (equal old-host
					 (system-name))))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Your system has changed since last sync")))
			      (setq to-rebuild t)))
			(if
			    (and to-rebuild
				 (not
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of context)
					 cl-struct-doom-cli-context-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-context context)))
				    (aref context 6))))
			    (progn
			      (cond
			       (nobuild?
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			       ((doom-cli-context-get context 'upgrading)
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages will be rebuilt")))
				(setq rebuild? t))
			       ((y-or-n-p
				 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				(setq rebuild? t))
			       ((exit! 0))))))))))
	      (if
		  (and
		   (not noenvvar?)
		   (file-exists-p doom-env-file))
		  (progn
		    (call!
		     '(env))))
	      (doom-packages-ensure rebuild?)
	      (if noupdate? nil
		(doom-packages-update
		 (not update?)))
	      (doom-packages-purge purge? purge? purge? purge? purge?)
	      (if
		  (doom-profile-generate)
		  (progn
		    (doom-print
		     (doom-print--format
		      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		    (run-hooks 'doom-after-sync-hook)))
	      (if
		  (or rebuild?
		      (not
		       (file-exists-p doom-cli-sync-info-file)))
		  (progn
		    (let
			((temp-file doom-cli-sync-info-file)
			 (temp-buffer
			  (generate-new-buffer " *temp file*" t)))
		      (unwind-protect
			  (prog1
			      (save-current-buffer
				(set-buffer temp-buffer)
				(prin1
				 (cons emacs-version
				       (system-name))
				 (current-buffer)))
			    (save-current-buffer
			      (set-buffer temp-buffer)
			      (write-region nil nil temp-file nil 0)))
			(and
			 (buffer-name temp-buffer)
			 (kill-buffer temp-buffer))))))
	      t))
	(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))
  #s(doom-cli
     ("doom" "sync")
     nil
     (("SUMMARY" . "Synchronize your config with Doom Emacs.")
      ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
      ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
     nil nil
     (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			 ("-e")
			 nil nil)
	#s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			   ("-u")
			   nil nil)
	#s(doom-cli-option noupdate? "Don't update any packages" nil nil
			   ("-U")
			   nil nil)
	#s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			   ("--gc")
			   nil nil)
	#s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			   ("-j" "--jobs")
			   (num)
			   nil)
	#s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			   ("-b" "--rebuild")
			   nil nil)
	#s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			   ("-B")
			   nil nil))
     ((&context context))
     (:benchmark t :prefix
		 (doom)
		 :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
     (closure
	 (t)
	 (cli alist)
       (let
	   ((noenvvar?
	     (cdr
	      (assq 'noenvvar? alist)))
	    (update?
	     (cdr
	      (assq 'update? alist)))
	    (noupdate?
	     (cdr
	      (assq 'noupdate? alist)))
	    (purge?
	     (cdr
	      (assq 'purge? alist)))
	    (jobs
	     (cdr
	      (assq 'jobs alist)))
	    (rebuild?
	     (cdr
	      (assq 'rebuild? alist)))
	    (nobuild?
	     (cdr
	      (assq 'nobuild? alist)))
	    (context
	     (cdr
	      (assq 'context alist))))
	 (if
	     (doom-profiles-bootloadable-p)
	     (progn
	       (call!
		'(profiles sync "--reload"))))
	 (if jobs
	     (progn
	       (setq native-comp-async-jobs-number
		     (truncate jobs))))
	 (run-hooks 'doom-before-sync-hook)
	 (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "Using Emacs %s @ %s")
	   emacs-version
	   (doom-print--class 'path invocation-directory invocation-name)))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'start "Synchronizing %S profile...")
	   (or
	    (car doom-profile)
	    "default")))
	 (unwind-protect
	     (progn
	       (let
		   ((doom-print-level
		     (or nil doom-print-level))
		    (doom-print-indent
		     (+
		      (if t
			  (or nil doom-print-indent-increment)
			0)
		      doom-print-indent)))
		 (let
		     ((x0
		       (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		      (to-rebuild nil))
		   (progn
		     (ignore
		      (consp x0))
		     (let*
			 ((x53
			   (car-safe x0))
			  (x54
			   (cdr-safe x0)))
		       (let
			   ((old-version x53)
			    (old-host x54))
			 (progn
			   (if
			       (and old-version
				    (not
				     (equal old-version emacs-version)))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				   old-version emacs-version))
				 (setq to-rebuild t)))
			   (if
			       (and old-host
				    (not
				     (equal old-host
					    (system-name))))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Your system has changed since last sync")))
				 (setq to-rebuild t)))
			   (if
			       (and to-rebuild
				    (not
				     (progn
				       (or
					(progn
					  (and
					   (memq
					    (type-of context)
					    cl-struct-doom-cli-context-tags)
					   t))
					(signal 'wrong-type-argument
						(list 'doom-cli-context context)))
				       (aref context 6))))
			       (progn
				 (cond
				  (nobuild?
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				  ((doom-cli-context-get context 'upgrading)
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages will be rebuilt")))
				   (setq rebuild? t))
				  ((y-or-n-p
				    (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				   (setq rebuild? t))
				  ((exit! 0))))))))))
		 (if
		     (and
		      (not noenvvar?)
		      (file-exists-p doom-env-file))
		     (progn
		       (call!
			'(env))))
		 (doom-packages-ensure rebuild?)
		 (if noupdate? nil
		   (doom-packages-update
		    (not update?)))
		 (doom-packages-purge purge? purge? purge? purge? purge?)
		 (if
		     (doom-profile-generate)
		     (progn
		       (doom-print
			(doom-print--format
			 (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		       (run-hooks 'doom-after-sync-hook)))
		 (if
		     (or rebuild?
			 (not
			  (file-exists-p doom-cli-sync-info-file)))
		     (progn
		       (let
			   ((temp-file doom-cli-sync-info-file)
			    (temp-buffer
			     (generate-new-buffer " *temp file*" t)))
			 (unwind-protect
			     (prog1
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (prin1
				    (cons emacs-version
					  (system-name))
				    (current-buffer)))
			       (save-current-buffer
				 (set-buffer temp-buffer)
				 (write-region nil nil temp-file nil 0)))
			   (and
			    (buffer-name temp-buffer)
			    (kill-buffer temp-buffer))))))
		 t))
	   (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
  ((context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e")))
 ((cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (alist
   (context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e"))))

;;;; 36
((funcall
  (closure
      (t)
      (cli alist)
    (let
	((noenvvar?
	  (cdr
	   (assq 'noenvvar? alist)))
	 (update?
	  (cdr
	   (assq 'update? alist)))
	 (noupdate?
	  (cdr
	   (assq 'noupdate? alist)))
	 (purge?
	  (cdr
	   (assq 'purge? alist)))
	 (jobs
	  (cdr
	   (assq 'jobs alist)))
	 (rebuild?
	  (cdr
	   (assq 'rebuild? alist)))
	 (nobuild?
	  (cdr
	   (assq 'nobuild? alist)))
	 (context
	  (cdr
	   (assq 'context alist))))
      (if
	  (doom-profiles-bootloadable-p)
	  (progn
	    (call!
	     '(profiles sync "--reload"))))
      (if jobs
	  (progn
	    (setq native-comp-async-jobs-number
		  (truncate jobs))))
      (run-hooks 'doom-before-sync-hook)
      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
      (doom-print
       (doom-print--format
	(doom-print--class 'item "Using Emacs %s @ %s")
	emacs-version
	(doom-print--class 'path invocation-directory invocation-name)))
      (doom-print
       (doom-print--format
	(doom-print--class 'start "Synchronizing %S profile...")
	(or
	 (car doom-profile)
	 "default")))
      (unwind-protect
	  (progn
	    (let
		((doom-print-level
		  (or nil doom-print-level))
		 (doom-print-indent
		  (+
		   (if t
		       (or nil doom-print-indent-increment)
		     0)
		   doom-print-indent)))
	      (let
		  ((x0
		    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		   (to-rebuild nil))
		(progn
		  (ignore
		   (consp x0))
		  (let*
		      ((x53
			(car-safe x0))
		       (x54
			(cdr-safe x0)))
		    (let
			((old-version x53)
			 (old-host x54))
		      (progn
			(if
			    (and old-version
				 (not
				  (equal old-version emacs-version)))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				old-version emacs-version))
			      (setq to-rebuild t)))
			(if
			    (and old-host
				 (not
				  (equal old-host
					 (system-name))))
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'warn "Your system has changed since last sync")))
			      (setq to-rebuild t)))
			(if
			    (and to-rebuild
				 (not
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of context)
					 cl-struct-doom-cli-context-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-context context)))
				    (aref context 6))))
			    (progn
			      (cond
			       (nobuild?
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
			       ((doom-cli-context-get context 'upgrading)
				(doom-print
				 (doom-print--format
				  (doom-print--class 'warn "Packages will be rebuilt")))
				(setq rebuild? t))
			       ((y-or-n-p
				 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				(setq rebuild? t))
			       ((exit! 0))))))))))
	      (if
		  (and
		   (not noenvvar?)
		   (file-exists-p doom-env-file))
		  (progn
		    (call!
		     '(env))))
	      (doom-packages-ensure rebuild?)
	      (if noupdate? nil
		(doom-packages-update
		 (not update?)))
	      (doom-packages-purge purge? purge? purge? purge? purge?)
	      (if
		  (doom-profile-generate)
		  (progn
		    (doom-print
		     (doom-print--format
		      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		    (run-hooks 'doom-after-sync-hook)))
	      (if
		  (or rebuild?
		      (not
		       (file-exists-p doom-cli-sync-info-file)))
		  (progn
		    (let
			((temp-file doom-cli-sync-info-file)
			 (temp-buffer
			  (generate-new-buffer " *temp file*" t)))
		      (unwind-protect
			  (prog1
			      (save-current-buffer
				(set-buffer temp-buffer)
				(prin1
				 (cons emacs-version
				       (system-name))
				 (current-buffer)))
			    (save-current-buffer
			      (set-buffer temp-buffer)
			      (write-region nil nil temp-file nil 0)))
			(and
			 (buffer-name temp-buffer)
			 (kill-buffer temp-buffer))))))
	      t))
	(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))
  #s(doom-cli
     ("doom" "sync")
     nil
     (("SUMMARY" . "Synchronize your config with Doom Emacs.")
      ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
      ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
     nil nil
     (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			 ("-e")
			 nil nil)
	#s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			   ("-u")
			   nil nil)
	#s(doom-cli-option noupdate? "Don't update any packages" nil nil
			   ("-U")
			   nil nil)
	#s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			   ("--gc")
			   nil nil)
	#s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			   ("-j" "--jobs")
			   (num)
			   nil)
	#s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			   ("-b" "--rebuild")
			   nil nil)
	#s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			   ("-B")
			   nil nil))
     ((&context context))
     (:benchmark t :prefix
		 (doom)
		 :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
     (closure
	 (t)
	 (cli alist)
       (let
	   ((noenvvar?
	     (cdr
	      (assq 'noenvvar? alist)))
	    (update?
	     (cdr
	      (assq 'update? alist)))
	    (noupdate?
	     (cdr
	      (assq 'noupdate? alist)))
	    (purge?
	     (cdr
	      (assq 'purge? alist)))
	    (jobs
	     (cdr
	      (assq 'jobs alist)))
	    (rebuild?
	     (cdr
	      (assq 'rebuild? alist)))
	    (nobuild?
	     (cdr
	      (assq 'nobuild? alist)))
	    (context
	     (cdr
	      (assq 'context alist))))
	 (if
	     (doom-profiles-bootloadable-p)
	     (progn
	       (call!
		'(profiles sync "--reload"))))
	 (if jobs
	     (progn
	       (setq native-comp-async-jobs-number
		     (truncate jobs))))
	 (run-hooks 'doom-before-sync-hook)
	 (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'item "Using Emacs %s @ %s")
	   emacs-version
	   (doom-print--class 'path invocation-directory invocation-name)))
	 (doom-print
	  (doom-print--format
	   (doom-print--class 'start "Synchronizing %S profile...")
	   (or
	    (car doom-profile)
	    "default")))
	 (unwind-protect
	     (progn
	       (let
		   ((doom-print-level
		     (or nil doom-print-level))
		    (doom-print-indent
		     (+
		      (if t
			  (or nil doom-print-indent-increment)
			0)
		      doom-print-indent)))
		 (let
		     ((x0
		       (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
		      (to-rebuild nil))
		   (progn
		     (ignore
		      (consp x0))
		     (let*
			 ((x53
			   (car-safe x0))
			  (x54
			   (cdr-safe x0)))
		       (let
			   ((old-version x53)
			    (old-host x54))
			 (progn
			   (if
			       (and old-version
				    (not
				     (equal old-version emacs-version)))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				   old-version emacs-version))
				 (setq to-rebuild t)))
			   (if
			       (and old-host
				    (not
				     (equal old-host
					    (system-name))))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--class 'warn "Your system has changed since last sync")))
				 (setq to-rebuild t)))
			   (if
			       (and to-rebuild
				    (not
				     (progn
				       (or
					(progn
					  (and
					   (memq
					    (type-of context)
					    cl-struct-doom-cli-context-tags)
					   t))
					(signal 'wrong-type-argument
						(list 'doom-cli-context context)))
				       (aref context 6))))
			       (progn
				 (cond
				  (nobuild?
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				  ((doom-cli-context-get context 'upgrading)
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Packages will be rebuilt")))
				   (setq rebuild? t))
				  ((y-or-n-p
				    (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				   (setq rebuild? t))
				  ((exit! 0))))))))))
		 (if
		     (and
		      (not noenvvar?)
		      (file-exists-p doom-env-file))
		     (progn
		       (call!
			'(env))))
		 (doom-packages-ensure rebuild?)
		 (if noupdate? nil
		   (doom-packages-update
		    (not update?)))
		 (doom-packages-purge purge? purge? purge? purge? purge?)
		 (if
		     (doom-profile-generate)
		     (progn
		       (doom-print
			(doom-print--format
			 (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
		       (run-hooks 'doom-after-sync-hook)))
		 (if
		     (or rebuild?
			 (not
			  (file-exists-p doom-cli-sync-info-file)))
		     (progn
		       (let
			   ((temp-file doom-cli-sync-info-file)
			    (temp-buffer
			     (generate-new-buffer " *temp file*" t)))
			 (unwind-protect
			     (prog1
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (prin1
				    (cons emacs-version
					  (system-name))
				    (current-buffer)))
			       (save-current-buffer
				 (set-buffer temp-buffer)
				 (write-region nil nil temp-file nil 0)))
			   (and
			    (buffer-name temp-buffer)
			    (kill-buffer temp-buffer))))))
		 t))
	   (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
  ((context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e")))
 nil)

;;;; 37
((doom-cli-execute #s(doom-cli
		      ("doom" "sync")
		      nil
		      (("SUMMARY" . "Synchronize your config with Doom Emacs.")
		       ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
		       ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
		      nil nil
		      (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
					  ("-e")
					  nil nil)
			 #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
					    ("-u")
					    nil nil)
			 #s(doom-cli-option noupdate? "Don't update any packages" nil nil
					    ("-U")
					    nil nil)
			 #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
					    ("--gc")
					    nil nil)
			 #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
					    ("-j" "--jobs")
					    (num)
					    nil)
			 #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
					    ("-b" "--rebuild")
					    nil nil)
			 #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
					    ("-B")
					    nil nil))
		      ((&context context))
		      (:benchmark t :prefix
				  (doom)
				  :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
		      (closure
			  (t)
			  (cli alist)
			(let
			    ((noenvvar?
			      (cdr
			       (assq 'noenvvar? alist)))
			     (update?
			      (cdr
			       (assq 'update? alist)))
			     (noupdate?
			      (cdr
			       (assq 'noupdate? alist)))
			     (purge?
			      (cdr
			       (assq 'purge? alist)))
			     (jobs
			      (cdr
			       (assq 'jobs alist)))
			     (rebuild?
			      (cdr
			       (assq 'rebuild? alist)))
			     (nobuild?
			      (cdr
			       (assq 'nobuild? alist)))
			     (context
			      (cdr
			       (assq 'context alist))))
			  (if
			      (doom-profiles-bootloadable-p)
			      (progn
				(call!
				 '(profiles sync "--reload"))))
			  (if jobs
			      (progn
				(setq native-comp-async-jobs-number
				      (truncate jobs))))
			  (run-hooks 'doom-before-sync-hook)
			  (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'item "Using Emacs %s @ %s")
			    emacs-version
			    (doom-print--class 'path invocation-directory invocation-name)))
			  (doom-print
			   (doom-print--format
			    (doom-print--class 'start "Synchronizing %S profile...")
			    (or
			     (car doom-profile)
			     "default")))
			  (unwind-protect
			      (progn
				(let
				    ((doom-print-level
				      (or nil doom-print-level))
				     (doom-print-indent
				      (+
				       (if t
					   (or nil doom-print-indent-increment)
					 0)
				       doom-print-indent)))
				  (let
				      ((x0
					(doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
				       (to-rebuild nil))
				    (progn
				      (ignore
				       (consp x0))
				      (let*
					  ((x53
					    (car-safe x0))
					   (x54
					    (cdr-safe x0)))
					(let
					    ((old-version x53)
					     (old-host x54))
					  (progn
					    (if
						(and old-version
						     (not
						      (equal old-version emacs-version)))
						(progn
						  (doom-print
						   (doom-print--format
						    (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
						    old-version emacs-version))
						  (setq to-rebuild t)))
					    (if
						(and old-host
						     (not
						      (equal old-host
							     (system-name))))
						(progn
						  (doom-print
						   (doom-print--format
						    (doom-print--class 'warn "Your system has changed since last sync")))
						  (setq to-rebuild t)))
					    (if
						(and to-rebuild
						     (not
						      (progn
							(or
							 (progn
							   (and
							    (memq
							     (type-of context)
							     cl-struct-doom-cli-context-tags)
							    t))
							 (signal 'wrong-type-argument
								 (list 'doom-cli-context context)))
							(aref context 6))))
						(progn
						  (cond
						   (nobuild?
						    (doom-print
						     (doom-print--format
						      (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
						   ((doom-cli-context-get context 'upgrading)
						    (doom-print
						     (doom-print--format
						      (doom-print--class 'warn "Packages will be rebuilt")))
						    (setq rebuild? t))
						   ((y-or-n-p
						     (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
						    (setq rebuild? t))
						   ((exit! 0))))))))))
				  (if
				      (and
				       (not noenvvar?)
				       (file-exists-p doom-env-file))
				      (progn
					(call!
					 '(env))))
				  (doom-packages-ensure rebuild?)
				  (if noupdate? nil
				    (doom-packages-update
				     (not update?)))
				  (doom-packages-purge purge? purge? purge? purge? purge?)
				  (if
				      (doom-profile-generate)
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
					(run-hooks 'doom-after-sync-hook)))
				  (if
				      (or rebuild?
					  (not
					   (file-exists-p doom-cli-sync-info-file)))
				      (progn
					(let
					    ((temp-file doom-cli-sync-info-file)
					     (temp-buffer
					      (generate-new-buffer " *temp file*" t)))
					  (unwind-protect
					      (prog1
						  (save-current-buffer
						    (set-buffer temp-buffer)
						    (prin1
						     (cons emacs-version
							   (system-name))
						     (current-buffer)))
						(save-current-buffer
						  (set-buffer temp-buffer)
						  (write-region nil nil temp-file nil 0)))
					    (and
					     (buffer-name temp-buffer)
					     (kill-buffer temp-buffer))))))
				  t))
			    (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
		   ((context . #s(doom-cli-context
				  (26159 55730 696713 538000)
				  83351 0
				  (118 . 16)
				  nil nil "doom" nil nil
				  ("doom" "profiles" "sync")
				  nil
				  ("sync" "-e")
				  (("--reload" . "--reload")
				   ("-B")
				   ("--rebuild")
				   ("-b")
				   ("--jobs")
				   ("-j")
				   ("--gc")
				   ("-U")
				   ("-u")
				   ("-e" . "-e")
				   ("--eval")
				   ("-E")
				   ("--strict-load")
				   ("--load")
				   ("-L")
				   ("--color")
				   ("--benchmark")
				   ("--profile")
				   ("--pager")
				   ("--emacsdir")
				   ("--doomdir")
				   ("--verbose")
				   ("-v")
				   ("--debug")
				   ("-D")
				   ("--force")
				   ("-!"))
				  ((t)
				   (("doom" "profiles" "sync")
				    "--reload")
				   (("doom" "profiles")
				    "sync" "--reload")
				   (("doom")
				    "profiles" "sync" "--reload"))
				  #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
		    (nobuild?)
		    (rebuild?)
		    (jobs)
		    (purge?)
		    (noupdate?)
		    (update?)
		    (noenvvar? . "-e")))
 ((cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (bindings
   (context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e"))))

;;;; 38
((let
     ((cli x16)
      (bindings x17))
   (doom-cli-execute cli bindings))
 ((context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))
  (x15 #s(doom-cli
	  ("doom" "sync")
	  nil
	  (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	   ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	   ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	  nil nil
	  (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			      ("-e")
			      nil nil)
	     #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				("-u")
				nil nil)
	     #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				("-U")
				nil nil)
	     #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				("--gc")
				nil nil)
	     #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				("-j" "--jobs")
				(num)
				nil)
	     #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				("-b" "--rebuild")
				nil nil)
	     #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				("-B")
				nil nil))
	  ((&context context))
	  (:benchmark t :prefix
		      (doom)
		      :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	  (closure
	      (t)
	      (cli alist)
	    (let
		((noenvvar?
		  (cdr
		   (assq 'noenvvar? alist)))
		 (update?
		  (cdr
		   (assq 'update? alist)))
		 (noupdate?
		  (cdr
		   (assq 'noupdate? alist)))
		 (purge?
		  (cdr
		   (assq 'purge? alist)))
		 (jobs
		  (cdr
		   (assq 'jobs alist)))
		 (rebuild?
		  (cdr
		   (assq 'rebuild? alist)))
		 (nobuild?
		  (cdr
		   (assq 'nobuild? alist)))
		 (context
		  (cdr
		   (assq 'context alist))))
	      (if
		  (doom-profiles-bootloadable-p)
		  (progn
		    (call!
		     '(profiles sync "--reload"))))
	      (if jobs
		  (progn
		    (setq native-comp-async-jobs-number
			  (truncate jobs))))
	      (run-hooks 'doom-before-sync-hook)
	      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	      (doom-print
	       (doom-print--format
		(doom-print--class 'item "Using Emacs %s @ %s")
		emacs-version
		(doom-print--class 'path invocation-directory invocation-name)))
	      (doom-print
	       (doom-print--format
		(doom-print--class 'start "Synchronizing %S profile...")
		(or
		 (car doom-profile)
		 "default")))
	      (unwind-protect
		  (progn
		    (let
			((doom-print-level
			  (or nil doom-print-level))
			 (doom-print-indent
			  (+
			   (if t
			       (or nil doom-print-indent-increment)
			     0)
			   doom-print-indent)))
		      (let
			  ((x0
			    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			   (to-rebuild nil))
			(progn
			  (ignore
			   (consp x0))
			  (let*
			      ((x53
				(car-safe x0))
			       (x54
				(cdr-safe x0)))
			    (let
				((old-version x53)
				 (old-host x54))
			      (progn
				(if
				    (and old-version
					 (not
					  (equal old-version emacs-version)))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					old-version emacs-version))
				      (setq to-rebuild t)))
				(if
				    (and old-host
					 (not
					  (equal old-host
						 (system-name))))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Your system has changed since last sync")))
				      (setq to-rebuild t)))
				(if
				    (and to-rebuild
					 (not
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of context)
						 cl-struct-doom-cli-context-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli-context context)))
					    (aref context 6))))
				    (progn
				      (cond
				       (nobuild?
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				       ((doom-cli-context-get context 'upgrading)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages will be rebuilt")))
					(setq rebuild? t))
				       ((y-or-n-p
					 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					(setq rebuild? t))
				       ((exit! 0))))))))))
		      (if
			  (and
			   (not noenvvar?)
			   (file-exists-p doom-env-file))
			  (progn
			    (call!
			     '(env))))
		      (doom-packages-ensure rebuild?)
		      (if noupdate? nil
			(doom-packages-update
			 (not update?)))
		      (doom-packages-purge purge? purge? purge? purge? purge?)
		      (if
			  (doom-profile-generate)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			    (run-hooks 'doom-after-sync-hook)))
		      (if
			  (or rebuild?
			      (not
			       (file-exists-p doom-cli-sync-info-file)))
			  (progn
			    (let
				((temp-file doom-cli-sync-info-file)
				 (temp-buffer
				  (generate-new-buffer " *temp file*" t)))
			      (unwind-protect
				  (prog1
				      (save-current-buffer
					(set-buffer temp-buffer)
					(prin1
					 (cons emacs-version
					       (system-name))
					 (current-buffer)))
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (write-region nil nil temp-file nil 0)))
				(and
				 (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))
		      t))
		(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
       (context . #s(doom-cli-context
		     (26159 55730 696713 538000)
		     83351 0
		     (118 . 16)
		     nil nil "doom" nil nil
		     ("doom" "profiles" "sync")
		     nil
		     ("sync" "-e")
		     (("--reload" . "--reload")
		      ("-B")
		      ("--rebuild")
		      ("-b")
		      ("--jobs")
		      ("-j")
		      ("--gc")
		      ("-U")
		      ("-u")
		      ("-e" . "-e")
		      ("--eval")
		      ("-E")
		      ("--strict-load")
		      ("--load")
		      ("-L")
		      ("--color")
		      ("--benchmark")
		      ("--profile")
		      ("--pager")
		      ("--emacsdir")
		      ("--doomdir")
		      ("--verbose")
		      ("-v")
		      ("--debug")
		      ("-D")
		      ("--force")
		      ("-!"))
		     ((t)
		      (("doom" "profiles" "sync")
		       "--reload")
		      (("doom" "profiles")
		       "sync" "--reload")
		      (("doom")
		       "profiles" "sync" "--reload"))
		     #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
       (nobuild?)
       (rebuild?)
       (jobs)
       (purge?)
       (noupdate?)
       (update?)
       (noenvvar? . "-e"))
  (x16 . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (x17
   (context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e"))
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (bindings
   (context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e"))))

;;;; 39
((let*
     ((x16
       (car-safe x15))
      (x17
       (cdr-safe x15)))
   (let
       ((cli x16)
	(bindings x17))
     (doom-cli-execute cli bindings)))
 ((context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))
  (x15 #s(doom-cli
	  ("doom" "sync")
	  nil
	  (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	   ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	   ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	  nil nil
	  (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			      ("-e")
			      nil nil)
	     #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				("-u")
				nil nil)
	     #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				("-U")
				nil nil)
	     #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				("--gc")
				nil nil)
	     #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				("-j" "--jobs")
				(num)
				nil)
	     #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				("-b" "--rebuild")
				nil nil)
	     #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				("-B")
				nil nil))
	  ((&context context))
	  (:benchmark t :prefix
		      (doom)
		      :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	  (closure
	      (t)
	      (cli alist)
	    (let
		((noenvvar?
		  (cdr
		   (assq 'noenvvar? alist)))
		 (update?
		  (cdr
		   (assq 'update? alist)))
		 (noupdate?
		  (cdr
		   (assq 'noupdate? alist)))
		 (purge?
		  (cdr
		   (assq 'purge? alist)))
		 (jobs
		  (cdr
		   (assq 'jobs alist)))
		 (rebuild?
		  (cdr
		   (assq 'rebuild? alist)))
		 (nobuild?
		  (cdr
		   (assq 'nobuild? alist)))
		 (context
		  (cdr
		   (assq 'context alist))))
	      (if
		  (doom-profiles-bootloadable-p)
		  (progn
		    (call!
		     '(profiles sync "--reload"))))
	      (if jobs
		  (progn
		    (setq native-comp-async-jobs-number
			  (truncate jobs))))
	      (run-hooks 'doom-before-sync-hook)
	      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	      (doom-print
	       (doom-print--format
		(doom-print--class 'item "Using Emacs %s @ %s")
		emacs-version
		(doom-print--class 'path invocation-directory invocation-name)))
	      (doom-print
	       (doom-print--format
		(doom-print--class 'start "Synchronizing %S profile...")
		(or
		 (car doom-profile)
		 "default")))
	      (unwind-protect
		  (progn
		    (let
			((doom-print-level
			  (or nil doom-print-level))
			 (doom-print-indent
			  (+
			   (if t
			       (or nil doom-print-indent-increment)
			     0)
			   doom-print-indent)))
		      (let
			  ((x0
			    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			   (to-rebuild nil))
			(progn
			  (ignore
			   (consp x0))
			  (let*
			      ((x53
				(car-safe x0))
			       (x54
				(cdr-safe x0)))
			    (let
				((old-version x53)
				 (old-host x54))
			      (progn
				(if
				    (and old-version
					 (not
					  (equal old-version emacs-version)))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					old-version emacs-version))
				      (setq to-rebuild t)))
				(if
				    (and old-host
					 (not
					  (equal old-host
						 (system-name))))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Your system has changed since last sync")))
				      (setq to-rebuild t)))
				(if
				    (and to-rebuild
					 (not
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of context)
						 cl-struct-doom-cli-context-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli-context context)))
					    (aref context 6))))
				    (progn
				      (cond
				       (nobuild?
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				       ((doom-cli-context-get context 'upgrading)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages will be rebuilt")))
					(setq rebuild? t))
				       ((y-or-n-p
					 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					(setq rebuild? t))
				       ((exit! 0))))))))))
		      (if
			  (and
			   (not noenvvar?)
			   (file-exists-p doom-env-file))
			  (progn
			    (call!
			     '(env))))
		      (doom-packages-ensure rebuild?)
		      (if noupdate? nil
			(doom-packages-update
			 (not update?)))
		      (doom-packages-purge purge? purge? purge? purge? purge?)
		      (if
			  (doom-profile-generate)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			    (run-hooks 'doom-after-sync-hook)))
		      (if
			  (or rebuild?
			      (not
			       (file-exists-p doom-cli-sync-info-file)))
			  (progn
			    (let
				((temp-file doom-cli-sync-info-file)
				 (temp-buffer
				  (generate-new-buffer " *temp file*" t)))
			      (unwind-protect
				  (prog1
				      (save-current-buffer
					(set-buffer temp-buffer)
					(prin1
					 (cons emacs-version
					       (system-name))
					 (current-buffer)))
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (write-region nil nil temp-file nil 0)))
				(and
				 (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))
		      t))
		(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
       (context . #s(doom-cli-context
		     (26159 55730 696713 538000)
		     83351 0
		     (118 . 16)
		     nil nil "doom" nil nil
		     ("doom" "profiles" "sync")
		     nil
		     ("sync" "-e")
		     (("--reload" . "--reload")
		      ("-B")
		      ("--rebuild")
		      ("-b")
		      ("--jobs")
		      ("-j")
		      ("--gc")
		      ("-U")
		      ("-u")
		      ("-e" . "-e")
		      ("--eval")
		      ("-E")
		      ("--strict-load")
		      ("--load")
		      ("-L")
		      ("--color")
		      ("--benchmark")
		      ("--profile")
		      ("--pager")
		      ("--emacsdir")
		      ("--doomdir")
		      ("--verbose")
		      ("-v")
		      ("--debug")
		      ("-D")
		      ("--force")
		      ("-!"))
		     ((t)
		      (("doom" "profiles" "sync")
		       "--reload")
		      (("doom" "profiles")
		       "sync" "--reload")
		      (("doom")
		       "profiles" "sync" "--reload"))
		     #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
       (nobuild?)
       (rebuild?)
       (jobs)
       (purge?)
       (noupdate?)
       (update?)
       (noenvvar? . "-e"))
  (x16 . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (x17
   (context . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
   (nobuild?)
   (rebuild?)
   (jobs)
   (purge?)
   (noupdate?)
   (update?)
   (noenvvar? . "-e"))))

;;;; 40
((progn
   (ignore
    (consp x15))
   (let*
       ((x16
	 (car-safe x15))
	(x17
	 (cdr-safe x15)))
     (let
	 ((cli x16)
	  (bindings x17))
       (doom-cli-execute cli bindings))))
 nil)

;;;; 41
((let
     ((x15
       (car tail)))
   (progn
     (ignore
      (consp x15))
     (let*
	 ((x16
	   (car-safe x15))
	  (x17
	   (cdr-safe x15)))
       (let
	   ((cli x16)
	    (bindings x17))
	 (doom-cli-execute cli bindings))))
   (setq tail
	 (cdr tail)))
 ((context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))
  (x15 #s(doom-cli
	  ("doom" "sync")
	  nil
	  (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	   ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	   ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	  nil nil
	  (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			      ("-e")
			      nil nil)
	     #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				("-u")
				nil nil)
	     #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				("-U")
				nil nil)
	     #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				("--gc")
				nil nil)
	     #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				("-j" "--jobs")
				(num)
				nil)
	     #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				("-b" "--rebuild")
				nil nil)
	     #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				("-B")
				nil nil))
	  ((&context context))
	  (:benchmark t :prefix
		      (doom)
		      :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	  (closure
	      (t)
	      (cli alist)
	    (let
		((noenvvar?
		  (cdr
		   (assq 'noenvvar? alist)))
		 (update?
		  (cdr
		   (assq 'update? alist)))
		 (noupdate?
		  (cdr
		   (assq 'noupdate? alist)))
		 (purge?
		  (cdr
		   (assq 'purge? alist)))
		 (jobs
		  (cdr
		   (assq 'jobs alist)))
		 (rebuild?
		  (cdr
		   (assq 'rebuild? alist)))
		 (nobuild?
		  (cdr
		   (assq 'nobuild? alist)))
		 (context
		  (cdr
		   (assq 'context alist))))
	      (if
		  (doom-profiles-bootloadable-p)
		  (progn
		    (call!
		     '(profiles sync "--reload"))))
	      (if jobs
		  (progn
		    (setq native-comp-async-jobs-number
			  (truncate jobs))))
	      (run-hooks 'doom-before-sync-hook)
	      (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	      (doom-print
	       (doom-print--format
		(doom-print--class 'item "Using Emacs %s @ %s")
		emacs-version
		(doom-print--class 'path invocation-directory invocation-name)))
	      (doom-print
	       (doom-print--format
		(doom-print--class 'start "Synchronizing %S profile...")
		(or
		 (car doom-profile)
		 "default")))
	      (unwind-protect
		  (progn
		    (let
			((doom-print-level
			  (or nil doom-print-level))
			 (doom-print-indent
			  (+
			   (if t
			       (or nil doom-print-indent-increment)
			     0)
			   doom-print-indent)))
		      (let
			  ((x0
			    (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			   (to-rebuild nil))
			(progn
			  (ignore
			   (consp x0))
			  (let*
			      ((x53
				(car-safe x0))
			       (x54
				(cdr-safe x0)))
			    (let
				((old-version x53)
				 (old-host x54))
			      (progn
				(if
				    (and old-version
					 (not
					  (equal old-version emacs-version)))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					old-version emacs-version))
				      (setq to-rebuild t)))
				(if
				    (and old-host
					 (not
					  (equal old-host
						 (system-name))))
				    (progn
				      (doom-print
				       (doom-print--format
					(doom-print--class 'warn "Your system has changed since last sync")))
				      (setq to-rebuild t)))
				(if
				    (and to-rebuild
					 (not
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of context)
						 cl-struct-doom-cli-context-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli-context context)))
					    (aref context 6))))
				    (progn
				      (cond
				       (nobuild?
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				       ((doom-cli-context-get context 'upgrading)
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Packages will be rebuilt")))
					(setq rebuild? t))
				       ((y-or-n-p
					 (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					(setq rebuild? t))
				       ((exit! 0))))))))))
		      (if
			  (and
			   (not noenvvar?)
			   (file-exists-p doom-env-file))
			  (progn
			    (call!
			     '(env))))
		      (doom-packages-ensure rebuild?)
		      (if noupdate? nil
			(doom-packages-update
			 (not update?)))
		      (doom-packages-purge purge? purge? purge? purge? purge?)
		      (if
			  (doom-profile-generate)
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			    (run-hooks 'doom-after-sync-hook)))
		      (if
			  (or rebuild?
			      (not
			       (file-exists-p doom-cli-sync-info-file)))
			  (progn
			    (let
				((temp-file doom-cli-sync-info-file)
				 (temp-buffer
				  (generate-new-buffer " *temp file*" t)))
			      (unwind-protect
				  (prog1
				      (save-current-buffer
					(set-buffer temp-buffer)
					(prin1
					 (cons emacs-version
					       (system-name))
					 (current-buffer)))
				    (save-current-buffer
				      (set-buffer temp-buffer)
				      (write-region nil nil temp-file nil 0)))
				(and
				 (buffer-name temp-buffer)
				 (kill-buffer temp-buffer))))))
		      t))
		(remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
       (context . #s(doom-cli-context
		     (26159 55730 696713 538000)
		     83351 0
		     (118 . 16)
		     nil nil "doom" nil nil
		     ("doom" "profiles" "sync")
		     nil
		     ("sync" "-e")
		     (("--reload" . "--reload")
		      ("-B")
		      ("--rebuild")
		      ("-b")
		      ("--jobs")
		      ("-j")
		      ("--gc")
		      ("-U")
		      ("-u")
		      ("-e" . "-e")
		      ("--eval")
		      ("-E")
		      ("--strict-load")
		      ("--load")
		      ("-L")
		      ("--color")
		      ("--benchmark")
		      ("--profile")
		      ("--pager")
		      ("--emacsdir")
		      ("--doomdir")
		      ("--verbose")
		      ("-v")
		      ("--debug")
		      ("-D")
		      ("--force")
		      ("-!"))
		     ((t)
		      (("doom" "profiles" "sync")
		       "--reload")
		      (("doom" "profiles")
		       "sync" "--reload")
		      (("doom")
		       "profiles" "sync" "--reload"))
		     #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
       (nobuild?)
       (rebuild?)
       (jobs)
       (purge?)
       (noupdate?)
       (update?)
       (noenvvar? . "-e"))))

;;;; 42
((while tail
   (let
       ((x15
	 (car tail)))
     (progn
       (ignore
	(consp x15))
       (let*
	   ((x16
	     (car-safe x15))
	    (x17
	     (cdr-safe x15)))
	 (let
	     ((cli x16)
	      (bindings x17))
	   (doom-cli-execute cli bindings))))
     (setq tail
	   (cdr tail))))
 nil)

;;;; 43
((let
     ((tail
       (nreverse runners)))
   (while tail
     (let
	 ((x15
	   (car tail)))
       (progn
	 (ignore
	  (consp x15))
	 (let*
	     ((x16
	       (car-safe x15))
	      (x17
	       (cdr-safe x15)))
	   (let
	       ((cli x16)
		(bindings x17))
	     (doom-cli-execute cli bindings))))
       (setq tail
	     (cdr tail)))))
 ((context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))
  (tail
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))))

;;;; 44
((let
     ((seen
       '(t))
      runners)
   (let
       ((tail
	 (doom-cli-find command
			(progn
			  (or
			   (progn
			     (and
			      (memq
			       (type-of cli)
			       cl-struct-doom-cli-tags)
			      t))
			   (signal 'wrong-type-argument
				   (list 'doom-cli cli)))
			  (aref cli 2)))))
     (while tail
       (let
	   ((cli
	     (car tail)))
	 (setq runners
	       (cons
		(cons
		 (doom-cli-get cli)
		 (doom-cli--bindings cli context seen))
		runners))
	 (setq tail
	       (cdr tail)))))
   (let
       ((tail
	 (nreverse runners)))
     (while tail
       (let
	   ((x15
	     (car tail)))
	 (progn
	   (ignore
	    (consp x15))
	   (let*
	       ((x16
		 (car-safe x15))
		(x17
		 (cdr-safe x15)))
	     (let
		 ((cli x16)
		  (bindings x17))
	       (doom-cli-execute cli bindings))))
	 (setq tail
	       (cdr tail)))))
   context)
 ((context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "sync")
       nil
       (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
       nil nil
       (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
			   ("-e")
			   nil nil)
	  #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
			     ("-u")
			     nil nil)
	  #s(doom-cli-option noupdate? "Don't update any packages" nil nil
			     ("-U")
			     nil nil)
	  #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
			     ("--gc")
			     nil nil)
	  #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
			     ("-j" "--jobs")
			     (num)
			     nil)
	  #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
			     ("-b" "--rebuild")
			     nil nil)
	  #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
			     ("-B")
			     nil nil))
       ((&context context))
       (:benchmark t :prefix
		   (doom)
		   :group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
       (closure
	   (t)
	   (cli alist)
	 (let
	     ((noenvvar?
	       (cdr
		(assq 'noenvvar? alist)))
	      (update?
	       (cdr
		(assq 'update? alist)))
	      (noupdate?
	       (cdr
		(assq 'noupdate? alist)))
	      (purge?
	       (cdr
		(assq 'purge? alist)))
	      (jobs
	       (cdr
		(assq 'jobs alist)))
	      (rebuild?
	       (cdr
		(assq 'rebuild? alist)))
	      (nobuild?
	       (cdr
		(assq 'nobuild? alist)))
	      (context
	       (cdr
		(assq 'context alist))))
	   (if
	       (doom-profiles-bootloadable-p)
	       (progn
		 (call!
		  '(profiles sync "--reload"))))
	   (if jobs
	       (progn
		 (setq native-comp-async-jobs-number
		       (truncate jobs))))
	   (run-hooks 'doom-before-sync-hook)
	   (add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'item "Using Emacs %s @ %s")
	     emacs-version
	     (doom-print--class 'path invocation-directory invocation-name)))
	   (doom-print
	    (doom-print--format
	     (doom-print--class 'start "Synchronizing %S profile...")
	     (or
	      (car doom-profile)
	      "default")))
	   (unwind-protect
	       (progn
		 (let
		     ((doom-print-level
		       (or nil doom-print-level))
		      (doom-print-indent
		       (+
			(if t
			    (or nil doom-print-indent-increment)
			  0)
			doom-print-indent)))
		   (let
		       ((x0
			 (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			(to-rebuild nil))
		     (progn
		       (ignore
			(consp x0))
		       (let*
			   ((x53
			     (car-safe x0))
			    (x54
			     (cdr-safe x0)))
			 (let
			     ((old-version x53)
			      (old-host x54))
			   (progn
			     (if
				 (and old-version
				      (not
				       (equal old-version emacs-version)))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
				     old-version emacs-version))
				   (setq to-rebuild t)))
			     (if
				 (and old-host
				      (not
				       (equal old-host
					      (system-name))))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'warn "Your system has changed since last sync")))
				   (setq to-rebuild t)))
			     (if
				 (and to-rebuild
				      (not
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of context)
					      cl-struct-doom-cli-context-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli-context context)))
					 (aref context 6))))
				 (progn
				   (cond
				    (nobuild?
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
				    ((doom-cli-context-get context 'upgrading)
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'warn "Packages will be rebuilt")))
				     (setq rebuild? t))
				    ((y-or-n-p
				      (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
				     (setq rebuild? t))
				    ((exit! 0))))))))))
		   (if
		       (and
			(not noenvvar?)
			(file-exists-p doom-env-file))
		       (progn
			 (call!
			  '(env))))
		   (doom-packages-ensure rebuild?)
		   (if noupdate? nil
		     (doom-packages-update
		      (not update?)))
		   (doom-packages-purge purge? purge? purge? purge? purge?)
		   (if
		       (doom-profile-generate)
		       (progn
			 (doom-print
			  (doom-print--format
			   (doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			 (run-hooks 'doom-after-sync-hook)))
		   (if
		       (or rebuild?
			   (not
			    (file-exists-p doom-cli-sync-info-file)))
		       (progn
			 (let
			     ((temp-file doom-cli-sync-info-file)
			      (temp-buffer
			       (generate-new-buffer " *temp file*" t)))
			   (unwind-protect
			       (prog1
				   (save-current-buffer
				     (set-buffer temp-buffer)
				     (prin1
				      (cons emacs-version
					    (system-name))
				      (current-buffer)))
				 (save-current-buffer
				   (set-buffer temp-buffer)
				   (write-region nil nil temp-file nil 0)))
			     (and
			      (buffer-name temp-buffer)
			      (kill-buffer temp-buffer))))))
		   t))
	     (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)))))
      (context . #s(doom-cli-context
		    (26159 55730 696713 538000)
		    83351 0
		    (118 . 16)
		    nil nil "doom" nil nil
		    ("doom" "profiles" "sync")
		    nil
		    ("sync" "-e")
		    (("--reload" . "--reload")
		     ("-B")
		     ("--rebuild")
		     ("-b")
		     ("--jobs")
		     ("-j")
		     ("--gc")
		     ("-U")
		     ("-u")
		     ("-e" . "-e")
		     ("--eval")
		     ("-E")
		     ("--strict-load")
		     ("--load")
		     ("-L")
		     ("--color")
		     ("--benchmark")
		     ("--profile")
		     ("--pager")
		     ("--emacsdir")
		     ("--doomdir")
		     ("--verbose")
		     ("-v")
		     ("--debug")
		     ("-D")
		     ("--force")
		     ("-!"))
		    ((t)
		     (("doom" "profiles" "sync")
		      "--reload")
		     (("doom" "profiles")
		      "sync" "--reload")
		     (("doom")
		      "profiles" "sync" "--reload"))
		    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
      (nobuild?)
      (rebuild?)
      (jobs)
      (purge?)
      (noupdate?)
      (update?)
      (noenvvar? . "-e")))))

;;;; 45
((cond
  ((null
    (or command
	(doom-cli-get
	 (list prefix)
	 t)))
   (signal 'doom-cli-invalid-prefix-error
	   (list prefix)))
  ((progn
     (or
      (progn
	(and
	 (memq
	  (type-of context)
	  cl-struct-doom-cli-context-tags)
	 t))
      (signal 'wrong-type-argument
	      (list 'doom-cli-context context)))
     (aref context 8))
   (let*
       ((val
	 (progn
	   (or
	    (progn
	      (and
	       (memq
		(type-of context)
		cl-struct-doom-cli-context-tags)
	       t))
	    (signal 'wrong-type-argument
		    (list 'doom-cli-context context)))
	   (aref context 8))))
     (cond
      ((equal val '"--version")
       (let nil
	 (doom-cli-call
	  (cons ':version
		(cdr command))
	  context)
	 t))
      ((member val
	       '("--help" "-?"))
       (let nil
	 (doom-cli-call
	  (cons ':help
		(cdr command))
	  context)
	 t))
      (t
       (let nil
	 (error "In meta mode with no destination!"))))))
  ((not
    (and cli
	 (let
	     ((cl-x
	       (doom-cli-get cli)))
	   (progn
	     (or
	      (progn
		(and
		 (memq
		  (type-of cl-x)
		  cl-struct-doom-cli-tags)
		 t))
	      (signal 'wrong-type-argument
		      (list 'doom-cli cl-x)))
	     (aref cl-x 9)))))
   (signal 'doom-cli-command-not-found-error
	   (append command
		   (alist-get t
			      (progn
				(or
				 (progn
				   (and
				    (memq
				     (type-of context)
				     cl-struct-doom-cli-context-tags)
				    t))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context context)))
				(aref context 14))))))
  ((let
       ((seen
	 '(t))
	runners)
     (let
	 ((tail
	   (doom-cli-find command
			  (progn
			    (or
			     (progn
			       (and
				(memq
				 (type-of cli)
				 cl-struct-doom-cli-tags)
				t))
			     (signal 'wrong-type-argument
				     (list 'doom-cli cli)))
			    (aref cli 2)))))
       (while tail
	 (let
	     ((cli
	       (car tail)))
	   (setq runners
		 (cons
		  (cons
		   (doom-cli-get cli)
		   (doom-cli--bindings cli context seen))
		  runners))
	   (setq tail
		 (cdr tail)))))
     (let
	 ((tail
	   (nreverse runners)))
       (while tail
	 (let
	     ((x15
	       (car tail)))
	   (progn
	     (ignore
	      (consp x15))
	     (let*
		 ((x16
		   (car-safe x15))
		  (x17
		   (cdr-safe x15)))
	       (let
		   ((cli x16)
		    (bindings x17))
		 (doom-cli-execute cli bindings))))
	   (setq tail
		 (cdr tail)))))
     context)))
 nil)

;;;; 46
((let*
     ((command
       (progn
	 (or
	  (progn
	    (and
	     (memq
	      (type-of context)
	      cl-struct-doom-cli-context-tags)
	     t))
	  (signal 'wrong-type-argument
		  (list 'doom-cli-context context)))
	 (aref context 10)))
      (cli
       (doom-cli-get command t))
      (prefix
       (progn
	 (or
	  (progn
	    (and
	     (memq
	      (type-of context)
	      cl-struct-doom-cli-context-tags)
	     t))
	  (signal 'wrong-type-argument
		  (list 'doom-cli-context context)))
	 (aref context 7))))
   (if doom-inhibit-log nil
     (doom--log "context-execute: %s"
		(mapconcat #'doom-cli-command-string
			   (delq nil
				 (list
				  (car
				   (progn
				     (or
				      (progn
					(and
					 (memq
					  (type-of context)
					  cl-struct-doom-cli-context-tags)
					 t))
				      (signal 'wrong-type-argument
					      (list 'doom-cli-context context)))
				     (aref context 11)))
				  command))
			   " -> ")))
   (cond
    ((null
      (or command
	  (doom-cli-get
	   (list prefix)
	   t)))
     (signal 'doom-cli-invalid-prefix-error
	     (list prefix)))
    ((progn
       (or
	(progn
	  (and
	   (memq
	    (type-of context)
	    cl-struct-doom-cli-context-tags)
	   t))
	(signal 'wrong-type-argument
		(list 'doom-cli-context context)))
       (aref context 8))
     (let*
	 ((val
	   (progn
	     (or
	      (progn
		(and
		 (memq
		  (type-of context)
		  cl-struct-doom-cli-context-tags)
		 t))
	      (signal 'wrong-type-argument
		      (list 'doom-cli-context context)))
	     (aref context 8))))
       (cond
	((equal val '"--version")
	 (let nil
	   (doom-cli-call
	    (cons ':version
		  (cdr command))
	    context)
	   t))
	((member val
		 '("--help" "-?"))
	 (let nil
	   (doom-cli-call
	    (cons ':help
		  (cdr command))
	    context)
	   t))
	(t
	 (let nil
	   (error "In meta mode with no destination!"))))))
    ((not
      (and cli
	   (let
	       ((cl-x
		 (doom-cli-get cli)))
	     (progn
	       (or
		(progn
		  (and
		   (memq
		    (type-of cl-x)
		    cl-struct-doom-cli-tags)
		   t))
		(signal 'wrong-type-argument
			(list 'doom-cli cl-x)))
	       (aref cl-x 9)))))
     (signal 'doom-cli-command-not-found-error
	     (append command
		     (alist-get t
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of context)
				       cl-struct-doom-cli-context-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli-context context)))
				  (aref context 14))))))
    ((let
	 ((seen
	   '(t))
	  runners)
       (let
	   ((tail
	     (doom-cli-find command
			    (progn
			      (or
			       (progn
				 (and
				  (memq
				   (type-of cli)
				   cl-struct-doom-cli-tags)
				  t))
			       (signal 'wrong-type-argument
				       (list 'doom-cli cli)))
			      (aref cli 2)))))
	 (while tail
	   (let
	       ((cli
		 (car tail)))
	     (setq runners
		   (cons
		    (cons
		     (doom-cli-get cli)
		     (doom-cli--bindings cli context seen))
		    runners))
	     (setq tail
		   (cdr tail)))))
       (let
	   ((tail
	     (nreverse runners)))
	 (while tail
	   (let
	       ((x15
		 (car tail)))
	     (progn
	       (ignore
		(consp x15))
	       (let*
		   ((x16
		     (car-safe x15))
		    (x17
		     (cdr-safe x15)))
		 (let
		     ((cli x16)
		      (bindings x17))
		   (doom-cli-execute cli bindings))))
	     (setq tail
		   (cdr tail)))))
       context))))
 ((context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "sync")
  (cli . #s(doom-cli
	    ("doom" "sync")
	    nil
	    (("SUMMARY" . "Synchronize your config with Doom Emacs.")
	     ("MAIN" . "This is the equivalent of running autoremove, install, autoloads, then\nrecompile. Run this whenever you:\n\n  1. Modify your `doom!' block,\n  2. Add or remove `package!' blocks to your config,\n  3. Add or remove autoloaded functions in module autoloaded files,\n  4. Update Doom outside of Doom (e.g. with git),\n  5. Move your Doom config (either $EMACSDIR or $DOOMDIR) to a new location.\n  6. When you up (or down) grade Emacs itself.\n\nIt will ensure that unneeded packages are removed, all needed packages are\ninstalled, autoloads files are up-to-date and no byte-compiled files have gone\nstale.")
	     ("OPTIONS" . "-j, --jobs\n  Defaults to the maximum number of threads (or 1, if your CPU's threadcount\n  can't be determined)."))
	    nil nil
	    (#s(doom-cli-option noenvvar? "Don't regenerate the envvar file" nil nil
				("-e")
				nil nil)
	       #s(doom-cli-option update? "Update all installed packages after syncing" nil nil
				  ("-u")
				  nil nil)
	       #s(doom-cli-option noupdate? "Don't update any packages" nil nil
				  ("-U")
				  nil nil)
	       #s(doom-cli-option purge? "Purge orphaned package repos & regraft them" nil nil
				  ("--gc")
				  nil nil)
	       #s(doom-cli-option jobs "How many threads to use for native compilation" nil nil
				  ("-j" "--jobs")
				  (num)
				  nil)
	       #s(doom-cli-option rebuild? "Rebuild all installed packages, unconditionally" nil nil
				  ("-b" "--rebuild")
				  nil nil)
	       #s(doom-cli-option nobuild? "Don't rebuild packages when hostname or Emacs version has changed" nil nil
				  ("-B")
				  nil nil))
	    ((&context context))
	    (:benchmark t :prefix
			(doom)
			:group "Config Management" :docs "Commands for maintaining your Doom Emacs configuration." :hide nil)
	    (closure
		(t)
		(cli alist)
	      (let
		  ((noenvvar?
		    (cdr
		     (assq 'noenvvar? alist)))
		   (update?
		    (cdr
		     (assq 'update? alist)))
		   (noupdate?
		    (cdr
		     (assq 'noupdate? alist)))
		   (purge?
		    (cdr
		     (assq 'purge? alist)))
		   (jobs
		    (cdr
		     (assq 'jobs alist)))
		   (rebuild?
		    (cdr
		     (assq 'rebuild? alist)))
		   (nobuild?
		    (cdr
		     (assq 'nobuild? alist)))
		   (context
		    (cdr
		     (assq 'context alist))))
		(if
		    (doom-profiles-bootloadable-p)
		    (progn
		      (call!
		       '(profiles sync "--reload"))))
		(if jobs
		    (progn
		      (setq native-comp-async-jobs-number
			    (truncate jobs))))
		(run-hooks 'doom-before-sync-hook)
		(add-hook 'kill-emacs-hook #'doom-sync--abort-warning-h)
		(doom-print
		 (doom-print--format
		  (doom-print--class 'item "Using Emacs %s @ %s")
		  emacs-version
		  (doom-print--class 'path invocation-directory invocation-name)))
		(doom-print
		 (doom-print--format
		  (doom-print--class 'start "Synchronizing %S profile...")
		  (or
		   (car doom-profile)
		   "default")))
		(unwind-protect
		    (progn
		      (let
			  ((doom-print-level
			    (or nil doom-print-level))
			   (doom-print-indent
			    (+
			     (if t
				 (or nil doom-print-indent-increment)
			       0)
			     doom-print-indent)))
			(let
			    ((x0
			      (doom-file-read doom-cli-sync-info-file :by 'read :noerror t))
			     (to-rebuild nil))
			  (progn
			    (ignore
			     (consp x0))
			    (let*
				((x53
				  (car-safe x0))
				 (x54
				  (cdr-safe x0)))
			      (let
				  ((old-version x53)
				   (old-host x54))
				(progn
				  (if
				      (and old-version
					   (not
					    (equal old-version emacs-version)))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Emacs version has changed since last sync (from %s to %s)")
					  old-version emacs-version))
					(setq to-rebuild t)))
				  (if
				      (and old-host
					   (not
					    (equal old-host
						   (system-name))))
				      (progn
					(doom-print
					 (doom-print--format
					  (doom-print--class 'warn "Your system has changed since last sync")))
					(setq to-rebuild t)))
				  (if
				      (and to-rebuild
					   (not
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of context)
						   cl-struct-doom-cli-context-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-context context)))
					      (aref context 6))))
				      (progn
					(cond
					 (nobuild?
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages must be rebuilt, but -B has prevented it. Skipping..."))))
					 ((doom-cli-context-get context 'upgrading)
					  (doom-print
					   (doom-print--format
					    (doom-print--class 'warn "Packages will be rebuilt")))
					  (setq rebuild? t))
					 ((y-or-n-p
					   (doom-print--format "  %s" "Installed packages must be rebuilt. Do so now?"))
					  (setq rebuild? t))
					 ((exit! 0))))))))))
			(if
			    (and
			     (not noenvvar?)
			     (file-exists-p doom-env-file))
			    (progn
			      (call!
			       '(env))))
			(doom-packages-ensure rebuild?)
			(if noupdate? nil
			  (doom-packages-update
			   (not update?)))
			(doom-packages-purge purge? purge? purge? purge? purge?)
			(if
			    (doom-profile-generate)
			    (progn
			      (doom-print
			       (doom-print--format
				(doom-print--class 'item "Restart Emacs or use 'M-x doom/reload' for changes to take effect")))
			      (run-hooks 'doom-after-sync-hook)))
			(if
			    (or rebuild?
				(not
				 (file-exists-p doom-cli-sync-info-file)))
			    (progn
			      (let
				  ((temp-file doom-cli-sync-info-file)
				   (temp-buffer
				    (generate-new-buffer " *temp file*" t)))
				(unwind-protect
				    (prog1
					(save-current-buffer
					  (set-buffer temp-buffer)
					  (prin1
					   (cons emacs-version
						 (system-name))
					   (current-buffer)))
				      (save-current-buffer
					(set-buffer temp-buffer)
					(write-region nil nil temp-file nil 0)))
				  (and
				   (buffer-name temp-buffer)
				   (kill-buffer temp-buffer))))))
			t))
		  (remove-hook 'kill-emacs-hook #'doom-sync--abort-warning-h))))))
  (prefix . "doom")))

;;;; 47
((doom-cli-context-execute #s(doom-cli-context
			      (26159 55730 696713 538000)
			      83351 0
			      (118 . 16)
			      nil nil "doom" nil nil
			      ("doom" "profiles" "sync")
			      nil
			      ("sync" "-e")
			      (("--reload" . "--reload")
			       ("-B")
			       ("--rebuild")
			       ("-b")
			       ("--jobs")
			       ("-j")
			       ("--gc")
			       ("-U")
			       ("-u")
			       ("-e" . "-e")
			       ("--eval")
			       ("-E")
			       ("--strict-load")
			       ("--load")
			       ("-L")
			       ("--color")
			       ("--benchmark")
			       ("--profile")
			       ("--pager")
			       ("--emacsdir")
			       ("--doomdir")
			       ("--verbose")
			       ("-v")
			       ("--debug")
			       ("-D")
			       ("--force")
			       ("-!"))
			      ((t)
			       (("doom" "profiles" "sync")
				"--reload")
			       (("doom" "profiles")
				"sync" "--reload")
			       (("doom")
				"profiles" "sync" "--reload"))
			      #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
 ((context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 48
((let
     ((result
       (doom-cli-context-execute context)))
   (run-hook-with-args 'doom-cli-after-run-functions context result))
 nil)

;;;; 49
((let*
     ((args
       (cons
	(if
	    (getenv "__DOOMDUMP")
	    :dump prefix)
	args))
      (context
       (doom-cli-context-restore
	(getenv "__DOOMCONTEXT")
	context))
      (context
       (doom-cli-context-parse args context)))
   (run-hook-with-args 'doom-cli-before-run-functions context)
   (let
       ((result
	 (doom-cli-context-execute context)))
     (run-hook-with-args 'doom-cli-after-run-functions context result))
   0)
 ((prefix . "doom")
  (args
   ("sync" "-e"))
  (args "sync" "-e")
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26159 55730 696713 538000)
			    83351 0
			    (118 . 16)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync" "-e")
			    (("--reload" . "--reload")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e" . "-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26159 55730 696713 538000)
				83351 0
				(118 . 16)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync" "-e")
				(("--reload" . "--reload")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e" . "-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))
  (vnew closure
	((streams
	  (#[128 "\302\301\303\300\4\"\"\207"
		 [(0 2)
		  >= apply append]
		 6 "\n\n(fn &rest ARGS2)"]
	   . #<buffer  *doom-cli stdout*>)
	  (t . #<buffer  *doom-cli stderr*>))
	 (old . #<subr message>)
	 (level . debug))
	(message &rest args)
	(if message
	    (progn
	      (let
		  ((output
		    (apply #'doom-print--format message args)))
		(if
		    (<= doom-print--output-depth 1)
		    (doom-print output :level level :stream t)
		  (let
		      ((doom-print--output-depth
			(1- doom-print--output-depth)))
		    (funcall old "%s" output)))
		(let
		    ((tail streams))
		  (while tail
		    (let
			((stream
			  (car tail)))
		      (if
			  (or
			   (eq
			    (car stream)
			    t)
			   (funcall
			    (car stream)))
			  (progn
			    (doom-print output :stream
					(cdr stream))))
		      (setq tail
			    (cdr tail))))))
	      message)))
  (old . #<subr message>)
  (args "doom" "sync" "-e")
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 50
((condition-case e
     (let*
	 ((args
	   (cons
	    (if
		(getenv "__DOOMDUMP")
		:dump prefix)
	    args))
	  (context
	   (doom-cli-context-restore
	    (getenv "__DOOMCONTEXT")
	    context))
	  (context
	   (doom-cli-context-parse args context)))
       (run-hook-with-args 'doom-cli-before-run-functions context)
       (let
	   ((result
	     (doom-cli-context-execute context)))
	 (run-hook-with-args 'doom-cli-after-run-functions context result))
       0)
   (doom-cli-wrong-number-of-arguments-error
    (let*
	((val
	  (cdr e)))
      (progn
	(ignore
	 (consp val))
	(let*
	    ((x26
	      (car-safe val))
	     (x27
	      (cdr-safe val)))
	  (progn
	    (ignore
	     (consp x27))
	    (let*
		((x28
		  (car-safe x27))
		 (x29
		  (cdr-safe x27)))
	      (progn
		(ignore
		 (consp x29))
		(let*
		    ((x30
		      (car-safe x29))
		     (x31
		      (cdr-safe x29)))
		  (progn
		    (ignore
		     (consp x31))
		    (let*
			((x32
			  (car-safe x31))
			 (x33
			  (cdr-safe x31)))
		      (progn
			(ignore
			 (consp x33))
			(let*
			    ((x34
			      (car-safe x33))
			     (x35
			      (cdr-safe x33)))
			  (progn
			    (ignore
			     (null x35))
			    (let
				((command x26)
				 (flag x28)
				 (args x30)
				 (min x32)
				 (max x34))
			      (progn
				(doom-print
				 (doom-print--format
				  (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				  (or flag
				      (doom-cli-command-string
				       (if
					   (keywordp
					    (car command))
					   command
					 (cdr command))))
				  (if
				      (or
				       (= min max)
				       (= max most-positive-fixnum))
				      min
				    (format "%d-%d" min max))
				  (if
				      (or
				       (= min 0)
				       (> min 1))
				      "s" "")
				  (length args)))
				(doom-cli-call
				 (cons ':help
				       (cons "--synopsis"
					     (cons "--postamble"
						   (cdr
						    (doom-cli--command context)))))
				 context e)))))))))))))))
    5)
   (doom-cli-unrecognized-option-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: unknown option %s")
      (car
       (cdr e))))
    (doom-cli-call
     (cons ':help
	   (cons "--synopsis"
		 (cons "--postamble"
		       (cdr
			(doom-cli--command context)))))
     context e)
    5)
   (doom-cli-invalid-option-error
    (let*
	((val
	  (cdr e)))
      (progn
	(ignore
	 (consp val))
	(let*
	    ((x36
	      (car-safe val))
	     (x37
	      (cdr-safe val)))
	  (progn
	    (ignore
	     (consp x37))
	    (let*
		((x38
		  (car-safe x37))
		 (x39
		  (cdr-safe x37)))
	      (progn
		(ignore
		 (consp x39))
		(let*
		    ((x40
		      (car-safe x39))
		     (x41
		      (cdr-safe x39)))
		  (progn
		    (ignore
		     (consp x41))
		    (let*
			((x42
			  (car-safe x41))
			 (x43
			  (cdr-safe x41)))
		      (progn
			(ignore
			 (null x43))
			(let
			    ((types x36)
			     (option x38)
			     (value x40)
			     (errors x42))
			  (progn
			    (doom-print
			     (doom-print--format
			      (doom-print--style 'red "Error: %s received invalid value %S")
			      (string-join
			       (progn
				 (or
				  (progn
				    (and
				     (memq
				      (type-of option)
				      cl-struct-doom-cli-option-tags)
				     t))
				  (signal 'wrong-type-argument
					  (list 'doom-cli-option option)))
				 (aref option 5))
			       "/")
			      value))
			    (doom-print
			     (doom-print--format
			      (doom-print--style 'bold "\nValidation errors:")))
			    (let
				((tail errors))
			      (while tail
				(let
				    ((err
				      (car tail)))
				  (doom-print
				   (doom-print--format
				    (doom-print--class 'item "%s."
						       (doom-print--class 'fill err))))
				  (setq tail
					(cdr tail)))))))))))))))))
    (doom-cli-call
     (cons ':help
	   (cons "--postamble"
		 (cdr
		  (doom-cli--command context))))
     context e)
    5)
   (doom-cli-command-not-found-error
    (let*
	((command
	  (cdr e))
	 (cli
	  (doom-cli-get command)))
      (cond
       ((null cli)
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red "Error: unrecognized command '%s'")
	  (doom-cli-command-string
	   (or
	    (cdr command)
	    command))))
	(doom-cli-call
	 (cons ':help
	       (cons "--similar"
		     (cons "--postamble"
			   (cdr command))))
	 context e))
       ((null
	 (progn
	   (or
	    (progn
	      (and
	       (memq
		(type-of cli)
		cl-struct-doom-cli-tags)
	       t))
	    (signal 'wrong-type-argument
		    (list 'doom-cli cli)))
	   (aref cli 9)))
	(doom-print
	 (doom-print--format
	  (doom-print--style 'red "Error: a subcommand is required")))
	(doom-cli-call
	 (cons ':help
	       (cons "--subcommands"
		     (cons "--postamble"
			   (cdr command))))
	 context e))))
    4)
   (doom-cli-invalid-prefix-error
    (let
	((prefix
	  (car
	   (cdr e))))
      (doom-print
       (doom-print--format
	(doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	prefix))
      (let*
	  ((suggested
	    (and t
		 (let*
		     ((--cl-var-- t)
		      --cl-var--)
		   (catch '--cl-block---cl-finish----
		     (maphash
		      #'(lambda
			  (--cl-var-- cli)
			  (or
			   (if
			       (progn
				 (or
				  (progn
				    (and
				     (memq
				      (type-of cli)
				      cl-struct-doom-cli-tags)
				     t))
				  (signal 'wrong-type-argument
					  (list 'doom-cli cli)))
				 (aref cli 2))
			       t
			     (progn
			       (setq --cl-var--
				     (car
				      (progn
					(or
					 (progn
					   (and
					    (memq
					     (type-of cli)
					     cl-struct-doom-cli-tags)
					    t))
					 (signal 'wrong-type-argument
						 (list 'doom-cli cli)))
					(aref cli 1))))
			       (setq --cl-var-- nil)))
			   (throw '--cl-block---cl-finish---- nil)))
		      doom-cli--table))
		   --cl-var--))))
	(if suggested
	    (doom-print
	     (doom-print--format "Did you mean %S?" suggested))
	  (doom-print
	   (doom-print--format "There are no commands defined under %S." prefix)))))
    4)
   (user-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: %s")
      (car
       (cdr e))))
    (doom-print
     (doom-print--format "\nAborting..."))
    3))
 nil)

;;;; 51
((doom-cli--exit
  (condition-case e
      (let*
	  ((args
	    (cons
	     (if
		 (getenv "__DOOMDUMP")
		 :dump prefix)
	     args))
	   (context
	    (doom-cli-context-restore
	     (getenv "__DOOMCONTEXT")
	     context))
	   (context
	    (doom-cli-context-parse args context)))
	(run-hook-with-args 'doom-cli-before-run-functions context)
	(let
	    ((result
	      (doom-cli-context-execute context)))
	  (run-hook-with-args 'doom-cli-after-run-functions context result))
	0)
    (doom-cli-wrong-number-of-arguments-error
     (let*
	 ((val
	   (cdr e)))
       (progn
	 (ignore
	  (consp val))
	 (let*
	     ((x26
	       (car-safe val))
	      (x27
	       (cdr-safe val)))
	   (progn
	     (ignore
	      (consp x27))
	     (let*
		 ((x28
		   (car-safe x27))
		  (x29
		   (cdr-safe x27)))
	       (progn
		 (ignore
		  (consp x29))
		 (let*
		     ((x30
		       (car-safe x29))
		      (x31
		       (cdr-safe x29)))
		   (progn
		     (ignore
		      (consp x31))
		     (let*
			 ((x32
			   (car-safe x31))
			  (x33
			   (cdr-safe x31)))
		       (progn
			 (ignore
			  (consp x33))
			 (let*
			     ((x34
			       (car-safe x33))
			      (x35
			       (cdr-safe x33)))
			   (progn
			     (ignore
			      (null x35))
			     (let
				 ((command x26)
				  (flag x28)
				  (args x30)
				  (min x32)
				  (max x34))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				   (or flag
				       (doom-cli-command-string
					(if
					    (keywordp
					     (car command))
					    command
					  (cdr command))))
				   (if
				       (or
					(= min max)
					(= max most-positive-fixnum))
				       min
				     (format "%d-%d" min max))
				   (if
				       (or
					(= min 0)
					(> min 1))
				       "s" "")
				   (length args)))
				 (doom-cli-call
				  (cons ':help
					(cons "--synopsis"
					      (cons "--postamble"
						    (cdr
						     (doom-cli--command context)))))
				  context e)))))))))))))))
     5)
    (doom-cli-unrecognized-option-error
     (doom-print
      (doom-print--format
       (doom-print--style 'red "Error: unknown option %s")
       (car
	(cdr e))))
     (doom-cli-call
      (cons ':help
	    (cons "--synopsis"
		  (cons "--postamble"
			(cdr
			 (doom-cli--command context)))))
      context e)
     5)
    (doom-cli-invalid-option-error
     (let*
	 ((val
	   (cdr e)))
       (progn
	 (ignore
	  (consp val))
	 (let*
	     ((x36
	       (car-safe val))
	      (x37
	       (cdr-safe val)))
	   (progn
	     (ignore
	      (consp x37))
	     (let*
		 ((x38
		   (car-safe x37))
		  (x39
		   (cdr-safe x37)))
	       (progn
		 (ignore
		  (consp x39))
		 (let*
		     ((x40
		       (car-safe x39))
		      (x41
		       (cdr-safe x39)))
		   (progn
		     (ignore
		      (consp x41))
		     (let*
			 ((x42
			   (car-safe x41))
			  (x43
			   (cdr-safe x41)))
		       (progn
			 (ignore
			  (null x43))
			 (let
			     ((types x36)
			      (option x38)
			      (value x40)
			      (errors x42))
			   (progn
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: %s received invalid value %S")
			       (string-join
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of option)
				       cl-struct-doom-cli-option-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli-option option)))
				  (aref option 5))
				"/")
			       value))
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'bold "\nValidation errors:")))
			     (let
				 ((tail errors))
			       (while tail
				 (let
				     ((err
				       (car tail)))
				   (doom-print
				    (doom-print--format
				     (doom-print--class 'item "%s."
							(doom-print--class 'fill err))))
				   (setq tail
					 (cdr tail)))))))))))))))))
     (doom-cli-call
      (cons ':help
	    (cons "--postamble"
		  (cdr
		   (doom-cli--command context))))
      context e)
     5)
    (doom-cli-command-not-found-error
     (let*
	 ((command
	   (cdr e))
	  (cli
	   (doom-cli-get command)))
       (cond
	((null cli)
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: unrecognized command '%s'")
	   (doom-cli-command-string
	    (or
	     (cdr command)
	     command))))
	 (doom-cli-call
	  (cons ':help
		(cons "--similar"
		      (cons "--postamble"
			    (cdr command))))
	  context e))
	((null
	  (progn
	    (or
	     (progn
	       (and
		(memq
		 (type-of cli)
		 cl-struct-doom-cli-tags)
		t))
	     (signal 'wrong-type-argument
		     (list 'doom-cli cli)))
	    (aref cli 9)))
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: a subcommand is required")))
	 (doom-cli-call
	  (cons ':help
		(cons "--subcommands"
		      (cons "--postamble"
			    (cdr command))))
	  context e))))
     4)
    (doom-cli-invalid-prefix-error
     (let
	 ((prefix
	   (car
	    (cdr e))))
       (doom-print
	(doom-print--format
	 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	 prefix))
       (let*
	   ((suggested
	     (and t
		  (let*
		      ((--cl-var-- t)
		       --cl-var--)
		    (catch '--cl-block---cl-finish----
		      (maphash
		       #'(lambda
			   (--cl-var-- cli)
			   (or
			    (if
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of cli)
				       cl-struct-doom-cli-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli cli)))
				  (aref cli 2))
				t
			      (progn
				(setq --cl-var--
				      (car
				       (progn
					 (or
					  (progn
					    (and
					     (memq
					      (type-of cli)
					      cl-struct-doom-cli-tags)
					     t))
					  (signal 'wrong-type-argument
						  (list 'doom-cli cli)))
					 (aref cli 1))))
				(setq --cl-var-- nil)))
			    (throw '--cl-block---cl-finish---- nil)))
		       doom-cli--table))
		    --cl-var--))))
	 (if suggested
	     (doom-print
	      (doom-print--format "Did you mean %S?" suggested))
	   (doom-print
	    (doom-print--format "There are no commands defined under %S." prefix)))))
     4)
    (user-error
     (doom-print
      (doom-print--format
       (doom-print--style 'red "Error: %s")
       (car
	(cdr e))))
     (doom-print
      (doom-print--format "\nAborting..."))
     3))
  context)
 nil)

;;;; 52
((progn
   (if doom-inhibit-log nil
     (doom--log "run!: %s %s" prefix
		(combine-and-quote-strings args)))
   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
   (add-hook 'kill-emacs-hook write-logs-fn 95)
   (if
       (doom-cli-context-pipe-p context :out t)
       (progn
	 (setq doom-print-backend nil)))
   (if
       (doom-cli-context-pipe-p context :in)
       (progn
	 (save-current-buffer
	   (set-buffer
	    (progn
	      (or
	       (progn
		 (and
		  (memq
		   (type-of context)
		   cl-struct-doom-cli-context-tags)
		  t))
	       (signal 'wrong-type-argument
		       (list 'doom-cli-context context)))
	      (aref context 15)))
	   (while
	       (let*
		   ((in
		     (and t
			  (condition-case nil
			      (progn
				(read-from-minibuffer ""))
			    (error nil)))))
		 (if in
		     (insert in "\n")
		   (condition-case nil
		       (progn
			 (delete-char -1))
		     (error nil))))))))
   (doom-cli--exit
    (condition-case e
	(let*
	    ((args
	      (cons
	       (if
		   (getenv "__DOOMDUMP")
		   :dump prefix)
	       args))
	     (context
	      (doom-cli-context-restore
	       (getenv "__DOOMCONTEXT")
	       context))
	     (context
	      (doom-cli-context-parse args context)))
	  (run-hook-with-args 'doom-cli-before-run-functions context)
	  (let
	      ((result
		(doom-cli-context-execute context)))
	    (run-hook-with-args 'doom-cli-after-run-functions context result))
	  0)
      (doom-cli-wrong-number-of-arguments-error
       (let*
	   ((val
	     (cdr e)))
	 (progn
	   (ignore
	    (consp val))
	   (let*
	       ((x26
		 (car-safe val))
		(x27
		 (cdr-safe val)))
	     (progn
	       (ignore
		(consp x27))
	       (let*
		   ((x28
		     (car-safe x27))
		    (x29
		     (cdr-safe x27)))
		 (progn
		   (ignore
		    (consp x29))
		   (let*
		       ((x30
			 (car-safe x29))
			(x31
			 (cdr-safe x29)))
		     (progn
		       (ignore
			(consp x31))
		       (let*
			   ((x32
			     (car-safe x31))
			    (x33
			     (cdr-safe x31)))
			 (progn
			   (ignore
			    (consp x33))
			   (let*
			       ((x34
				 (car-safe x33))
				(x35
				 (cdr-safe x33)))
			     (progn
			       (ignore
				(null x35))
			       (let
				   ((command x26)
				    (flag x28)
				    (args x30)
				    (min x32)
				    (max x34))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				     (or flag
					 (doom-cli-command-string
					  (if
					      (keywordp
					       (car command))
					      command
					    (cdr command))))
				     (if
					 (or
					  (= min max)
					  (= max most-positive-fixnum))
					 min
				       (format "%d-%d" min max))
				     (if
					 (or
					  (= min 0)
					  (> min 1))
					 "s" "")
				     (length args)))
				   (doom-cli-call
				    (cons ':help
					  (cons "--synopsis"
						(cons "--postamble"
						      (cdr
						       (doom-cli--command context)))))
				    context e)))))))))))))))
       5)
      (doom-cli-unrecognized-option-error
       (doom-print
	(doom-print--format
	 (doom-print--style 'red "Error: unknown option %s")
	 (car
	  (cdr e))))
       (doom-cli-call
	(cons ':help
	      (cons "--synopsis"
		    (cons "--postamble"
			  (cdr
			   (doom-cli--command context)))))
	context e)
       5)
      (doom-cli-invalid-option-error
       (let*
	   ((val
	     (cdr e)))
	 (progn
	   (ignore
	    (consp val))
	   (let*
	       ((x36
		 (car-safe val))
		(x37
		 (cdr-safe val)))
	     (progn
	       (ignore
		(consp x37))
	       (let*
		   ((x38
		     (car-safe x37))
		    (x39
		     (cdr-safe x37)))
		 (progn
		   (ignore
		    (consp x39))
		   (let*
		       ((x40
			 (car-safe x39))
			(x41
			 (cdr-safe x39)))
		     (progn
		       (ignore
			(consp x41))
		       (let*
			   ((x42
			     (car-safe x41))
			    (x43
			     (cdr-safe x41)))
			 (progn
			   (ignore
			    (null x43))
			   (let
			       ((types x36)
				(option x38)
				(value x40)
				(errors x42))
			     (progn
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red "Error: %s received invalid value %S")
				 (string-join
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of option)
					 cl-struct-doom-cli-option-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli-option option)))
				    (aref option 5))
				  "/")
				 value))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'bold "\nValidation errors:")))
			       (let
				   ((tail errors))
				 (while tail
				   (let
				       ((err
					 (car tail)))
				     (doom-print
				      (doom-print--format
				       (doom-print--class 'item "%s."
							  (doom-print--class 'fill err))))
				     (setq tail
					   (cdr tail)))))))))))))))))
       (doom-cli-call
	(cons ':help
	      (cons "--postamble"
		    (cdr
		     (doom-cli--command context))))
	context e)
       5)
      (doom-cli-command-not-found-error
       (let*
	   ((command
	     (cdr e))
	    (cli
	     (doom-cli-get command)))
	 (cond
	  ((null cli)
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: unrecognized command '%s'")
	     (doom-cli-command-string
	      (or
	       (cdr command)
	       command))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--similar"
			(cons "--postamble"
			      (cdr command))))
	    context e))
	  ((null
	    (progn
	      (or
	       (progn
		 (and
		  (memq
		   (type-of cli)
		   cl-struct-doom-cli-tags)
		  t))
	       (signal 'wrong-type-argument
		       (list 'doom-cli cli)))
	      (aref cli 9)))
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: a subcommand is required")))
	   (doom-cli-call
	    (cons ':help
		  (cons "--subcommands"
			(cons "--postamble"
			      (cdr command))))
	    context e))))
       4)
      (doom-cli-invalid-prefix-error
       (let
	   ((prefix
	     (car
	      (cdr e))))
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	   prefix))
	 (let*
	     ((suggested
	       (and t
		    (let*
			((--cl-var-- t)
			 --cl-var--)
		      (catch '--cl-block---cl-finish----
			(maphash
			 #'(lambda
			     (--cl-var-- cli)
			     (or
			      (if
				  (progn
				    (or
				     (progn
				       (and
					(memq
					 (type-of cli)
					 cl-struct-doom-cli-tags)
					t))
				     (signal 'wrong-type-argument
					     (list 'doom-cli cli)))
				    (aref cli 2))
				  t
				(progn
				  (setq --cl-var--
					(car
					 (progn
					   (or
					    (progn
					      (and
					       (memq
						(type-of cli)
						cl-struct-doom-cli-tags)
					       t))
					    (signal 'wrong-type-argument
						    (list 'doom-cli cli)))
					   (aref cli 1))))
				  (setq --cl-var-- nil)))
			      (throw '--cl-block---cl-finish---- nil)))
			 doom-cli--table))
		      --cl-var--))))
	   (if suggested
	       (doom-print
		(doom-print--format "Did you mean %S?" suggested))
	     (doom-print
	      (doom-print--format "There are no commands defined under %S." prefix)))))
       4)
      (user-error
       (doom-print
	(doom-print--format
	 (doom-print--style 'red "Error: %s")
	 (car
	  (cdr e))))
       (doom-print
	(doom-print--format "\nAborting..."))
       3))
    context))
 nil)

;;;; 53
((let
     ((doom-print--output-depth
       (1+ doom-print--output-depth)))
   (progn
     (if doom-inhibit-log nil
       (doom--log "run!: %s %s" prefix
		  (combine-and-quote-strings args)))
     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
     (add-hook 'kill-emacs-hook write-logs-fn 95)
     (if
	 (doom-cli-context-pipe-p context :out t)
	 (progn
	   (setq doom-print-backend nil)))
     (if
	 (doom-cli-context-pipe-p context :in)
	 (progn
	   (save-current-buffer
	     (set-buffer
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of context)
		     cl-struct-doom-cli-context-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli-context context)))
		(aref context 15)))
	     (while
		 (let*
		     ((in
		       (and t
			    (condition-case nil
				(progn
				  (read-from-minibuffer ""))
			      (error nil)))))
		   (if in
		       (insert in "\n")
		     (condition-case nil
			 (progn
			   (delete-char -1))
		       (error nil))))))))
     (doom-cli--exit
      (condition-case e
	  (let*
	      ((args
		(cons
		 (if
		     (getenv "__DOOMDUMP")
		     :dump prefix)
		 args))
	       (context
		(doom-cli-context-restore
		 (getenv "__DOOMCONTEXT")
		 context))
	       (context
		(doom-cli-context-parse args context)))
	    (run-hook-with-args 'doom-cli-before-run-functions context)
	    (let
		((result
		  (doom-cli-context-execute context)))
	      (run-hook-with-args 'doom-cli-after-run-functions context result))
	    0)
	(doom-cli-wrong-number-of-arguments-error
	 (let*
	     ((val
	       (cdr e)))
	   (progn
	     (ignore
	      (consp val))
	     (let*
		 ((x26
		   (car-safe val))
		  (x27
		   (cdr-safe val)))
	       (progn
		 (ignore
		  (consp x27))
		 (let*
		     ((x28
		       (car-safe x27))
		      (x29
		       (cdr-safe x27)))
		   (progn
		     (ignore
		      (consp x29))
		     (let*
			 ((x30
			   (car-safe x29))
			  (x31
			   (cdr-safe x29)))
		       (progn
			 (ignore
			  (consp x31))
			 (let*
			     ((x32
			       (car-safe x31))
			      (x33
			       (cdr-safe x31)))
			   (progn
			     (ignore
			      (consp x33))
			     (let*
				 ((x34
				   (car-safe x33))
				  (x35
				   (cdr-safe x33)))
			       (progn
				 (ignore
				  (null x35))
				 (let
				     ((command x26)
				      (flag x28)
				      (args x30)
				      (min x32)
				      (max x34))
				   (progn
				     (doom-print
				      (doom-print--format
				       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
				       (or flag
					   (doom-cli-command-string
					    (if
						(keywordp
						 (car command))
						command
					      (cdr command))))
				       (if
					   (or
					    (= min max)
					    (= max most-positive-fixnum))
					   min
					 (format "%d-%d" min max))
				       (if
					   (or
					    (= min 0)
					    (> min 1))
					   "s" "")
				       (length args)))
				     (doom-cli-call
				      (cons ':help
					    (cons "--synopsis"
						  (cons "--postamble"
							(cdr
							 (doom-cli--command context)))))
				      context e)))))))))))))))
	 5)
	(doom-cli-unrecognized-option-error
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: unknown option %s")
	   (car
	    (cdr e))))
	 (doom-cli-call
	  (cons ':help
		(cons "--synopsis"
		      (cons "--postamble"
			    (cdr
			     (doom-cli--command context)))))
	  context e)
	 5)
	(doom-cli-invalid-option-error
	 (let*
	     ((val
	       (cdr e)))
	   (progn
	     (ignore
	      (consp val))
	     (let*
		 ((x36
		   (car-safe val))
		  (x37
		   (cdr-safe val)))
	       (progn
		 (ignore
		  (consp x37))
		 (let*
		     ((x38
		       (car-safe x37))
		      (x39
		       (cdr-safe x37)))
		   (progn
		     (ignore
		      (consp x39))
		     (let*
			 ((x40
			   (car-safe x39))
			  (x41
			   (cdr-safe x39)))
		       (progn
			 (ignore
			  (consp x41))
			 (let*
			     ((x42
			       (car-safe x41))
			      (x43
			       (cdr-safe x41)))
			   (progn
			     (ignore
			      (null x43))
			     (let
				 ((types x36)
				  (option x38)
				  (value x40)
				  (errors x42))
			       (progn
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'red "Error: %s received invalid value %S")
				   (string-join
				    (progn
				      (or
				       (progn
					 (and
					  (memq
					   (type-of option)
					   cl-struct-doom-cli-option-tags)
					  t))
				       (signal 'wrong-type-argument
					       (list 'doom-cli-option option)))
				      (aref option 5))
				    "/")
				   value))
				 (doom-print
				  (doom-print--format
				   (doom-print--style 'bold "\nValidation errors:")))
				 (let
				     ((tail errors))
				   (while tail
				     (let
					 ((err
					   (car tail)))
				       (doom-print
					(doom-print--format
					 (doom-print--class 'item "%s."
							    (doom-print--class 'fill err))))
				       (setq tail
					     (cdr tail)))))))))))))))))
	 (doom-cli-call
	  (cons ':help
		(cons "--postamble"
		      (cdr
		       (doom-cli--command context))))
	  context e)
	 5)
	(doom-cli-command-not-found-error
	 (let*
	     ((command
	       (cdr e))
	      (cli
	       (doom-cli-get command)))
	   (cond
	    ((null cli)
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: unrecognized command '%s'")
	       (doom-cli-command-string
		(or
		 (cdr command)
		 command))))
	     (doom-cli-call
	      (cons ':help
		    (cons "--similar"
			  (cons "--postamble"
				(cdr command))))
	      context e))
	    ((null
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of cli)
		     cl-struct-doom-cli-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli cli)))
		(aref cli 9)))
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: a subcommand is required")))
	     (doom-cli-call
	      (cons ':help
		    (cons "--subcommands"
			  (cons "--postamble"
				(cdr command))))
	      context e))))
	 4)
	(doom-cli-invalid-prefix-error
	 (let
	     ((prefix
	       (car
		(cdr e))))
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	     prefix))
	   (let*
	       ((suggested
		 (and t
		      (let*
			  ((--cl-var-- t)
			   --cl-var--)
			(catch '--cl-block---cl-finish----
			  (maphash
			   #'(lambda
			       (--cl-var-- cli)
			       (or
				(if
				    (progn
				      (or
				       (progn
					 (and
					  (memq
					   (type-of cli)
					   cl-struct-doom-cli-tags)
					  t))
				       (signal 'wrong-type-argument
					       (list 'doom-cli cli)))
				      (aref cli 2))
				    t
				  (progn
				    (setq --cl-var--
					  (car
					   (progn
					     (or
					      (progn
						(and
						 (memq
						  (type-of cli)
						  cl-struct-doom-cli-tags)
						 t))
					      (signal 'wrong-type-argument
						      (list 'doom-cli cli)))
					     (aref cli 1))))
				    (setq --cl-var-- nil)))
				(throw '--cl-block---cl-finish---- nil)))
			   doom-cli--table))
			--cl-var--))))
	     (if suggested
		 (doom-print
		  (doom-print--format "Did you mean %S?" suggested))
	       (doom-print
		(doom-print--format "There are no commands defined under %S." prefix)))))
	 4)
	(user-error
	 (doom-print
	  (doom-print--format
	   (doom-print--style 'red "Error: %s")
	   (car
	    (cdr e))))
	 (doom-print
	  (doom-print--format "\nAborting..."))
	 3))
      context)))
 ((doom-print--output-depth . 1)))

;;;; 54
((progn
   (fset #'message vnew)
   (let
       ((doom-print--output-depth
	 (1+ doom-print--output-depth)))
     (progn
       (if doom-inhibit-log nil
	 (doom--log "run!: %s %s" prefix
		    (combine-and-quote-strings args)))
       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
       (add-hook 'kill-emacs-hook write-logs-fn 95)
       (if
	   (doom-cli-context-pipe-p context :out t)
	   (progn
	     (setq doom-print-backend nil)))
       (if
	   (doom-cli-context-pipe-p context :in)
	   (progn
	     (save-current-buffer
	       (set-buffer
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of context)
		       cl-struct-doom-cli-context-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context context)))
		  (aref context 15)))
	       (while
		   (let*
		       ((in
			 (and t
			      (condition-case nil
				  (progn
				    (read-from-minibuffer ""))
				(error nil)))))
		     (if in
			 (insert in "\n")
		       (condition-case nil
			   (progn
			     (delete-char -1))
			 (error nil))))))))
       (doom-cli--exit
	(condition-case e
	    (let*
		((args
		  (cons
		   (if
		       (getenv "__DOOMDUMP")
		       :dump prefix)
		   args))
		 (context
		  (doom-cli-context-restore
		   (getenv "__DOOMCONTEXT")
		   context))
		 (context
		  (doom-cli-context-parse args context)))
	      (run-hook-with-args 'doom-cli-before-run-functions context)
	      (let
		  ((result
		    (doom-cli-context-execute context)))
		(run-hook-with-args 'doom-cli-after-run-functions context result))
	      0)
	  (doom-cli-wrong-number-of-arguments-error
	   (let*
	       ((val
		 (cdr e)))
	     (progn
	       (ignore
		(consp val))
	       (let*
		   ((x26
		     (car-safe val))
		    (x27
		     (cdr-safe val)))
		 (progn
		   (ignore
		    (consp x27))
		   (let*
		       ((x28
			 (car-safe x27))
			(x29
			 (cdr-safe x27)))
		     (progn
		       (ignore
			(consp x29))
		       (let*
			   ((x30
			     (car-safe x29))
			    (x31
			     (cdr-safe x29)))
			 (progn
			   (ignore
			    (consp x31))
			   (let*
			       ((x32
				 (car-safe x31))
				(x33
				 (cdr-safe x31)))
			     (progn
			       (ignore
				(consp x33))
			       (let*
				   ((x34
				     (car-safe x33))
				    (x35
				     (cdr-safe x33)))
				 (progn
				   (ignore
				    (null x35))
				   (let
				       ((command x26)
					(flag x28)
					(args x30)
					(min x32)
					(max x34))
				     (progn
				       (doom-print
					(doom-print--format
					 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
					 (or flag
					     (doom-cli-command-string
					      (if
						  (keywordp
						   (car command))
						  command
						(cdr command))))
					 (if
					     (or
					      (= min max)
					      (= max most-positive-fixnum))
					     min
					   (format "%d-%d" min max))
					 (if
					     (or
					      (= min 0)
					      (> min 1))
					     "s" "")
					 (length args)))
				       (doom-cli-call
					(cons ':help
					      (cons "--synopsis"
						    (cons "--postamble"
							  (cdr
							   (doom-cli--command context)))))
					context e)))))))))))))))
	   5)
	  (doom-cli-unrecognized-option-error
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: unknown option %s")
	     (car
	      (cdr e))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--synopsis"
			(cons "--postamble"
			      (cdr
			       (doom-cli--command context)))))
	    context e)
	   5)
	  (doom-cli-invalid-option-error
	   (let*
	       ((val
		 (cdr e)))
	     (progn
	       (ignore
		(consp val))
	       (let*
		   ((x36
		     (car-safe val))
		    (x37
		     (cdr-safe val)))
		 (progn
		   (ignore
		    (consp x37))
		   (let*
		       ((x38
			 (car-safe x37))
			(x39
			 (cdr-safe x37)))
		     (progn
		       (ignore
			(consp x39))
		       (let*
			   ((x40
			     (car-safe x39))
			    (x41
			     (cdr-safe x39)))
			 (progn
			   (ignore
			    (consp x41))
			   (let*
			       ((x42
				 (car-safe x41))
				(x43
				 (cdr-safe x41)))
			     (progn
			       (ignore
				(null x43))
			       (let
				   ((types x36)
				    (option x38)
				    (value x40)
				    (errors x42))
				 (progn
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'red "Error: %s received invalid value %S")
				     (string-join
				      (progn
					(or
					 (progn
					   (and
					    (memq
					     (type-of option)
					     cl-struct-doom-cli-option-tags)
					    t))
					 (signal 'wrong-type-argument
						 (list 'doom-cli-option option)))
					(aref option 5))
				      "/")
				     value))
				   (doom-print
				    (doom-print--format
				     (doom-print--style 'bold "\nValidation errors:")))
				   (let
				       ((tail errors))
				     (while tail
				       (let
					   ((err
					     (car tail)))
					 (doom-print
					  (doom-print--format
					   (doom-print--class 'item "%s."
							      (doom-print--class 'fill err))))
					 (setq tail
					       (cdr tail)))))))))))))))))
	   (doom-cli-call
	    (cons ':help
		  (cons "--postamble"
			(cdr
			 (doom-cli--command context))))
	    context e)
	   5)
	  (doom-cli-command-not-found-error
	   (let*
	       ((command
		 (cdr e))
		(cli
		 (doom-cli-get command)))
	     (cond
	      ((null cli)
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red "Error: unrecognized command '%s'")
		 (doom-cli-command-string
		  (or
		   (cdr command)
		   command))))
	       (doom-cli-call
		(cons ':help
		      (cons "--similar"
			    (cons "--postamble"
				  (cdr command))))
		context e))
	      ((null
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of cli)
		       cl-struct-doom-cli-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli cli)))
		  (aref cli 9)))
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red "Error: a subcommand is required")))
	       (doom-cli-call
		(cons ':help
		      (cons "--subcommands"
			    (cons "--postamble"
				  (cdr command))))
		context e))))
	   4)
	  (doom-cli-invalid-prefix-error
	   (let
	       ((prefix
		 (car
		  (cdr e))))
	     (doom-print
	      (doom-print--format
	       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
	       prefix))
	     (let*
		 ((suggested
		   (and t
			(let*
			    ((--cl-var-- t)
			     --cl-var--)
			  (catch '--cl-block---cl-finish----
			    (maphash
			     #'(lambda
				 (--cl-var-- cli)
				 (or
				  (if
				      (progn
					(or
					 (progn
					   (and
					    (memq
					     (type-of cli)
					     cl-struct-doom-cli-tags)
					    t))
					 (signal 'wrong-type-argument
						 (list 'doom-cli cli)))
					(aref cli 2))
				      t
				    (progn
				      (setq --cl-var--
					    (car
					     (progn
					       (or
						(progn
						  (and
						   (memq
						    (type-of cli)
						    cl-struct-doom-cli-tags)
						   t))
						(signal 'wrong-type-argument
							(list 'doom-cli cli)))
					       (aref cli 1))))
				      (setq --cl-var-- nil)))
				  (throw '--cl-block---cl-finish---- nil)))
			     doom-cli--table))
			  --cl-var--))))
	       (if suggested
		   (doom-print
		    (doom-print--format "Did you mean %S?" suggested))
		 (doom-print
		  (doom-print--format "There are no commands defined under %S." prefix)))))
	   4)
	  (user-error
	   (doom-print
	    (doom-print--format
	     (doom-print--style 'red "Error: %s")
	     (car
	      (cdr e))))
	   (doom-print
	    (doom-print--format "\nAborting..."))
	   3))
	context))))
 nil)

;;;; 55
((unwind-protect
     (progn
       (fset #'message vnew)
       (let
	   ((doom-print--output-depth
	     (1+ doom-print--output-depth)))
	 (progn
	   (if doom-inhibit-log nil
	     (doom--log "run!: %s %s" prefix
			(combine-and-quote-strings args)))
	   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	   (add-hook 'kill-emacs-hook write-logs-fn 95)
	   (if
	       (doom-cli-context-pipe-p context :out t)
	       (progn
		 (setq doom-print-backend nil)))
	   (if
	       (doom-cli-context-pipe-p context :in)
	       (progn
		 (save-current-buffer
		   (set-buffer
		    (progn
		      (or
		       (progn
			 (and
			  (memq
			   (type-of context)
			   cl-struct-doom-cli-context-tags)
			  t))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context context)))
		      (aref context 15)))
		   (while
		       (let*
			   ((in
			     (and t
				  (condition-case nil
				      (progn
					(read-from-minibuffer ""))
				    (error nil)))))
			 (if in
			     (insert in "\n")
			   (condition-case nil
			       (progn
				 (delete-char -1))
			     (error nil))))))))
	   (doom-cli--exit
	    (condition-case e
		(let*
		    ((args
		      (cons
		       (if
			   (getenv "__DOOMDUMP")
			   :dump prefix)
		       args))
		     (context
		      (doom-cli-context-restore
		       (getenv "__DOOMCONTEXT")
		       context))
		     (context
		      (doom-cli-context-parse args context)))
		  (run-hook-with-args 'doom-cli-before-run-functions context)
		  (let
		      ((result
			(doom-cli-context-execute context)))
		    (run-hook-with-args 'doom-cli-after-run-functions context result))
		  0)
	      (doom-cli-wrong-number-of-arguments-error
	       (let*
		   ((val
		     (cdr e)))
		 (progn
		   (ignore
		    (consp val))
		   (let*
		       ((x26
			 (car-safe val))
			(x27
			 (cdr-safe val)))
		     (progn
		       (ignore
			(consp x27))
		       (let*
			   ((x28
			     (car-safe x27))
			    (x29
			     (cdr-safe x27)))
			 (progn
			   (ignore
			    (consp x29))
			   (let*
			       ((x30
				 (car-safe x29))
				(x31
				 (cdr-safe x29)))
			     (progn
			       (ignore
				(consp x31))
			       (let*
				   ((x32
				     (car-safe x31))
				    (x33
				     (cdr-safe x31)))
				 (progn
				   (ignore
				    (consp x33))
				   (let*
				       ((x34
					 (car-safe x33))
					(x35
					 (cdr-safe x33)))
				     (progn
				       (ignore
					(null x35))
				       (let
					   ((command x26)
					    (flag x28)
					    (args x30)
					    (min x32)
					    (max x34))
					 (progn
					   (doom-print
					    (doom-print--format
					     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
					     (or flag
						 (doom-cli-command-string
						  (if
						      (keywordp
						       (car command))
						      command
						    (cdr command))))
					     (if
						 (or
						  (= min max)
						  (= max most-positive-fixnum))
						 min
					       (format "%d-%d" min max))
					     (if
						 (or
						  (= min 0)
						  (> min 1))
						 "s" "")
					     (length args)))
					   (doom-cli-call
					    (cons ':help
						  (cons "--synopsis"
							(cons "--postamble"
							      (cdr
							       (doom-cli--command context)))))
					    context e)))))))))))))))
	       5)
	      (doom-cli-unrecognized-option-error
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red "Error: unknown option %s")
		 (car
		  (cdr e))))
	       (doom-cli-call
		(cons ':help
		      (cons "--synopsis"
			    (cons "--postamble"
				  (cdr
				   (doom-cli--command context)))))
		context e)
	       5)
	      (doom-cli-invalid-option-error
	       (let*
		   ((val
		     (cdr e)))
		 (progn
		   (ignore
		    (consp val))
		   (let*
		       ((x36
			 (car-safe val))
			(x37
			 (cdr-safe val)))
		     (progn
		       (ignore
			(consp x37))
		       (let*
			   ((x38
			     (car-safe x37))
			    (x39
			     (cdr-safe x37)))
			 (progn
			   (ignore
			    (consp x39))
			   (let*
			       ((x40
				 (car-safe x39))
				(x41
				 (cdr-safe x39)))
			     (progn
			       (ignore
				(consp x41))
			       (let*
				   ((x42
				     (car-safe x41))
				    (x43
				     (cdr-safe x41)))
				 (progn
				   (ignore
				    (null x43))
				   (let
				       ((types x36)
					(option x38)
					(value x40)
					(errors x42))
				     (progn
				       (doom-print
					(doom-print--format
					 (doom-print--style 'red "Error: %s received invalid value %S")
					 (string-join
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of option)
						 cl-struct-doom-cli-option-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli-option option)))
					    (aref option 5))
					  "/")
					 value))
				       (doom-print
					(doom-print--format
					 (doom-print--style 'bold "\nValidation errors:")))
				       (let
					   ((tail errors))
					 (while tail
					   (let
					       ((err
						 (car tail)))
					     (doom-print
					      (doom-print--format
					       (doom-print--class 'item "%s."
								  (doom-print--class 'fill err))))
					     (setq tail
						   (cdr tail)))))))))))))))))
	       (doom-cli-call
		(cons ':help
		      (cons "--postamble"
			    (cdr
			     (doom-cli--command context))))
		context e)
	       5)
	      (doom-cli-command-not-found-error
	       (let*
		   ((command
		     (cdr e))
		    (cli
		     (doom-cli-get command)))
		 (cond
		  ((null cli)
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: unrecognized command '%s'")
		     (doom-cli-command-string
		      (or
		       (cdr command)
		       command))))
		   (doom-cli-call
		    (cons ':help
			  (cons "--similar"
				(cons "--postamble"
				      (cdr command))))
		    context e))
		  ((null
		    (progn
		      (or
		       (progn
			 (and
			  (memq
			   (type-of cli)
			   cl-struct-doom-cli-tags)
			  t))
		       (signal 'wrong-type-argument
			       (list 'doom-cli cli)))
		      (aref cli 9)))
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: a subcommand is required")))
		   (doom-cli-call
		    (cons ':help
			  (cons "--subcommands"
				(cons "--postamble"
				      (cdr command))))
		    context e))))
	       4)
	      (doom-cli-invalid-prefix-error
	       (let
		   ((prefix
		     (car
		      (cdr e))))
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
		   prefix))
		 (let*
		     ((suggested
		       (and t
			    (let*
				((--cl-var-- t)
				 --cl-var--)
			      (catch '--cl-block---cl-finish----
				(maphash
				 #'(lambda
				     (--cl-var-- cli)
				     (or
				      (if
					  (progn
					    (or
					     (progn
					       (and
						(memq
						 (type-of cli)
						 cl-struct-doom-cli-tags)
						t))
					     (signal 'wrong-type-argument
						     (list 'doom-cli cli)))
					    (aref cli 2))
					  t
					(progn
					  (setq --cl-var--
						(car
						 (progn
						   (or
						    (progn
						      (and
						       (memq
							(type-of cli)
							cl-struct-doom-cli-tags)
						       t))
						    (signal 'wrong-type-argument
							    (list 'doom-cli cli)))
						   (aref cli 1))))
					  (setq --cl-var-- nil)))
				      (throw '--cl-block---cl-finish---- nil)))
				 doom-cli--table))
			      --cl-var--))))
		   (if suggested
		       (doom-print
			(doom-print--format "Did you mean %S?" suggested))
		     (doom-print
		      (doom-print--format "There are no commands defined under %S." prefix)))))
	       4)
	      (user-error
	       (doom-print
		(doom-print--format
		 (doom-print--style 'red "Error: %s")
		 (car
		  (cdr e))))
	       (doom-print
		(doom-print--format "\nAborting..."))
	       3))
	    context))))
   (fset #'message old))
 nil)

;;;; 56
((let*
     ((vnew
       (doom-print--redirect-message streamspec
				     (if noninteractive 'debug 'notice)))
      (old
       (symbol-function #'message)))
   (unwind-protect
       (progn
	 (fset #'message vnew)
	 (let
	     ((doom-print--output-depth
	       (1+ doom-print--output-depth)))
	   (progn
	     (if doom-inhibit-log nil
	       (doom--log "run!: %s %s" prefix
			  (combine-and-quote-strings args)))
	     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	     (add-hook 'kill-emacs-hook write-logs-fn 95)
	     (if
		 (doom-cli-context-pipe-p context :out t)
		 (progn
		   (setq doom-print-backend nil)))
	     (if
		 (doom-cli-context-pipe-p context :in)
		 (progn
		   (save-current-buffer
		     (set-buffer
		      (progn
			(or
			 (progn
			   (and
			    (memq
			     (type-of context)
			     cl-struct-doom-cli-context-tags)
			    t))
			 (signal 'wrong-type-argument
				 (list 'doom-cli-context context)))
			(aref context 15)))
		     (while
			 (let*
			     ((in
			       (and t
				    (condition-case nil
					(progn
					  (read-from-minibuffer ""))
				      (error nil)))))
			   (if in
			       (insert in "\n")
			     (condition-case nil
				 (progn
				   (delete-char -1))
			       (error nil))))))))
	     (doom-cli--exit
	      (condition-case e
		  (let*
		      ((args
			(cons
			 (if
			     (getenv "__DOOMDUMP")
			     :dump prefix)
			 args))
		       (context
			(doom-cli-context-restore
			 (getenv "__DOOMCONTEXT")
			 context))
		       (context
			(doom-cli-context-parse args context)))
		    (run-hook-with-args 'doom-cli-before-run-functions context)
		    (let
			((result
			  (doom-cli-context-execute context)))
		      (run-hook-with-args 'doom-cli-after-run-functions context result))
		    0)
		(doom-cli-wrong-number-of-arguments-error
		 (let*
		     ((val
		       (cdr e)))
		   (progn
		     (ignore
		      (consp val))
		     (let*
			 ((x26
			   (car-safe val))
			  (x27
			   (cdr-safe val)))
		       (progn
			 (ignore
			  (consp x27))
			 (let*
			     ((x28
			       (car-safe x27))
			      (x29
			       (cdr-safe x27)))
			   (progn
			     (ignore
			      (consp x29))
			     (let*
				 ((x30
				   (car-safe x29))
				  (x31
				   (cdr-safe x29)))
			       (progn
				 (ignore
				  (consp x31))
				 (let*
				     ((x32
				       (car-safe x31))
				      (x33
				       (cdr-safe x31)))
				   (progn
				     (ignore
				      (consp x33))
				     (let*
					 ((x34
					   (car-safe x33))
					  (x35
					   (cdr-safe x33)))
				       (progn
					 (ignore
					  (null x35))
					 (let
					     ((command x26)
					      (flag x28)
					      (args x30)
					      (min x32)
					      (max x34))
					   (progn
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
					       (or flag
						   (doom-cli-command-string
						    (if
							(keywordp
							 (car command))
							command
						      (cdr command))))
					       (if
						   (or
						    (= min max)
						    (= max most-positive-fixnum))
						   min
						 (format "%d-%d" min max))
					       (if
						   (or
						    (= min 0)
						    (> min 1))
						   "s" "")
					       (length args)))
					     (doom-cli-call
					      (cons ':help
						    (cons "--synopsis"
							  (cons "--postamble"
								(cdr
								 (doom-cli--command context)))))
					      context e)))))))))))))))
		 5)
		(doom-cli-unrecognized-option-error
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: unknown option %s")
		   (car
		    (cdr e))))
		 (doom-cli-call
		  (cons ':help
			(cons "--synopsis"
			      (cons "--postamble"
				    (cdr
				     (doom-cli--command context)))))
		  context e)
		 5)
		(doom-cli-invalid-option-error
		 (let*
		     ((val
		       (cdr e)))
		   (progn
		     (ignore
		      (consp val))
		     (let*
			 ((x36
			   (car-safe val))
			  (x37
			   (cdr-safe val)))
		       (progn
			 (ignore
			  (consp x37))
			 (let*
			     ((x38
			       (car-safe x37))
			      (x39
			       (cdr-safe x37)))
			   (progn
			     (ignore
			      (consp x39))
			     (let*
				 ((x40
				   (car-safe x39))
				  (x41
				   (cdr-safe x39)))
			       (progn
				 (ignore
				  (consp x41))
				 (let*
				     ((x42
				       (car-safe x41))
				      (x43
				       (cdr-safe x41)))
				   (progn
				     (ignore
				      (null x43))
				     (let
					 ((types x36)
					  (option x38)
					  (value x40)
					  (errors x42))
				       (progn
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'red "Error: %s received invalid value %S")
					   (string-join
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of option)
						   cl-struct-doom-cli-option-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli-option option)))
					      (aref option 5))
					    "/")
					   value))
					 (doom-print
					  (doom-print--format
					   (doom-print--style 'bold "\nValidation errors:")))
					 (let
					     ((tail errors))
					   (while tail
					     (let
						 ((err
						   (car tail)))
					       (doom-print
						(doom-print--format
						 (doom-print--class 'item "%s."
								    (doom-print--class 'fill err))))
					       (setq tail
						     (cdr tail)))))))))))))))))
		 (doom-cli-call
		  (cons ':help
			(cons "--postamble"
			      (cdr
			       (doom-cli--command context))))
		  context e)
		 5)
		(doom-cli-command-not-found-error
		 (let*
		     ((command
		       (cdr e))
		      (cli
		       (doom-cli-get command)))
		   (cond
		    ((null cli)
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: unrecognized command '%s'")
		       (doom-cli-command-string
			(or
			 (cdr command)
			 command))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--similar"
				  (cons "--postamble"
					(cdr command))))
		      context e))
		    ((null
		      (progn
			(or
			 (progn
			   (and
			    (memq
			     (type-of cli)
			     cl-struct-doom-cli-tags)
			    t))
			 (signal 'wrong-type-argument
				 (list 'doom-cli cli)))
			(aref cli 9)))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: a subcommand is required")))
		     (doom-cli-call
		      (cons ':help
			    (cons "--subcommands"
				  (cons "--postamble"
					(cdr command))))
		      context e))))
		 4)
		(doom-cli-invalid-prefix-error
		 (let
		     ((prefix
		       (car
			(cdr e))))
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
		     prefix))
		   (let*
		       ((suggested
			 (and t
			      (let*
				  ((--cl-var-- t)
				   --cl-var--)
				(catch '--cl-block---cl-finish----
				  (maphash
				   #'(lambda
				       (--cl-var-- cli)
				       (or
					(if
					    (progn
					      (or
					       (progn
						 (and
						  (memq
						   (type-of cli)
						   cl-struct-doom-cli-tags)
						  t))
					       (signal 'wrong-type-argument
						       (list 'doom-cli cli)))
					      (aref cli 2))
					    t
					  (progn
					    (setq --cl-var--
						  (car
						   (progn
						     (or
						      (progn
							(and
							 (memq
							  (type-of cli)
							  cl-struct-doom-cli-tags)
							 t))
						      (signal 'wrong-type-argument
							      (list 'doom-cli cli)))
						     (aref cli 1))))
					    (setq --cl-var-- nil)))
					(throw '--cl-block---cl-finish---- nil)))
				   doom-cli--table))
				--cl-var--))))
		     (if suggested
			 (doom-print
			  (doom-print--format "Did you mean %S?" suggested))
		       (doom-print
			(doom-print--format "There are no commands defined under %S." prefix)))))
		 4)
		(user-error
		 (doom-print
		  (doom-print--format
		   (doom-print--style 'red "Error: %s")
		   (car
		    (cdr e))))
		 (doom-print
		  (doom-print--format "\nAborting..."))
		 3))
	      context))))
     (fset #'message old)))
 ((prefix . "doom")
  (args
   ("sync" "-e"))
  (args "sync" "-e")
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26159 55730 696713 538000)
			    83351 0
			    (118 . 16)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync" "-e")
			    (("--reload" . "--reload")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e" . "-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26159 55730 696713 538000)
				83351 0
				(118 . 16)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync" "-e")
				(("--reload" . "--reload")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e" . "-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))
  (vnew closure
	((streams
	  (#[128 "\302\301\303\300\4\"\"\207"
		 [(0 2)
		  >= apply append]
		 6 "\n\n(fn &rest ARGS2)"]
	   . #<buffer  *doom-cli stdout*>)
	  (t . #<buffer  *doom-cli stderr*>))
	 (old . #<subr message>)
	 (level . debug))
	(message &rest args)
	(if message
	    (progn
	      (let
		  ((output
		    (apply #'doom-print--format message args)))
		(if
		    (<= doom-print--output-depth 1)
		    (doom-print output :level level :stream t)
		  (let
		      ((doom-print--output-depth
			(1- doom-print--output-depth)))
		    (funcall old "%s" output)))
		(let
		    ((tail streams))
		  (while tail
		    (let
			((stream
			  (car tail)))
		      (if
			  (or
			   (eq
			    (car stream)
			    t)
			   (funcall
			    (car stream)))
			  (progn
			    (doom-print output :stream
					(cdr stream))))
		      (setq tail
			    (cdr tail))))))
	      message)))
  (old . #<subr message>)))

;;;; 57
((let
     ((standard-output
       (doom-print--redirect-standard-output streamspec t)))
   (let*
       ((vnew
	 (doom-print--redirect-message streamspec
				       (if noninteractive 'debug 'notice)))
	(old
	 (symbol-function #'message)))
     (unwind-protect
	 (progn
	   (fset #'message vnew)
	   (let
	       ((doom-print--output-depth
		 (1+ doom-print--output-depth)))
	     (progn
	       (if doom-inhibit-log nil
		 (doom--log "run!: %s %s" prefix
			    (combine-and-quote-strings args)))
	       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
	       (add-hook 'kill-emacs-hook write-logs-fn 95)
	       (if
		   (doom-cli-context-pipe-p context :out t)
		   (progn
		     (setq doom-print-backend nil)))
	       (if
		   (doom-cli-context-pipe-p context :in)
		   (progn
		     (save-current-buffer
		       (set-buffer
			(progn
			  (or
			   (progn
			     (and
			      (memq
			       (type-of context)
			       cl-struct-doom-cli-context-tags)
			      t))
			   (signal 'wrong-type-argument
				   (list 'doom-cli-context context)))
			  (aref context 15)))
		       (while
			   (let*
			       ((in
				 (and t
				      (condition-case nil
					  (progn
					    (read-from-minibuffer ""))
					(error nil)))))
			     (if in
				 (insert in "\n")
			       (condition-case nil
				   (progn
				     (delete-char -1))
				 (error nil))))))))
	       (doom-cli--exit
		(condition-case e
		    (let*
			((args
			  (cons
			   (if
			       (getenv "__DOOMDUMP")
			       :dump prefix)
			   args))
			 (context
			  (doom-cli-context-restore
			   (getenv "__DOOMCONTEXT")
			   context))
			 (context
			  (doom-cli-context-parse args context)))
		      (run-hook-with-args 'doom-cli-before-run-functions context)
		      (let
			  ((result
			    (doom-cli-context-execute context)))
			(run-hook-with-args 'doom-cli-after-run-functions context result))
		      0)
		  (doom-cli-wrong-number-of-arguments-error
		   (let*
		       ((val
			 (cdr e)))
		     (progn
		       (ignore
			(consp val))
		       (let*
			   ((x26
			     (car-safe val))
			    (x27
			     (cdr-safe val)))
			 (progn
			   (ignore
			    (consp x27))
			   (let*
			       ((x28
				 (car-safe x27))
				(x29
				 (cdr-safe x27)))
			     (progn
			       (ignore
				(consp x29))
			       (let*
				   ((x30
				     (car-safe x29))
				    (x31
				     (cdr-safe x29)))
				 (progn
				   (ignore
				    (consp x31))
				   (let*
				       ((x32
					 (car-safe x31))
					(x33
					 (cdr-safe x31)))
				     (progn
				       (ignore
					(consp x33))
				       (let*
					   ((x34
					     (car-safe x33))
					    (x35
					     (cdr-safe x33)))
					 (progn
					   (ignore
					    (null x35))
					   (let
					       ((command x26)
						(flag x28)
						(args x30)
						(min x32)
						(max x34))
					     (progn
					       (doom-print
						(doom-print--format
						 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						 (or flag
						     (doom-cli-command-string
						      (if
							  (keywordp
							   (car command))
							  command
							(cdr command))))
						 (if
						     (or
						      (= min max)
						      (= max most-positive-fixnum))
						     min
						   (format "%d-%d" min max))
						 (if
						     (or
						      (= min 0)
						      (> min 1))
						     "s" "")
						 (length args)))
					       (doom-cli-call
						(cons ':help
						      (cons "--synopsis"
							    (cons "--postamble"
								  (cdr
								   (doom-cli--command context)))))
						context e)))))))))))))))
		   5)
		  (doom-cli-unrecognized-option-error
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: unknown option %s")
		     (car
		      (cdr e))))
		   (doom-cli-call
		    (cons ':help
			  (cons "--synopsis"
				(cons "--postamble"
				      (cdr
				       (doom-cli--command context)))))
		    context e)
		   5)
		  (doom-cli-invalid-option-error
		   (let*
		       ((val
			 (cdr e)))
		     (progn
		       (ignore
			(consp val))
		       (let*
			   ((x36
			     (car-safe val))
			    (x37
			     (cdr-safe val)))
			 (progn
			   (ignore
			    (consp x37))
			   (let*
			       ((x38
				 (car-safe x37))
				(x39
				 (cdr-safe x37)))
			     (progn
			       (ignore
				(consp x39))
			       (let*
				   ((x40
				     (car-safe x39))
				    (x41
				     (cdr-safe x39)))
				 (progn
				   (ignore
				    (consp x41))
				   (let*
				       ((x42
					 (car-safe x41))
					(x43
					 (cdr-safe x41)))
				     (progn
				       (ignore
					(null x43))
				       (let
					   ((types x36)
					    (option x38)
					    (value x40)
					    (errors x42))
					 (progn
					   (doom-print
					    (doom-print--format
					     (doom-print--style 'red "Error: %s received invalid value %S")
					     (string-join
					      (progn
						(or
						 (progn
						   (and
						    (memq
						     (type-of option)
						     cl-struct-doom-cli-option-tags)
						    t))
						 (signal 'wrong-type-argument
							 (list 'doom-cli-option option)))
						(aref option 5))
					      "/")
					     value))
					   (doom-print
					    (doom-print--format
					     (doom-print--style 'bold "\nValidation errors:")))
					   (let
					       ((tail errors))
					     (while tail
					       (let
						   ((err
						     (car tail)))
						 (doom-print
						  (doom-print--format
						   (doom-print--class 'item "%s."
								      (doom-print--class 'fill err))))
						 (setq tail
						       (cdr tail)))))))))))))))))
		   (doom-cli-call
		    (cons ':help
			  (cons "--postamble"
				(cdr
				 (doom-cli--command context))))
		    context e)
		   5)
		  (doom-cli-command-not-found-error
		   (let*
		       ((command
			 (cdr e))
			(cli
			 (doom-cli-get command)))
		     (cond
		      ((null cli)
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: unrecognized command '%s'")
			 (doom-cli-command-string
			  (or
			   (cdr command)
			   command))))
		       (doom-cli-call
			(cons ':help
			      (cons "--similar"
				    (cons "--postamble"
					  (cdr command))))
			context e))
		      ((null
			(progn
			  (or
			   (progn
			     (and
			      (memq
			       (type-of cli)
			       cl-struct-doom-cli-tags)
			      t))
			   (signal 'wrong-type-argument
				   (list 'doom-cli cli)))
			  (aref cli 9)))
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: a subcommand is required")))
		       (doom-cli-call
			(cons ':help
			      (cons "--subcommands"
				    (cons "--postamble"
					  (cdr command))))
			context e))))
		   4)
		  (doom-cli-invalid-prefix-error
		   (let
		       ((prefix
			 (car
			  (cdr e))))
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
		       prefix))
		     (let*
			 ((suggested
			   (and t
				(let*
				    ((--cl-var-- t)
				     --cl-var--)
				  (catch '--cl-block---cl-finish----
				    (maphash
				     #'(lambda
					 (--cl-var-- cli)
					 (or
					  (if
					      (progn
						(or
						 (progn
						   (and
						    (memq
						     (type-of cli)
						     cl-struct-doom-cli-tags)
						    t))
						 (signal 'wrong-type-argument
							 (list 'doom-cli cli)))
						(aref cli 2))
					      t
					    (progn
					      (setq --cl-var--
						    (car
						     (progn
						       (or
							(progn
							  (and
							   (memq
							    (type-of cli)
							    cl-struct-doom-cli-tags)
							   t))
							(signal 'wrong-type-argument
								(list 'doom-cli cli)))
						       (aref cli 1))))
					      (setq --cl-var-- nil)))
					  (throw '--cl-block---cl-finish---- nil)))
				     doom-cli--table))
				  --cl-var--))))
		       (if suggested
			   (doom-print
			    (doom-print--format "Did you mean %S?" suggested))
			 (doom-print
			  (doom-print--format "There are no commands defined under %S." prefix)))))
		   4)
		  (user-error
		   (doom-print
		    (doom-print--format
		     (doom-print--style 'red "Error: %s")
		     (car
		      (cdr e))))
		   (doom-print
		    (doom-print--format "\nAborting..."))
		   3))
		context))))
       (fset #'message old))))
 ((standard-output closure
		   ((streams
		     (t . #<buffer  *doom-cli stdout*>)
		     (t . #<buffer  *doom-cli stderr*>))
		    (level . t))
		   (ch)
		   (let
		       ((str
			 (char-to-string ch)))
		     (let
			 ((tail streams))
		       (while tail
			 (let
			     ((stream
			       (car tail)))
			   (if
			       (or
				(eq
				 (car stream)
				 t)
				(funcall
				 (car stream)))
			       (progn
				 (doom-print str :newline nil :stream
					     (cdr stream))))
			   (setq tail
				 (cdr tail)))))
		     (doom-print str :newline nil :stream t :level level)))))

;;;; 58
((let
     ((streamspec
       (list
	(list '>= 'notice
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of doomctxt)
		     cl-struct-doom-cli-context-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli-context doomctxt)))
		(aref doomctxt 16)))
	(cons t
	      (progn
		(or
		 (progn
		   (and
		    (memq
		     (type-of doomctxt)
		     cl-struct-doom-cli-context-tags)
		    t))
		 (signal 'wrong-type-argument
			 (list 'doom-cli-context doomctxt)))
		(aref doomctxt 17))))))
   (let
       ((standard-output
	 (doom-print--redirect-standard-output streamspec t)))
     (let*
	 ((vnew
	   (doom-print--redirect-message streamspec
					 (if noninteractive 'debug 'notice)))
	  (old
	   (symbol-function #'message)))
       (unwind-protect
	   (progn
	     (fset #'message vnew)
	     (let
		 ((doom-print--output-depth
		   (1+ doom-print--output-depth)))
	       (progn
		 (if doom-inhibit-log nil
		   (doom--log "run!: %s %s" prefix
			      (combine-and-quote-strings args)))
		 (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		 (add-hook 'kill-emacs-hook write-logs-fn 95)
		 (if
		     (doom-cli-context-pipe-p context :out t)
		     (progn
		       (setq doom-print-backend nil)))
		 (if
		     (doom-cli-context-pipe-p context :in)
		     (progn
		       (save-current-buffer
			 (set-buffer
			  (progn
			    (or
			     (progn
			       (and
				(memq
				 (type-of context)
				 cl-struct-doom-cli-context-tags)
				t))
			     (signal 'wrong-type-argument
				     (list 'doom-cli-context context)))
			    (aref context 15)))
			 (while
			     (let*
				 ((in
				   (and t
					(condition-case nil
					    (progn
					      (read-from-minibuffer ""))
					  (error nil)))))
			       (if in
				   (insert in "\n")
				 (condition-case nil
				     (progn
				       (delete-char -1))
				   (error nil))))))))
		 (doom-cli--exit
		  (condition-case e
		      (let*
			  ((args
			    (cons
			     (if
				 (getenv "__DOOMDUMP")
				 :dump prefix)
			     args))
			   (context
			    (doom-cli-context-restore
			     (getenv "__DOOMCONTEXT")
			     context))
			   (context
			    (doom-cli-context-parse args context)))
			(run-hook-with-args 'doom-cli-before-run-functions context)
			(let
			    ((result
			      (doom-cli-context-execute context)))
			  (run-hook-with-args 'doom-cli-after-run-functions context result))
			0)
		    (doom-cli-wrong-number-of-arguments-error
		     (let*
			 ((val
			   (cdr e)))
		       (progn
			 (ignore
			  (consp val))
			 (let*
			     ((x26
			       (car-safe val))
			      (x27
			       (cdr-safe val)))
			   (progn
			     (ignore
			      (consp x27))
			     (let*
				 ((x28
				   (car-safe x27))
				  (x29
				   (cdr-safe x27)))
			       (progn
				 (ignore
				  (consp x29))
				 (let*
				     ((x30
				       (car-safe x29))
				      (x31
				       (cdr-safe x29)))
				   (progn
				     (ignore
				      (consp x31))
				     (let*
					 ((x32
					   (car-safe x31))
					  (x33
					   (cdr-safe x31)))
				       (progn
					 (ignore
					  (consp x33))
					 (let*
					     ((x34
					       (car-safe x33))
					      (x35
					       (cdr-safe x33)))
					   (progn
					     (ignore
					      (null x35))
					     (let
						 ((command x26)
						  (flag x28)
						  (args x30)
						  (min x32)
						  (max x34))
					       (progn
						 (doom-print
						  (doom-print--format
						   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						   (or flag
						       (doom-cli-command-string
							(if
							    (keywordp
							     (car command))
							    command
							  (cdr command))))
						   (if
						       (or
							(= min max)
							(= max most-positive-fixnum))
						       min
						     (format "%d-%d" min max))
						   (if
						       (or
							(= min 0)
							(> min 1))
						       "s" "")
						   (length args)))
						 (doom-cli-call
						  (cons ':help
							(cons "--synopsis"
							      (cons "--postamble"
								    (cdr
								     (doom-cli--command context)))))
						  context e)))))))))))))))
		     5)
		    (doom-cli-unrecognized-option-error
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: unknown option %s")
		       (car
			(cdr e))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--synopsis"
				  (cons "--postamble"
					(cdr
					 (doom-cli--command context)))))
		      context e)
		     5)
		    (doom-cli-invalid-option-error
		     (let*
			 ((val
			   (cdr e)))
		       (progn
			 (ignore
			  (consp val))
			 (let*
			     ((x36
			       (car-safe val))
			      (x37
			       (cdr-safe val)))
			   (progn
			     (ignore
			      (consp x37))
			     (let*
				 ((x38
				   (car-safe x37))
				  (x39
				   (cdr-safe x37)))
			       (progn
				 (ignore
				  (consp x39))
				 (let*
				     ((x40
				       (car-safe x39))
				      (x41
				       (cdr-safe x39)))
				   (progn
				     (ignore
				      (consp x41))
				     (let*
					 ((x42
					   (car-safe x41))
					  (x43
					   (cdr-safe x41)))
				       (progn
					 (ignore
					  (null x43))
					 (let
					     ((types x36)
					      (option x38)
					      (value x40)
					      (errors x42))
					   (progn
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'red "Error: %s received invalid value %S")
					       (string-join
						(progn
						  (or
						   (progn
						     (and
						      (memq
						       (type-of option)
						       cl-struct-doom-cli-option-tags)
						      t))
						   (signal 'wrong-type-argument
							   (list 'doom-cli-option option)))
						  (aref option 5))
						"/")
					       value))
					     (doom-print
					      (doom-print--format
					       (doom-print--style 'bold "\nValidation errors:")))
					     (let
						 ((tail errors))
					       (while tail
						 (let
						     ((err
						       (car tail)))
						   (doom-print
						    (doom-print--format
						     (doom-print--class 'item "%s."
									(doom-print--class 'fill err))))
						   (setq tail
							 (cdr tail)))))))))))))))))
		     (doom-cli-call
		      (cons ':help
			    (cons "--postamble"
				  (cdr
				   (doom-cli--command context))))
		      context e)
		     5)
		    (doom-cli-command-not-found-error
		     (let*
			 ((command
			   (cdr e))
			  (cli
			   (doom-cli-get command)))
		       (cond
			((null cli)
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: unrecognized command '%s'")
			   (doom-cli-command-string
			    (or
			     (cdr command)
			     command))))
			 (doom-cli-call
			  (cons ':help
				(cons "--similar"
				      (cons "--postamble"
					    (cdr command))))
			  context e))
			((null
			  (progn
			    (or
			     (progn
			       (and
				(memq
				 (type-of cli)
				 cl-struct-doom-cli-tags)
				t))
			     (signal 'wrong-type-argument
				     (list 'doom-cli cli)))
			    (aref cli 9)))
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: a subcommand is required")))
			 (doom-cli-call
			  (cons ':help
				(cons "--subcommands"
				      (cons "--postamble"
					    (cdr command))))
			  context e))))
		     4)
		    (doom-cli-invalid-prefix-error
		     (let
			 ((prefix
			   (car
			    (cdr e))))
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			 prefix))
		       (let*
			   ((suggested
			     (and t
				  (let*
				      ((--cl-var-- t)
				       --cl-var--)
				    (catch '--cl-block---cl-finish----
				      (maphash
				       #'(lambda
					   (--cl-var-- cli)
					   (or
					    (if
						(progn
						  (or
						   (progn
						     (and
						      (memq
						       (type-of cli)
						       cl-struct-doom-cli-tags)
						      t))
						   (signal 'wrong-type-argument
							   (list 'doom-cli cli)))
						  (aref cli 2))
						t
					      (progn
						(setq --cl-var--
						      (car
						       (progn
							 (or
							  (progn
							    (and
							     (memq
							      (type-of cli)
							      cl-struct-doom-cli-tags)
							     t))
							  (signal 'wrong-type-argument
								  (list 'doom-cli cli)))
							 (aref cli 1))))
						(setq --cl-var-- nil)))
					    (throw '--cl-block---cl-finish---- nil)))
				       doom-cli--table))
				    --cl-var--))))
			 (if suggested
			     (doom-print
			      (doom-print--format "Did you mean %S?" suggested))
			   (doom-print
			    (doom-print--format "There are no commands defined under %S." prefix)))))
		     4)
		    (user-error
		     (doom-print
		      (doom-print--format
		       (doom-print--style 'red "Error: %s")
		       (car
			(cdr e))))
		     (doom-print
		      (doom-print--format "\nAborting..."))
		     3))
		  context))))
	 (fset #'message old)))))
 ((prefix . "doom")
  (args
   ("sync" "-e"))
  (args "sync" "-e")
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26159 55730 696713 538000)
			    83351 0
			    (118 . 16)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync" "-e")
			    (("--reload" . "--reload")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e" . "-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26159 55730 696713 538000)
				83351 0
				(118 . 16)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync" "-e")
				(("--reload" . "--reload")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e" . "-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (streamspec
   (>= notice #<buffer  *doom-cli stdout*>)
   (t . #<buffer  *doom-cli stderr*>))))

;;;; 59
((let*
     ((doomctxt context)
      (debugger
       (doom-rpartial #'doom-cli-debugger doomctxt))
      (debug-on-error t))
   (let
       ((streamspec
	 (list
	  (list '>= 'notice
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of doomctxt)
		       cl-struct-doom-cli-context-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context doomctxt)))
		  (aref doomctxt 16)))
	  (cons t
		(progn
		  (or
		   (progn
		     (and
		      (memq
		       (type-of doomctxt)
		       cl-struct-doom-cli-context-tags)
		      t))
		   (signal 'wrong-type-argument
			   (list 'doom-cli-context doomctxt)))
		  (aref doomctxt 17))))))
     (let
	 ((standard-output
	   (doom-print--redirect-standard-output streamspec t)))
       (let*
	   ((vnew
	     (doom-print--redirect-message streamspec
					   (if noninteractive 'debug 'notice)))
	    (old
	     (symbol-function #'message)))
	 (unwind-protect
	     (progn
	       (fset #'message vnew)
	       (let
		   ((doom-print--output-depth
		     (1+ doom-print--output-depth)))
		 (progn
		   (if doom-inhibit-log nil
		     (doom--log "run!: %s %s" prefix
				(combine-and-quote-strings args)))
		   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		   (add-hook 'kill-emacs-hook write-logs-fn 95)
		   (if
		       (doom-cli-context-pipe-p context :out t)
		       (progn
			 (setq doom-print-backend nil)))
		   (if
		       (doom-cli-context-pipe-p context :in)
		       (progn
			 (save-current-buffer
			   (set-buffer
			    (progn
			      (or
			       (progn
				 (and
				  (memq
				   (type-of context)
				   cl-struct-doom-cli-context-tags)
				  t))
			       (signal 'wrong-type-argument
				       (list 'doom-cli-context context)))
			      (aref context 15)))
			   (while
			       (let*
				   ((in
				     (and t
					  (condition-case nil
					      (progn
						(read-from-minibuffer ""))
					    (error nil)))))
				 (if in
				     (insert in "\n")
				   (condition-case nil
				       (progn
					 (delete-char -1))
				     (error nil))))))))
		   (doom-cli--exit
		    (condition-case e
			(let*
			    ((args
			      (cons
			       (if
				   (getenv "__DOOMDUMP")
				   :dump prefix)
			       args))
			     (context
			      (doom-cli-context-restore
			       (getenv "__DOOMCONTEXT")
			       context))
			     (context
			      (doom-cli-context-parse args context)))
			  (run-hook-with-args 'doom-cli-before-run-functions context)
			  (let
			      ((result
				(doom-cli-context-execute context)))
			    (run-hook-with-args 'doom-cli-after-run-functions context result))
			  0)
		      (doom-cli-wrong-number-of-arguments-error
		       (let*
			   ((val
			     (cdr e)))
			 (progn
			   (ignore
			    (consp val))
			   (let*
			       ((x26
				 (car-safe val))
				(x27
				 (cdr-safe val)))
			     (progn
			       (ignore
				(consp x27))
			       (let*
				   ((x28
				     (car-safe x27))
				    (x29
				     (cdr-safe x27)))
				 (progn
				   (ignore
				    (consp x29))
				   (let*
				       ((x30
					 (car-safe x29))
					(x31
					 (cdr-safe x29)))
				     (progn
				       (ignore
					(consp x31))
				       (let*
					   ((x32
					     (car-safe x31))
					    (x33
					     (cdr-safe x31)))
					 (progn
					   (ignore
					    (consp x33))
					   (let*
					       ((x34
						 (car-safe x33))
						(x35
						 (cdr-safe x33)))
					     (progn
					       (ignore
						(null x35))
					       (let
						   ((command x26)
						    (flag x28)
						    (args x30)
						    (min x32)
						    (max x34))
						 (progn
						   (doom-print
						    (doom-print--format
						     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						     (or flag
							 (doom-cli-command-string
							  (if
							      (keywordp
							       (car command))
							      command
							    (cdr command))))
						     (if
							 (or
							  (= min max)
							  (= max most-positive-fixnum))
							 min
						       (format "%d-%d" min max))
						     (if
							 (or
							  (= min 0)
							  (> min 1))
							 "s" "")
						     (length args)))
						   (doom-cli-call
						    (cons ':help
							  (cons "--synopsis"
								(cons "--postamble"
								      (cdr
								       (doom-cli--command context)))))
						    context e)))))))))))))))
		       5)
		      (doom-cli-unrecognized-option-error
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: unknown option %s")
			 (car
			  (cdr e))))
		       (doom-cli-call
			(cons ':help
			      (cons "--synopsis"
				    (cons "--postamble"
					  (cdr
					   (doom-cli--command context)))))
			context e)
		       5)
		      (doom-cli-invalid-option-error
		       (let*
			   ((val
			     (cdr e)))
			 (progn
			   (ignore
			    (consp val))
			   (let*
			       ((x36
				 (car-safe val))
				(x37
				 (cdr-safe val)))
			     (progn
			       (ignore
				(consp x37))
			       (let*
				   ((x38
				     (car-safe x37))
				    (x39
				     (cdr-safe x37)))
				 (progn
				   (ignore
				    (consp x39))
				   (let*
				       ((x40
					 (car-safe x39))
					(x41
					 (cdr-safe x39)))
				     (progn
				       (ignore
					(consp x41))
				       (let*
					   ((x42
					     (car-safe x41))
					    (x43
					     (cdr-safe x41)))
					 (progn
					   (ignore
					    (null x43))
					   (let
					       ((types x36)
						(option x38)
						(value x40)
						(errors x42))
					     (progn
					       (doom-print
						(doom-print--format
						 (doom-print--style 'red "Error: %s received invalid value %S")
						 (string-join
						  (progn
						    (or
						     (progn
						       (and
							(memq
							 (type-of option)
							 cl-struct-doom-cli-option-tags)
							t))
						     (signal 'wrong-type-argument
							     (list 'doom-cli-option option)))
						    (aref option 5))
						  "/")
						 value))
					       (doom-print
						(doom-print--format
						 (doom-print--style 'bold "\nValidation errors:")))
					       (let
						   ((tail errors))
						 (while tail
						   (let
						       ((err
							 (car tail)))
						     (doom-print
						      (doom-print--format
						       (doom-print--class 'item "%s."
									  (doom-print--class 'fill err))))
						     (setq tail
							   (cdr tail)))))))))))))))))
		       (doom-cli-call
			(cons ':help
			      (cons "--postamble"
				    (cdr
				     (doom-cli--command context))))
			context e)
		       5)
		      (doom-cli-command-not-found-error
		       (let*
			   ((command
			     (cdr e))
			    (cli
			     (doom-cli-get command)))
			 (cond
			  ((null cli)
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: unrecognized command '%s'")
			     (doom-cli-command-string
			      (or
			       (cdr command)
			       command))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--similar"
					(cons "--postamble"
					      (cdr command))))
			    context e))
			  ((null
			    (progn
			      (or
			       (progn
				 (and
				  (memq
				   (type-of cli)
				   cl-struct-doom-cli-tags)
				  t))
			       (signal 'wrong-type-argument
				       (list 'doom-cli cli)))
			      (aref cli 9)))
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: a subcommand is required")))
			   (doom-cli-call
			    (cons ':help
				  (cons "--subcommands"
					(cons "--postamble"
					      (cdr command))))
			    context e))))
		       4)
		      (doom-cli-invalid-prefix-error
		       (let
			   ((prefix
			     (car
			      (cdr e))))
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			   prefix))
			 (let*
			     ((suggested
			       (and t
				    (let*
					((--cl-var-- t)
					 --cl-var--)
				      (catch '--cl-block---cl-finish----
					(maphash
					 #'(lambda
					     (--cl-var-- cli)
					     (or
					      (if
						  (progn
						    (or
						     (progn
						       (and
							(memq
							 (type-of cli)
							 cl-struct-doom-cli-tags)
							t))
						     (signal 'wrong-type-argument
							     (list 'doom-cli cli)))
						    (aref cli 2))
						  t
						(progn
						  (setq --cl-var--
							(car
							 (progn
							   (or
							    (progn
							      (and
							       (memq
								(type-of cli)
								cl-struct-doom-cli-tags)
							       t))
							    (signal 'wrong-type-argument
								    (list 'doom-cli cli)))
							   (aref cli 1))))
						  (setq --cl-var-- nil)))
					      (throw '--cl-block---cl-finish---- nil)))
					 doom-cli--table))
				      --cl-var--))))
			   (if suggested
			       (doom-print
				(doom-print--format "Did you mean %S?" suggested))
			     (doom-print
			      (doom-print--format "There are no commands defined under %S." prefix)))))
		       4)
		      (user-error
		       (doom-print
			(doom-print--format
			 (doom-print--style 'red "Error: %s")
			 (car
			  (cdr e))))
		       (doom-print
			(doom-print--format "\nAborting..."))
		       3))
		    context))))
	   (fset #'message old))))))
 ((prefix . "doom")
  (args
   ("sync" "-e"))
  (args "sync" "-e")
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26159 55730 696713 538000)
			    83351 0
			    (118 . 16)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync" "-e")
			    (("--reload" . "--reload")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e" . "-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26159 55730 696713 538000)
				83351 0
				(118 . 16)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync" "-e")
				(("--reload" . "--reload")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e" . "-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doomctxt . #s(doom-cli-context
		 (26159 55730 696713 538000)
		 83351 0
		 (118 . 16)
		 nil nil "doom" nil nil
		 ("doom" "profiles" "sync")
		 nil
		 ("sync" "-e")
		 (("--reload" . "--reload")
		  ("-B")
		  ("--rebuild")
		  ("-b")
		  ("--jobs")
		  ("-j")
		  ("--gc")
		  ("-U")
		  ("-u")
		  ("-e" . "-e")
		  ("--eval")
		  ("-E")
		  ("--strict-load")
		  ("--load")
		  ("-L")
		  ("--color")
		  ("--benchmark")
		  ("--profile")
		  ("--pager")
		  ("--emacsdir")
		  ("--doomdir")
		  ("--verbose")
		  ("-v")
		  ("--debug")
		  ("-D")
		  ("--force")
		  ("-!"))
		 ((t)
		  (("doom" "profiles" "sync")
		   "--reload")
		  (("doom" "profiles")
		   "sync" "--reload")
		  (("doom")
		   "profiles" "sync" "--reload"))
		 #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (debugger closure
	    ((args #s(doom-cli-context
		      (26159 55730 696713 538000)
		      83351 0
		      (118 . 16)
		      nil nil "doom" nil nil
		      ("doom" "profiles" "sync")
		      nil
		      ("sync" "-e")
		      (("--reload" . "--reload")
		       ("-B")
		       ("--rebuild")
		       ("-b")
		       ("--jobs")
		       ("-j")
		       ("--gc")
		       ("-U")
		       ("-u")
		       ("-e" . "-e")
		       ("--eval")
		       ("-E")
		       ("--strict-load")
		       ("--load")
		       ("-L")
		       ("--color")
		       ("--benchmark")
		       ("--profile")
		       ("--pager")
		       ("--emacsdir")
		       ("--doomdir")
		       ("--verbose")
		       ("-v")
		       ("--debug")
		       ("-D")
		       ("--force")
		       ("-!"))
		      ((t)
		       (("doom" "profiles" "sync")
			"--reload")
		       (("doom" "profiles")
			"sync" "--reload")
		       (("doom")
			"profiles" "sync" "--reload"))
		      #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
	     (fn . doom-cli-debugger))
	    (&rest pre-args)
	    (apply fn
		   (append pre-args args)))
  (debug-on-error . t)))

;;;; 60
((let*
     ((args
       (flatten-list args))
      (context
       (make-doom-cli-context :prefix prefix :whole args))
      (doom-cli--context context)
      (write-logs-fn
       (doom-partial #'doom-cli--output-write-logs-h context))
      (show-benchmark-fn
       (doom-partial #'doom-cli--output-benchmark-h context)))
   (let*
       ((doomctxt context)
	(debugger
	 (doom-rpartial #'doom-cli-debugger doomctxt))
	(debug-on-error t))
     (let
	 ((streamspec
	   (list
	    (list '>= 'notice
		  (progn
		    (or
		     (progn
		       (and
			(memq
			 (type-of doomctxt)
			 cl-struct-doom-cli-context-tags)
			t))
		     (signal 'wrong-type-argument
			     (list 'doom-cli-context doomctxt)))
		    (aref doomctxt 16)))
	    (cons t
		  (progn
		    (or
		     (progn
		       (and
			(memq
			 (type-of doomctxt)
			 cl-struct-doom-cli-context-tags)
			t))
		     (signal 'wrong-type-argument
			     (list 'doom-cli-context doomctxt)))
		    (aref doomctxt 17))))))
       (let
	   ((standard-output
	     (doom-print--redirect-standard-output streamspec t)))
	 (let*
	     ((vnew
	       (doom-print--redirect-message streamspec
					     (if noninteractive 'debug 'notice)))
	      (old
	       (symbol-function #'message)))
	   (unwind-protect
	       (progn
		 (fset #'message vnew)
		 (let
		     ((doom-print--output-depth
		       (1+ doom-print--output-depth)))
		   (progn
		     (if doom-inhibit-log nil
		       (doom--log "run!: %s %s" prefix
				  (combine-and-quote-strings args)))
		     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		     (add-hook 'kill-emacs-hook write-logs-fn 95)
		     (if
			 (doom-cli-context-pipe-p context :out t)
			 (progn
			   (setq doom-print-backend nil)))
		     (if
			 (doom-cli-context-pipe-p context :in)
			 (progn
			   (save-current-buffer
			     (set-buffer
			      (progn
				(or
				 (progn
				   (and
				    (memq
				     (type-of context)
				     cl-struct-doom-cli-context-tags)
				    t))
				 (signal 'wrong-type-argument
					 (list 'doom-cli-context context)))
				(aref context 15)))
			     (while
				 (let*
				     ((in
				       (and t
					    (condition-case nil
						(progn
						  (read-from-minibuffer ""))
					      (error nil)))))
				   (if in
				       (insert in "\n")
				     (condition-case nil
					 (progn
					   (delete-char -1))
				       (error nil))))))))
		     (doom-cli--exit
		      (condition-case e
			  (let*
			      ((args
				(cons
				 (if
				     (getenv "__DOOMDUMP")
				     :dump prefix)
				 args))
			       (context
				(doom-cli-context-restore
				 (getenv "__DOOMCONTEXT")
				 context))
			       (context
				(doom-cli-context-parse args context)))
			    (run-hook-with-args 'doom-cli-before-run-functions context)
			    (let
				((result
				  (doom-cli-context-execute context)))
			      (run-hook-with-args 'doom-cli-after-run-functions context result))
			    0)
			(doom-cli-wrong-number-of-arguments-error
			 (let*
			     ((val
			       (cdr e)))
			   (progn
			     (ignore
			      (consp val))
			     (let*
				 ((x26
				   (car-safe val))
				  (x27
				   (cdr-safe val)))
			       (progn
				 (ignore
				  (consp x27))
				 (let*
				     ((x28
				       (car-safe x27))
				      (x29
				       (cdr-safe x27)))
				   (progn
				     (ignore
				      (consp x29))
				     (let*
					 ((x30
					   (car-safe x29))
					  (x31
					   (cdr-safe x29)))
				       (progn
					 (ignore
					  (consp x31))
					 (let*
					     ((x32
					       (car-safe x31))
					      (x33
					       (cdr-safe x31)))
					   (progn
					     (ignore
					      (consp x33))
					     (let*
						 ((x34
						   (car-safe x33))
						  (x35
						   (cdr-safe x33)))
					       (progn
						 (ignore
						  (null x35))
						 (let
						     ((command x26)
						      (flag x28)
						      (args x30)
						      (min x32)
						      (max x34))
						   (progn
						     (doom-print
						      (doom-print--format
						       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
						       (or flag
							   (doom-cli-command-string
							    (if
								(keywordp
								 (car command))
								command
							      (cdr command))))
						       (if
							   (or
							    (= min max)
							    (= max most-positive-fixnum))
							   min
							 (format "%d-%d" min max))
						       (if
							   (or
							    (= min 0)
							    (> min 1))
							   "s" "")
						       (length args)))
						     (doom-cli-call
						      (cons ':help
							    (cons "--synopsis"
								  (cons "--postamble"
									(cdr
									 (doom-cli--command context)))))
						      context e)))))))))))))))
			 5)
			(doom-cli-unrecognized-option-error
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: unknown option %s")
			   (car
			    (cdr e))))
			 (doom-cli-call
			  (cons ':help
				(cons "--synopsis"
				      (cons "--postamble"
					    (cdr
					     (doom-cli--command context)))))
			  context e)
			 5)
			(doom-cli-invalid-option-error
			 (let*
			     ((val
			       (cdr e)))
			   (progn
			     (ignore
			      (consp val))
			     (let*
				 ((x36
				   (car-safe val))
				  (x37
				   (cdr-safe val)))
			       (progn
				 (ignore
				  (consp x37))
				 (let*
				     ((x38
				       (car-safe x37))
				      (x39
				       (cdr-safe x37)))
				   (progn
				     (ignore
				      (consp x39))
				     (let*
					 ((x40
					   (car-safe x39))
					  (x41
					   (cdr-safe x39)))
				       (progn
					 (ignore
					  (consp x41))
					 (let*
					     ((x42
					       (car-safe x41))
					      (x43
					       (cdr-safe x41)))
					   (progn
					     (ignore
					      (null x43))
					     (let
						 ((types x36)
						  (option x38)
						  (value x40)
						  (errors x42))
					       (progn
						 (doom-print
						  (doom-print--format
						   (doom-print--style 'red "Error: %s received invalid value %S")
						   (string-join
						    (progn
						      (or
						       (progn
							 (and
							  (memq
							   (type-of option)
							   cl-struct-doom-cli-option-tags)
							  t))
						       (signal 'wrong-type-argument
							       (list 'doom-cli-option option)))
						      (aref option 5))
						    "/")
						   value))
						 (doom-print
						  (doom-print--format
						   (doom-print--style 'bold "\nValidation errors:")))
						 (let
						     ((tail errors))
						   (while tail
						     (let
							 ((err
							   (car tail)))
						       (doom-print
							(doom-print--format
							 (doom-print--class 'item "%s."
									    (doom-print--class 'fill err))))
						       (setq tail
							     (cdr tail)))))))))))))))))
			 (doom-cli-call
			  (cons ':help
				(cons "--postamble"
				      (cdr
				       (doom-cli--command context))))
			  context e)
			 5)
			(doom-cli-command-not-found-error
			 (let*
			     ((command
			       (cdr e))
			      (cli
			       (doom-cli-get command)))
			   (cond
			    ((null cli)
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: unrecognized command '%s'")
			       (doom-cli-command-string
				(or
				 (cdr command)
				 command))))
			     (doom-cli-call
			      (cons ':help
				    (cons "--similar"
					  (cons "--postamble"
						(cdr command))))
			      context e))
			    ((null
			      (progn
				(or
				 (progn
				   (and
				    (memq
				     (type-of cli)
				     cl-struct-doom-cli-tags)
				    t))
				 (signal 'wrong-type-argument
					 (list 'doom-cli cli)))
				(aref cli 9)))
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: a subcommand is required")))
			     (doom-cli-call
			      (cons ':help
				    (cons "--subcommands"
					  (cons "--postamble"
						(cdr command))))
			      context e))))
			 4)
			(doom-cli-invalid-prefix-error
			 (let
			     ((prefix
			       (car
				(cdr e))))
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			     prefix))
			   (let*
			       ((suggested
				 (and t
				      (let*
					  ((--cl-var-- t)
					   --cl-var--)
					(catch '--cl-block---cl-finish----
					  (maphash
					   #'(lambda
					       (--cl-var-- cli)
					       (or
						(if
						    (progn
						      (or
						       (progn
							 (and
							  (memq
							   (type-of cli)
							   cl-struct-doom-cli-tags)
							  t))
						       (signal 'wrong-type-argument
							       (list 'doom-cli cli)))
						      (aref cli 2))
						    t
						  (progn
						    (setq --cl-var--
							  (car
							   (progn
							     (or
							      (progn
								(and
								 (memq
								  (type-of cli)
								  cl-struct-doom-cli-tags)
								 t))
							      (signal 'wrong-type-argument
								      (list 'doom-cli cli)))
							     (aref cli 1))))
						    (setq --cl-var-- nil)))
						(throw '--cl-block---cl-finish---- nil)))
					   doom-cli--table))
					--cl-var--))))
			     (if suggested
				 (doom-print
				  (doom-print--format "Did you mean %S?" suggested))
			       (doom-print
				(doom-print--format "There are no commands defined under %S." prefix)))))
			 4)
			(user-error
			 (doom-print
			  (doom-print--format
			   (doom-print--style 'red "Error: %s")
			   (car
			    (cdr e))))
			 (doom-print
			  (doom-print--format "\nAborting..."))
			 3))
		      context))))
	     (fset #'message old)))))))
 ((prefix . "doom")
  (args
   ("sync" "-e"))
  (args "sync" "-e")
  (context . #s(doom-cli-context
		(26159 55730 696713 538000)
		83351 0
		(118 . 16)
		nil nil "doom" nil nil
		("doom" "profiles" "sync")
		nil
		("sync" "-e")
		(("--reload" . "--reload")
		 ("-B")
		 ("--rebuild")
		 ("-b")
		 ("--jobs")
		 ("-j")
		 ("--gc")
		 ("-U")
		 ("-u")
		 ("-e" . "-e")
		 ("--eval")
		 ("-E")
		 ("--strict-load")
		 ("--load")
		 ("-L")
		 ("--color")
		 ("--benchmark")
		 ("--profile")
		 ("--pager")
		 ("--emacsdir")
		 ("--doomdir")
		 ("--verbose")
		 ("-v")
		 ("--debug")
		 ("-D")
		 ("--force")
		 ("-!"))
		((t)
		 (("doom" "profiles" "sync")
		  "--reload")
		 (("doom" "profiles")
		  "sync" "--reload")
		 (("doom")
		  "profiles" "sync" "--reload"))
		#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
		 #[128 "\302\301\303\300\4\"\"\207"
		       [(#s(doom-cli-context
			    (26159 55730 696713 538000)
			    83351 0
			    (118 . 16)
			    nil nil "doom" nil nil
			    ("doom" "profiles" "sync")
			    nil
			    ("sync" "-e")
			    (("--reload" . "--reload")
			     ("-B")
			     ("--rebuild")
			     ("-b")
			     ("--jobs")
			     ("-j")
			     ("--gc")
			     ("-U")
			     ("-u")
			     ("-e" . "-e")
			     ("--eval")
			     ("-E")
			     ("--strict-load")
			     ("--load")
			     ("-L")
			     ("--color")
			     ("--benchmark")
			     ("--profile")
			     ("--pager")
			     ("--emacsdir")
			     ("--doomdir")
			     ("--verbose")
			     ("-v")
			     ("--debug")
			     ("-D")
			     ("--force")
			     ("-!"))
			    ((t)
			     (("doom" "profiles" "sync")
			      "--reload")
			     (("doom" "profiles")
			      "sync" "--reload")
			     (("doom")
			      "profiles" "sync" "--reload"))
			    #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			doom-cli--output-write-logs-h apply append]
		       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
		     #[128 "\302\301\303\300\4\"\"\207"
			   [(#s(doom-cli-context
				(26159 55730 696713 538000)
				83351 0
				(118 . 16)
				nil nil "doom" nil nil
				("doom" "profiles" "sync")
				nil
				("sync" "-e")
				(("--reload" . "--reload")
				 ("-B")
				 ("--rebuild")
				 ("-b")
				 ("--jobs")
				 ("-j")
				 ("--gc")
				 ("-U")
				 ("-u")
				 ("-e" . "-e")
				 ("--eval")
				 ("-E")
				 ("--strict-load")
				 ("--load")
				 ("-L")
				 ("--color")
				 ("--benchmark")
				 ("--profile")
				 ("--pager")
				 ("--emacsdir")
				 ("--doomdir")
				 ("--verbose")
				 ("-v")
				 ("--debug")
				 ("-D")
				 ("--force")
				 ("-!"))
				((t)
				 (("doom" "profiles" "sync")
				  "--reload")
				 (("doom" "profiles")
				  "sync" "--reload")
				 (("doom")
				  "profiles" "sync" "--reload"))
				#<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
			    doom-cli--output-benchmark-h apply append]
			   6 "\n\n(fn &rest ARGS2)"])
  (doom-cli--context . #s(doom-cli-context
			  (26159 55730 696713 538000)
			  83351 0
			  (118 . 16)
			  nil nil "doom" nil nil
			  ("doom" "profiles" "sync")
			  nil
			  ("sync" "-e")
			  (("--reload" . "--reload")
			   ("-B")
			   ("--rebuild")
			   ("-b")
			   ("--jobs")
			   ("-j")
			   ("--gc")
			   ("-U")
			   ("-u")
			   ("-e" . "-e")
			   ("--eval")
			   ("-E")
			   ("--strict-load")
			   ("--load")
			   ("-L")
			   ("--color")
			   ("--benchmark")
			   ("--profile")
			   ("--pager")
			   ("--emacsdir")
			   ("--doomdir")
			   ("--verbose")
			   ("-v")
			   ("--debug")
			   ("-D")
			   ("--force")
			   ("-!"))
			  ((t)
			   (("doom" "profiles" "sync")
			    "--reload")
			   (("doom" "profiles")
			    "sync" "--reload")
			   (("doom")
			    "profiles" "sync" "--reload"))
			  #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 61
((let
     ((doom-context doom-context))
   (let
       ((tail
	 (ensure-list 'cli)))
     (while tail
       (let
	   ((context
	     (car tail)))
	 (doom-context-push context)
	 (setq tail
	       (cdr tail)))))
   (let*
       ((args
	 (flatten-list args))
	(context
	 (make-doom-cli-context :prefix prefix :whole args))
	(doom-cli--context context)
	(write-logs-fn
	 (doom-partial #'doom-cli--output-write-logs-h context))
	(show-benchmark-fn
	 (doom-partial #'doom-cli--output-benchmark-h context)))
     (let*
	 ((doomctxt context)
	  (debugger
	   (doom-rpartial #'doom-cli-debugger doomctxt))
	  (debug-on-error t))
       (let
	   ((streamspec
	     (list
	      (list '>= 'notice
		    (progn
		      (or
		       (progn
			 (and
			  (memq
			   (type-of doomctxt)
			   cl-struct-doom-cli-context-tags)
			  t))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context doomctxt)))
		      (aref doomctxt 16)))
	      (cons t
		    (progn
		      (or
		       (progn
			 (and
			  (memq
			   (type-of doomctxt)
			   cl-struct-doom-cli-context-tags)
			  t))
		       (signal 'wrong-type-argument
			       (list 'doom-cli-context doomctxt)))
		      (aref doomctxt 17))))))
	 (let
	     ((standard-output
	       (doom-print--redirect-standard-output streamspec t)))
	   (let*
	       ((vnew
		 (doom-print--redirect-message streamspec
					       (if noninteractive 'debug 'notice)))
		(old
		 (symbol-function #'message)))
	     (unwind-protect
		 (progn
		   (fset #'message vnew)
		   (let
		       ((doom-print--output-depth
			 (1+ doom-print--output-depth)))
		     (progn
		       (if doom-inhibit-log nil
			 (doom--log "run!: %s %s" prefix
				    (combine-and-quote-strings args)))
		       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
		       (add-hook 'kill-emacs-hook write-logs-fn 95)
		       (if
			   (doom-cli-context-pipe-p context :out t)
			   (progn
			     (setq doom-print-backend nil)))
		       (if
			   (doom-cli-context-pipe-p context :in)
			   (progn
			     (save-current-buffer
			       (set-buffer
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of context)
				       cl-struct-doom-cli-context-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli-context context)))
				  (aref context 15)))
			       (while
				   (let*
				       ((in
					 (and t
					      (condition-case nil
						  (progn
						    (read-from-minibuffer ""))
						(error nil)))))
				     (if in
					 (insert in "\n")
				       (condition-case nil
					   (progn
					     (delete-char -1))
					 (error nil))))))))
		       (doom-cli--exit
			(condition-case e
			    (let*
				((args
				  (cons
				   (if
				       (getenv "__DOOMDUMP")
				       :dump prefix)
				   args))
				 (context
				  (doom-cli-context-restore
				   (getenv "__DOOMCONTEXT")
				   context))
				 (context
				  (doom-cli-context-parse args context)))
			      (run-hook-with-args 'doom-cli-before-run-functions context)
			      (let
				  ((result
				    (doom-cli-context-execute context)))
				(run-hook-with-args 'doom-cli-after-run-functions context result))
			      0)
			  (doom-cli-wrong-number-of-arguments-error
			   (let*
			       ((val
				 (cdr e)))
			     (progn
			       (ignore
				(consp val))
			       (let*
				   ((x26
				     (car-safe val))
				    (x27
				     (cdr-safe val)))
				 (progn
				   (ignore
				    (consp x27))
				   (let*
				       ((x28
					 (car-safe x27))
					(x29
					 (cdr-safe x27)))
				     (progn
				       (ignore
					(consp x29))
				       (let*
					   ((x30
					     (car-safe x29))
					    (x31
					     (cdr-safe x29)))
					 (progn
					   (ignore
					    (consp x31))
					   (let*
					       ((x32
						 (car-safe x31))
						(x33
						 (cdr-safe x31)))
					     (progn
					       (ignore
						(consp x33))
					       (let*
						   ((x34
						     (car-safe x33))
						    (x35
						     (cdr-safe x33)))
						 (progn
						   (ignore
						    (null x35))
						   (let
						       ((command x26)
							(flag x28)
							(args x30)
							(min x32)
							(max x34))
						     (progn
						       (doom-print
							(doom-print--format
							 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
							 (or flag
							     (doom-cli-command-string
							      (if
								  (keywordp
								   (car command))
								  command
								(cdr command))))
							 (if
							     (or
							      (= min max)
							      (= max most-positive-fixnum))
							     min
							   (format "%d-%d" min max))
							 (if
							     (or
							      (= min 0)
							      (> min 1))
							     "s" "")
							 (length args)))
						       (doom-cli-call
							(cons ':help
							      (cons "--synopsis"
								    (cons "--postamble"
									  (cdr
									   (doom-cli--command context)))))
							context e)))))))))))))))
			   5)
			  (doom-cli-unrecognized-option-error
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: unknown option %s")
			     (car
			      (cdr e))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--synopsis"
					(cons "--postamble"
					      (cdr
					       (doom-cli--command context)))))
			    context e)
			   5)
			  (doom-cli-invalid-option-error
			   (let*
			       ((val
				 (cdr e)))
			     (progn
			       (ignore
				(consp val))
			       (let*
				   ((x36
				     (car-safe val))
				    (x37
				     (cdr-safe val)))
				 (progn
				   (ignore
				    (consp x37))
				   (let*
				       ((x38
					 (car-safe x37))
					(x39
					 (cdr-safe x37)))
				     (progn
				       (ignore
					(consp x39))
				       (let*
					   ((x40
					     (car-safe x39))
					    (x41
					     (cdr-safe x39)))
					 (progn
					   (ignore
					    (consp x41))
					   (let*
					       ((x42
						 (car-safe x41))
						(x43
						 (cdr-safe x41)))
					     (progn
					       (ignore
						(null x43))
					       (let
						   ((types x36)
						    (option x38)
						    (value x40)
						    (errors x42))
						 (progn
						   (doom-print
						    (doom-print--format
						     (doom-print--style 'red "Error: %s received invalid value %S")
						     (string-join
						      (progn
							(or
							 (progn
							   (and
							    (memq
							     (type-of option)
							     cl-struct-doom-cli-option-tags)
							    t))
							 (signal 'wrong-type-argument
								 (list 'doom-cli-option option)))
							(aref option 5))
						      "/")
						     value))
						   (doom-print
						    (doom-print--format
						     (doom-print--style 'bold "\nValidation errors:")))
						   (let
						       ((tail errors))
						     (while tail
						       (let
							   ((err
							     (car tail)))
							 (doom-print
							  (doom-print--format
							   (doom-print--class 'item "%s."
									      (doom-print--class 'fill err))))
							 (setq tail
							       (cdr tail)))))))))))))))))
			   (doom-cli-call
			    (cons ':help
				  (cons "--postamble"
					(cdr
					 (doom-cli--command context))))
			    context e)
			   5)
			  (doom-cli-command-not-found-error
			   (let*
			       ((command
				 (cdr e))
				(cli
				 (doom-cli-get command)))
			     (cond
			      ((null cli)
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red "Error: unrecognized command '%s'")
				 (doom-cli-command-string
				  (or
				   (cdr command)
				   command))))
			       (doom-cli-call
				(cons ':help
				      (cons "--similar"
					    (cons "--postamble"
						  (cdr command))))
				context e))
			      ((null
				(progn
				  (or
				   (progn
				     (and
				      (memq
				       (type-of cli)
				       cl-struct-doom-cli-tags)
				      t))
				   (signal 'wrong-type-argument
					   (list 'doom-cli cli)))
				  (aref cli 9)))
			       (doom-print
				(doom-print--format
				 (doom-print--style 'red "Error: a subcommand is required")))
			       (doom-cli-call
				(cons ':help
				      (cons "--subcommands"
					    (cons "--postamble"
						  (cdr command))))
				context e))))
			   4)
			  (doom-cli-invalid-prefix-error
			   (let
			       ((prefix
				 (car
				  (cdr e))))
			     (doom-print
			      (doom-print--format
			       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
			       prefix))
			     (let*
				 ((suggested
				   (and t
					(let*
					    ((--cl-var-- t)
					     --cl-var--)
					  (catch '--cl-block---cl-finish----
					    (maphash
					     #'(lambda
						 (--cl-var-- cli)
						 (or
						  (if
						      (progn
							(or
							 (progn
							   (and
							    (memq
							     (type-of cli)
							     cl-struct-doom-cli-tags)
							    t))
							 (signal 'wrong-type-argument
								 (list 'doom-cli cli)))
							(aref cli 2))
						      t
						    (progn
						      (setq --cl-var--
							    (car
							     (progn
							       (or
								(progn
								  (and
								   (memq
								    (type-of cli)
								    cl-struct-doom-cli-tags)
								   t))
								(signal 'wrong-type-argument
									(list 'doom-cli cli)))
							       (aref cli 1))))
						      (setq --cl-var-- nil)))
						  (throw '--cl-block---cl-finish---- nil)))
					     doom-cli--table))
					  --cl-var--))))
			       (if suggested
				   (doom-print
				    (doom-print--format "Did you mean %S?" suggested))
				 (doom-print
				  (doom-print--format "There are no commands defined under %S." prefix)))))
			   4)
			  (user-error
			   (doom-print
			    (doom-print--format
			     (doom-print--style 'red "Error: %s")
			     (car
			      (cdr e))))
			   (doom-print
			    (doom-print--format "\nAborting..."))
			   3))
			context))))
	       (fset #'message old))))))))
 ((doom-context cli t)))

;;;; 62
((run! "doom"
       ("sync" "-e"))
 ((prefix . "doom")
  (args
   ("sync" "-e"))))

;;;; 63
((load-with-code-conversion "/home/fatihyaman/.config/emacs/bin/doom" "/home/fatihyaman/.config/emacs/bin/doom" nil t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "/home/fatihyaman/.config/emacs/bin/doom")
  (load-true-file-name . "/home/fatihyaman/.config/emacs/bin/doom")
  (read-symbol-shorthands)
  (eval-buffer-list #<buffer  *load*>)
  (standard-output)
  (lexical-binding)
  (standard-input . #<buffer  *load*>)
  (macroexp--dynvars)
  (current-load-list
   (require . finder-inf)
   (require . info)
   (require . package)
   (require . straight)
   "/home/fatihyaman/.config/emacs/bin/doom")))

;;;; 64
((command-line-1
  ("--load" "/home/fatihyaman/.config/emacs/bin/doom" "--" "sync" "-e"))
 ((command-line-args-left "--" "sync" "-e")
  (argi . "-load")
  (lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 65
((command-line)
 nil)

;;;; 66
((normal-top-level)
 nil)

