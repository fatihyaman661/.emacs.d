
:tanat

"29.3"

#s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("org-elpa" ("2024-04-29 23:39:01" nil (:local-repo nil :package "org-elpa" :type git)) "melpa" ("2024-04-29 23:39:01" nil (:type git :host github :repo "melpa/melpa" :build nil :package "melpa" :local-repo "melpa")) "nongnu-elpa" ("2024-04-29 23:39:01" nil (:type git :repo "https://git.savannah.gnu.org/git/emacs/nongnu.git" :local-repo "nongnu-elpa" :build nil :package "nongnu-elpa")) "gnu-elpa-mirror" ("2024-04-29 23:39:01" nil (:type git :host github :repo "emacs-straight/gnu-elpa-mirror" :build nil :package "gnu-elpa-mirror" :local-repo "gnu-elpa-mirror")) "el-get" ("2024-04-29 23:39:01" nil (:type git :host github :repo "dimitri/el-get" :build nil :files ("*.el" ("recipes" "recipes/el-get.rcp") "methods" "el-get-pkg.el") :flavor melpa :package "el-get" :local-repo "el-get")) "emacsmirror-mirror" ("2024-04-29 23:39:01" nil (:type git :host github :repo "emacs-straight/emacsmirror-mirror" :build nil :package "emacsmirror-mirror" :local-repo "emacsmirror-mirror")) "straight" ("2024-04-29 23:39:01" ("emacs") (:host github :repo "radian-software/straight.el" :branch "develop" :local-repo "straight.el" :files ("straight*.el") :package "straight" :type git)) "link-hint" ("2024-04-29 23:39:01" ("avy" "emacs") (:type git :flavor melpa :host github :repo "noctuid/link-hint.el" :package "link-hint" :local-repo "link-hint.el")) "avy" ("2024-04-29 23:39:01" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "abo-abo/avy" :package "avy" :local-repo "avy")) "drag-stuff" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "rejeep/drag-stuff.el" :package "drag-stuff" :local-repo "drag-stuff.el")) "company-shell" ("2024-04-29 23:39:01" ("emacs" "company" "dash" "cl-lib") (:type git :flavor melpa :host github :repo "Alexander-Miller/company-shell" :package "company-shell" :local-repo "company-shell")) "company" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files (:defaults "icons" ("images/small" "doc/images/small/*.png") "company-pkg.el") :host github :repo "company-mode/company-mode" :package "company" :local-repo "company-mode")) "dash" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el" :package "dash" :local-repo "dash.el")) "ob-async" ("2024-04-29 23:39:01" ("async" "org" "emacs" "dash") (:type git :flavor melpa :host github :repo "astahlman/ob-async" :package "ob-async" :local-repo "ob-async")) "async" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "jwiegley/emacs-async" :package "async" :local-repo "emacs-async")) "org" ("2024-04-29 23:39:01" ("emacs") (:host github :repo "emacs-straight/org-mode" :files (:defaults "etc") :depth 1 :build t :pre-build (progn (with-temp-file "org-loaddefs.el") (with-temp-file "org-version.el" (let ((version (with-temp-buffer (insert-file-contents (doom-path "lisp/org.el") nil 0 1024) (if (re-search-forward "^;; Version: \\([^
-]+\\)" nil t) (match-string-no-properties 1) "Unknown")))) (insert (format "(defun org-release () %S)
" version) (format "(defun org-git-version (&rest _) \"%s-??-%s\")
" version (cdr (doom-call-process "git" "rev-parse" "--short" "HEAD"))) "(provide 'org-version)
")))) :local-repo "org" :package "org" :type git)) "orgit" ("2024-04-29 23:39:01" ("emacs" "compat" "magit" "org") (:type git :flavor melpa :host github :repo "magit/orgit" :package "orgit" :local-repo "orgit")) "compat" ("2024-04-29 23:39:01" ("emacs" "seq") (:host github :repo "emacs-compat/compat" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "compat" :type git :local-repo "compat")) "seq" ("2024-04-29 23:39:01" nil (:type git :host github :repo "emacs-straight/seq" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "seq" :local-repo "seq")) "magit" ("2024-04-29 23:39:01" ("emacs" "compat" "dash" "git-commit" "magit-section" "seq" "transient" "with-editor") (:flavor melpa :files ("lisp/magit*.el" "lisp/git-rebase.el" "docs/magit.texi" "docs/AUTHORS.md" "LICENSE" "Documentation/magit.texi" "Documentation/AUTHORS.md" (:exclude "lisp/magit-libgit.el" "lisp/magit-libgit-pkg.el" "lisp/magit-section.el" "lisp/magit-section-pkg.el") "magit-pkg.el") :package "magit" :local-repo "magit" :type git :repo "magit/magit" :host github)) "git-commit" ("2024-04-29 23:39:01" ("emacs" "compat" "transient" "with-editor") (:flavor melpa :files ("lisp/git-commit.el" "lisp/git-commit-pkg.el" "git-commit-pkg.el") :package "git-commit" :local-repo "magit" :type git :repo "magit/magit" :host github)) "transient" ("2024-04-29 23:39:01" ("emacs" "compat" "seq") (:type git :flavor melpa :host github :repo "magit/transient" :package "transient" :local-repo "transient")) "with-editor" ("2024-04-29 23:39:01" ("emacs" "compat") (:type git :flavor melpa :host github :repo "magit/with-editor" :package "with-editor" :local-repo "with-editor")) "magit-section" ("2024-04-29 23:39:01" ("emacs" "compat" "dash") (:type git :flavor melpa :files ("lisp/magit-section.el" "lisp/magit-section-pkg.el" "docs/magit-section.texi" "Documentation/magit-section.texi" "magit-section-pkg.el") :host github :repo "magit/magit" :package "magit-section" :local-repo "magit")) "org-cliplink" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "rexim/org-cliplink" :package "org-cliplink" :local-repo "org-cliplink")) "toc-org" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "snosov1/toc-org" :package "toc-org" :local-repo "toc-org")) "ox-clip" ("2024-04-29 23:39:01" ("org" "htmlize") (:type git :flavor melpa :host github :repo "jkitchin/ox-clip" :package "ox-clip" :local-repo "ox-clip")) "htmlize" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "hniksic/emacs-htmlize" :package "htmlize" :local-repo "emacs-htmlize")) "org-yt" ("2024-04-29 23:39:01" nil (:host github :repo "TobiasZawada/org-yt" :package "org-yt" :type git :local-repo "org-yt")) "org-contrib" ("2024-04-29 23:39:01" ("emacs" "org") (:host github :repo "emacsmirror/org-contrib" :files (:defaults "lisp/*.el") :package "org-contrib" :type git :local-repo "org-contrib")) "edit-indirect" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/edit-indirect" :package "edit-indirect" :local-repo "edit-indirect")) "markdown-toc" ("2024-04-29 23:39:01" ("s" "dash" "markdown-mode") (:type git :flavor melpa :host github :repo "ardumont/markdown-toc" :package "markdown-toc" :local-repo "markdown-toc")) "s" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "magnars/s.el" :package "s" :local-repo "s.el")) "markdown-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "jrblevin/markdown-mode" :package "markdown-mode" :local-repo "markdown-mode")) "buttercup" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup" :package "buttercup" :local-repo "emacs-buttercup")) "flycheck-cask" ("2024-04-29 23:39:01" ("emacs" "flycheck" "dash") (:type git :flavor melpa :host github :repo "flycheck/flycheck-cask" :package "flycheck-cask" :local-repo "flycheck-cask")) "flycheck" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck" :package "flycheck" :local-repo "flycheck")) "flycheck-package" ("2024-04-29 23:39:01" ("emacs" "flycheck" "package-lint") (:type git :flavor melpa :host github :repo "purcell/flycheck-package" :package "flycheck-package" :local-repo "flycheck-package")) "package-lint" ("2024-04-29 23:39:01" ("emacs" "let-alist") (:type git :flavor melpa :files (:defaults "data" (:exclude "*flymake.el") "package-lint-pkg.el") :host github :repo "purcell/package-lint" :package "package-lint" :local-repo "package-lint")) "elisp-demos" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos" :package "elisp-demos" :local-repo "elisp-demos")) "elisp-def" ("2024-04-29 23:39:01" ("dash" "f" "s" "emacs") (:type git :flavor melpa :host github :repo "Wilfred/elisp-def" :package "elisp-def" :local-repo "elisp-def")) "f" ("2024-04-29 23:39:01" ("emacs" "s" "dash") (:type git :flavor melpa :host github :repo "rejeep/f.el" :package "f" :local-repo "f.el")) "overseer" ("2024-04-29 23:39:01" ("emacs" "dash" "pkg-info" "f") (:type git :flavor melpa :host github :repo "tonini/overseer.el" :package "overseer" :local-repo "overseer.el")) "pkg-info" ("2024-04-29 23:39:01" ("epl") (:type git :flavor melpa :host github :repo "emacsorphanage/pkg-info" :package "pkg-info" :local-repo "pkg-info")) "epl" ("2024-04-29 23:39:01" ("cl-lib") (:type git :flavor melpa :host github :repo "cask/epl" :package "epl" :local-repo "epl")) "macrostep" ("2024-04-29 23:39:01" ("cl-lib") (:type git :flavor melpa :host github :repo "emacsorphanage/macrostep" :package "macrostep" :local-repo "macrostep")) "highlight-quoted" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/highlight-quoted" :package "highlight-quoted" :local-repo "highlight-quoted")) "magit-todos" ("2024-04-29 23:39:01" ("emacs" "async" "dash" "f" "hl-todo" "magit" "pcre2el" "s" "transient") (:type git :flavor melpa :host github :repo "alphapapa/magit-todos" :package "magit-todos" :local-repo "magit-todos")) "hl-todo" ("2024-04-29 23:39:01" ("emacs" "compat") (:type git :flavor melpa :host github :repo "tarsius/hl-todo" :package "hl-todo" :local-repo "hl-todo")) "pcre2el" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "joddie/pcre2el" :package "pcre2el" :local-repo "pcre2el")) "request" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request" :package "request" :local-repo "emacs-request")) "dumb-jump" ("2024-04-29 23:39:01" ("emacs" "s" "dash" "popup") (:type git :flavor melpa :host github :repo "jacktasia/dumb-jump" :package "dumb-jump" :local-repo "dumb-jump")) "popup" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "auto-complete/popup-el" :package "popup" :local-repo "popup-el")) "eros" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "xiongtx/eros" :package "eros" :local-repo "eros")) "quickrun" ("2024-04-29 23:39:01" ("emacs" "ht") (:type git :flavor melpa :host github :repo "emacsorphanage/quickrun" :package "quickrun" :local-repo "quickrun")) "ht" ("2024-04-29 23:39:01" ("dash") (:type git :flavor melpa :host github :repo "Wilfred/ht.el" :package "ht" :local-repo "ht.el")) "flycheck-popup-tip" ("2024-04-29 23:39:01" ("flycheck" "popup" "emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip" :package "flycheck-popup-tip" :local-repo "flycheck-popup-tip")) "git-modes" ("2024-04-29 23:39:01" ("emacs" "compat") (:type git :flavor melpa :host github :repo "magit/git-modes" :package "git-modes" :local-repo "git-modes")) "git-timemachine" ("2024-04-29 23:39:01" ("emacs" "transient") (:host github :repo "emacsmirror/git-timemachine" :flavor melpa :package "git-timemachine" :type git :local-repo "git-timemachine")) "browse-at-remote" ("2024-04-29 23:39:01" ("f" "s" "cl-lib") (:type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote" :package "browse-at-remote" :local-repo "browse-at-remote")) "vundo" ("2024-04-29 23:39:01" ("emacs") (:type git :host github :repo "emacs-straight/vundo" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "vundo" :local-repo "vundo")) "undo-fu-session" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host codeberg :repo "ideasman42/emacs-undo-fu-session" :package "undo-fu-session" :local-repo "emacs-undo-fu-session")) "undo-fu" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host codeberg :repo "ideasman42/emacs-undo-fu" :package "undo-fu" :local-repo "emacs-undo-fu")) "fd-dired" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "yqrashawn/fd-dired" :package "fd-dired" :local-repo "fd-dired")) "dired-rsync" ("2024-04-29 23:39:01" ("s" "dash" "emacs") (:type git :flavor melpa :files ("dired-rsync.el" "dired-rsync-pkg.el") :host github :repo "stsquad/dired-rsync" :package "dired-rsync" :local-repo "dired-rsync")) "dired-git-info" ("2024-04-29 23:39:01" ("emacs") (:type git :host github :repo "emacs-straight/dired-git-info" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "dired-git-info" :local-repo "dired-git-info")) "diredfl" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "purcell/diredfl" :package "diredfl" :local-repo "diredfl")) "doom-snippets" ("2024-04-29 23:39:01" ("emacs" "cl-lib" "yasnippet") (:host github :repo "doomemacs/snippets" :files (:defaults "*") :package "doom-snippets" :type git :local-repo "snippets")) "yasnippet" ("2024-04-29 23:39:01" ("cl-lib" "emacs") (:type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet" :package "yasnippet" :local-repo "yasnippet")) "auto-yasnippet" ("2024-04-29 23:39:01" ("yasnippet" "emacs") (:type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet" :package "auto-yasnippet" :local-repo "auto-yasnippet")) "vimish-fold" ("2024-04-29 23:39:01" ("emacs" "cl-lib" "f") (:type git :flavor melpa :host github :repo "matsievskiysv/vimish-fold" :package "vimish-fold" :local-repo "vimish-fold")) "expand-region" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "magnars/expand-region.el" :package "expand-region" :local-repo "expand-region.el")) "persp-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el" :package "persp-mode" :local-repo "persp-mode.el")) "vi-tilde-fringe" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe" :package "vi-tilde-fringe" :local-repo "vi-tilde-fringe")) "git-gutter-fringe" ("2024-04-29 23:39:01" ("git-gutter" "fringe-helper" "cl-lib" "emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe" :package "git-gutter-fringe" :local-repo "git-gutter-fringe")) "git-gutter" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter" :package "git-gutter" :local-repo "git-gutter")) "fringe-helper" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "nschum/fringe-helper.el" :package "fringe-helper" :local-repo "fringe-helper.el")) "anzu" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/anzu" :package "anzu" :local-repo "anzu")) "doom-modeline" ("2024-04-29 23:39:01" ("emacs" "compat" "nerd-icons" "shrink-path") (:type git :flavor melpa :host github :repo "seagle0128/doom-modeline" :package "doom-modeline" :local-repo "doom-modeline")) "nerd-icons" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files (:defaults "data" "nerd-icons-pkg.el") :host github :repo "rainstormstudio/nerd-icons.el" :package "nerd-icons" :local-repo "nerd-icons.el")) "shrink-path" ("2024-04-29 23:39:01" ("emacs" "s" "dash" "f") (:type git :flavor melpa :host gitlab :repo "bennya/shrink-path.el" :package "shrink-path" :local-repo "shrink-path.el")) "solaire-mode" ("2024-04-29 23:39:01" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode" :package "solaire-mode" :local-repo "emacs-solaire-mode")) "doom-themes" ("2024-04-29 23:39:01" ("emacs" "cl-lib") (:type git :flavor melpa :files (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el" "doom-themes-pkg.el") :host github :repo "doomemacs/themes" :package "doom-themes" :local-repo "themes")) "company-dict" ("2024-04-29 23:39:01" ("emacs" "company" "parent-mode") (:type git :flavor melpa :host github :repo "hlissner/emacs-company-dict" :package "company-dict" :local-repo "emacs-company-dict")) "parent-mode" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "Fanael/parent-mode" :package "parent-mode" :local-repo "parent-mode")) "which-key" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "justbur/emacs-which-key" :package "which-key" :local-repo "emacs-which-key")) "general" ("2024-04-29 23:39:01" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/general.el" :package "general" :local-repo "general.el")) "project" ("2024-04-29 23:39:01" ("emacs" "xref") (:type git :host github :repo "emacs-straight/project" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "project" :local-repo "project")) "xref" ("2024-04-29 23:39:01" ("emacs") (:type git :host github :repo "emacs-straight/xref" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "xref" :local-repo "xref")) "projectile" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "bbatsov/projectile" :package "projectile" :local-repo "projectile")) "ws-butler" ("2024-04-29 23:39:01" ("emacs") (:host github :repo "hlissner/ws-butler" :flavor melpa :package "ws-butler" :type git :local-repo "ws-butler")) "smartparens" ("2024-04-29 23:39:01" ("dash" "cl-lib") (:type git :flavor melpa :host github :repo "Fuco1/smartparens" :package "smartparens" :local-repo "smartparens")) "helpful" ("2024-04-29 23:39:01" ("emacs" "dash" "s" "f" "elisp-refs") (:type git :flavor melpa :host github :repo "Wilfred/helpful" :package "helpful" :local-repo "helpful")) "elisp-refs" ("2024-04-29 23:39:01" ("dash" "s") (:type git :flavor melpa :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs" :package "elisp-refs" :local-repo "elisp-refs")) "dtrt-indent" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "jscheid/dtrt-indent" :package "dtrt-indent" :local-repo "dtrt-indent")) "better-jumper" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "gilbertw1/better-jumper" :package "better-jumper" :local-repo "better-jumper")) "restart-emacs" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "iqbalansari/restart-emacs" :package "restart-emacs" :local-repo "restart-emacs")) "rainbow-delimiters" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters" :package "rainbow-delimiters" :local-repo "rainbow-delimiters")) "highlight-numbers" ("2024-04-29 23:39:01" ("emacs" "parent-mode") (:type git :flavor melpa :host github :repo "Fanael/highlight-numbers" :package "highlight-numbers" :local-repo "highlight-numbers")) "hide-mode-line" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line" :package "hide-mode-line" :local-repo "emacs-hide-mode-line")) "gcmh" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host gitlab :repo "koral/gcmh" :package "gcmh" :local-repo "gcmh")) "auto-minor-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode" :package "auto-minor-mode" :local-repo "auto-minor-mode")) "use-package" ("2024-04-29 23:39:01" ("emacs" "bind-key") (:type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package" :package "use-package" :local-repo "use-package")) "bind-key" ("2024-04-29 23:39:01" ("emacs") (:flavor melpa :files ("bind-key.el" "bind-key-pkg.el") :package "bind-key" :local-repo "use-package" :type git :repo "jwiegley/use-package" :host github)) "volatile-highlights" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "k-talo/volatile-highlights.el" :package "volatile-highlights" :local-repo "volatile-highlights.el")) "ivy" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files (:defaults "doc/ivy-help.org" (:exclude "swiper.el" "counsel.el" "ivy-hydra.el" "ivy-avy.el") "ivy-pkg.el") :host github :repo "abo-abo/swiper" :package "ivy" :local-repo "swiper")) "ivy-rich" ("2024-04-29 23:39:01" ("emacs" "ivy") (:type git :flavor melpa :host github :repo "Yevgnen/ivy-rich" :package "ivy-rich" :local-repo "ivy-rich")) "swiper" ("2024-04-29 23:39:01" ("emacs" "ivy") (:flavor melpa :files ("swiper.el" "swiper-pkg.el") :package "swiper" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "hydra" ("2024-04-29 23:39:01" ("cl-lib" "lv") (:type git :flavor melpa :files (:defaults (:exclude "lv.el") "hydra-pkg.el") :host github :repo "abo-abo/hydra" :package "hydra" :local-repo "hydra")) "lv" ("2024-04-29 23:39:01" nil (:flavor melpa :files ("lv.el" "lv-pkg.el") :package "lv" :local-repo "hydra" :type git :repo "abo-abo/hydra" :host github)) "emojify" ("2024-04-29 23:39:01" ("seq" "ht" "emacs") (:type git :flavor melpa :files (:defaults "data" "images" "emojify-pkg.el") :host github :repo "iqbalansari/emacs-emojify" :package "emojify" :local-repo "emacs-emojify")) "minimap" ("2024-04-29 23:39:01" nil (:type git :host github :repo "emacs-straight/minimap" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "minimap" :local-repo "minimap")) "treemacs-persp" ("2024-04-29 23:39:01" ("emacs" "treemacs" "persp-mode" "dash") (:flavor melpa :files ("src/extra/treemacs-persp.el" "treemacs-persp-pkg.el") :package "treemacs-persp" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "treemacs" ("2024-04-29 23:39:01" ("emacs" "cl-lib" "dash" "s" "ace-window" "pfuture" "hydra" "ht" "cfrs") (:type git :flavor melpa :files (:defaults "Changelog.org" "icons" "src/elisp/treemacs*.el" "src/scripts/treemacs*.py" (:exclude "src/extra/*") "treemacs-pkg.el") :host github :repo "Alexander-Miller/treemacs" :package "treemacs" :local-repo "treemacs")) "ace-window" ("2024-04-29 23:39:01" ("avy") (:type git :flavor melpa :host github :repo "abo-abo/ace-window" :package "ace-window" :local-repo "ace-window")) "pfuture" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "Alexander-Miller/pfuture" :package "pfuture" :local-repo "pfuture")) "cfrs" ("2024-04-29 23:39:01" ("emacs" "dash" "s" "posframe") (:type git :flavor melpa :host github :repo "Alexander-Miller/cfrs" :package "cfrs" :local-repo "cfrs")) "posframe" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "tumashu/posframe" :package "posframe" :local-repo "posframe")) "treemacs-magit" ("2024-04-29 23:39:01" ("emacs" "treemacs" "pfuture" "magit") (:flavor melpa :files ("src/extra/treemacs-magit.el" "treemacs-magit-pkg.el") :package "treemacs-magit" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "treemacs-projectile" ("2024-04-29 23:39:01" ("emacs" "projectile" "treemacs") (:flavor melpa :files ("src/extra/treemacs-projectile.el" "treemacs-projectile-pkg.el") :package "treemacs-projectile" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "treemacs-nerd-icons" ("2024-04-29 23:39:01" ("emacs" "nerd-icons" "treemacs") (:type git :flavor melpa :host github :repo "rainstormstudio/treemacs-nerd-icons" :package "treemacs-nerd-icons" :local-repo "treemacs-nerd-icons")) "org-gcal" ("2024-04-29 23:39:01" ("aio" "alert" "elnode" "emacs" "org" "persist" "request" "request-deferred") (:type git :flavor melpa :host github :repo "kidd/org-gcal.el" :package "org-gcal" :local-repo "org-gcal.el")) "aio" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files ("aio.el" "README.md" "UNLICENSE" "aio-pkg.el") :host github :repo "skeeto/emacs-aio" :package "aio" :local-repo "emacs-aio")) "alert" ("2024-04-29 23:39:01" ("gntp" "log4e" "cl-lib") (:type git :flavor melpa :host github :repo "jwiegley/alert" :package "alert" :local-repo "alert")) "gntp" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "tekai/gntp.el" :package "gntp" :local-repo "gntp.el")) "log4e" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "aki2o/log4e" :package "log4e" :local-repo "log4e")) "elnode" ("2024-04-29 23:39:01" ("web" "dash" "noflet" "s" "creole" "fakir" "db" "kv") (:type git :flavor melpa :files ("default*" "elnode*" "elnode-pkg.el") :branch "melpa" :host github :repo "jcaw/elnode" :package "elnode" :local-repo "elnode")) "web" ("2024-04-29 23:39:01" ("dash" "s") (:type git :flavor melpa :files ("web.el" "web-pkg.el") :host github :repo "nicferrier/emacs-web" :package "web" :local-repo "emacs-web")) "noflet" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "nicferrier/emacs-noflet" :package "noflet" :local-repo "emacs-noflet")) "creole" ("2024-04-29 23:39:01" ("noflet" "kv") (:type git :flavor melpa :host github :repo "nicferrier/elwikicreole" :package "creole" :local-repo "elwikicreole")) "kv" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "nicferrier/emacs-kv" :package "kv" :local-repo "emacs-kv")) "fakir" ("2024-04-29 23:39:01" ("noflet" "dash" "kv") (:type git :flavor melpa :host github :repo "nicferrier/emacs-fakir" :package "fakir" :local-repo "emacs-fakir")) "db" ("2024-04-29 23:39:01" ("kv") (:type git :flavor melpa :host github :repo "nicferrier/emacs-db" :package "db" :local-repo "emacs-db")) "persist" ("2024-04-29 23:39:01" ("emacs") (:type git :host github :repo "emacs-straight/persist" :files ("*" (:exclude ".git")) :package "persist" :local-repo "persist")) "request-deferred" ("2024-04-29 23:39:01" ("emacs" "deferred" "request") (:flavor melpa :files ("request-deferred.el" "request-deferred-pkg.el") :package "request-deferred" :local-repo "emacs-request" :type git :repo "tkf/emacs-request" :host github)) "deferred" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred" :package "deferred" :local-repo "emacs-deferred")) "calfw-ical" ("2024-04-29 23:39:01" nil (:flavor melpa :files ("calfw-ical.el" "calfw-ical-pkg.el") :package "calfw-ical" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "calfw-cal" ("2024-04-29 23:39:01" nil (:flavor melpa :files ("calfw-cal.el" "calfw-cal-pkg.el") :package "calfw-cal" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "calfw-org" ("2024-04-29 23:39:01" nil (:flavor melpa :files ("calfw-org.el" "calfw-org-pkg.el") :package "calfw-org" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "calfw" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :files ("calfw.el" "calfw-pkg.el") :host github :repo "kiwanami/emacs-calfw" :package "calfw" :local-repo "emacs-calfw")) "org-pdftools" ("2024-04-29 23:39:01" ("emacs" "org" "pdf-tools" "org-noter") (:type git :flavor melpa :files ("org-pdftools.el" "org-pdftools-pkg.el") :host github :repo "fuxialexander/org-pdftools" :package "org-pdftools" :local-repo "org-pdftools")) "pdf-tools" ("2024-04-29 23:39:01" ("emacs" "tablist" "let-alist") (:type git :flavor melpa :files (:defaults "README" ("build" "Makefile") ("build" "server") "pdf-tools-pkg.el") :host github :repo "vedang/pdf-tools" :package "pdf-tools" :local-repo "pdf-tools")) "tablist" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/tablist" :package "tablist" :local-repo "tablist")) "org-noter" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :files ("*.el" "modules" (:exclude "*-test-utils.el" "*-devel.el") "org-noter-pkg.el") :host github :repo "org-noter/org-noter" :package "org-noter" :local-repo "org-noter")) "company-lua" ("2024-04-29 23:39:01" ("company" "s" "f" "lua-mode") (:type git :flavor melpa :files (:defaults "lua" "company-lua-pkg.el") :host github :repo "ptrv/company-lua" :package "company-lua" :local-repo "company-lua")) "lua-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files (:defaults (:exclude "init-tryout.el") "lua-mode-pkg.el") :host github :repo "immerrr/lua-mode" :package "lua-mode" :local-repo "lua-mode")) "company-math" ("2024-04-29 23:39:01" ("company" "math-symbol-lists") (:type git :flavor melpa :host github :repo "vspinu/company-math" :package "company-math" :local-repo "company-math")) "math-symbol-lists" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "vspinu/math-symbol-lists" :package "math-symbol-lists" :local-repo "math-symbol-lists")) "company-reftex" ("2024-04-29 23:39:01" ("emacs" "s" "company") (:type git :flavor melpa :host github :repo "TheBB/company-reftex" :package "company-reftex" :local-repo "company-reftex")) "company-auctex" ("2024-04-29 23:39:01" ("yasnippet" "company" "auctex") (:type git :flavor melpa :host github :repo "alexeyr/company-auctex" :package "company-auctex" :local-repo "company-auctex")) "auctex" ("2024-04-29 23:39:01" ("emacs") (:files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :repo "emacs-straight/auctex" :host github :package "auctex" :type git :local-repo "auctex")) "latex-preview-pane" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :files ("*.el" "*.txt" "latex-preview-pane-pkg.el") :host github :repo "jsinglet/latex-preview-pane" :package "latex-preview-pane" :local-repo "latex-preview-pane")) "adaptive-wrap" ("2024-04-29 23:39:01" ("emacs") (:type git :host github :repo "emacs-straight/adaptive-wrap" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "adaptive-wrap" :local-repo "adaptive-wrap")) "julia-repl" ("2024-04-29 23:39:01" ("emacs" "s") (:type git :flavor melpa :host github :repo "tpapp/julia-repl" :package "julia-repl" :local-repo "julia-repl")) "julia-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "JuliaEditorSupport/julia-emacs" :package "julia-mode" :local-repo "julia-emacs")) "gdscript-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "godotengine/emacs-gdscript-mode" :package "gdscript-mode" :local-repo "emacs-gdscript-mode")) "hover" ("2024-04-29 23:39:01" ("emacs" "dash") (:type git :flavor melpa :host github :repo "ericdallo/hover.el" :package "hover" :local-repo "hover.el")) "flutter" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files ("flutter.el" "flutter-project.el" "flutter-l10n.el" "flutter-pkg.el") :host github :repo "amake/flutter.el" :package "flutter" :local-repo "flutter.el")) "dart-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/dart-mode" :package "dart-mode" :local-repo "dart-mode")) "saveplace-pdf-view" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "nicolaisingh/saveplace-pdf-view" :package "saveplace-pdf-view" :local-repo "saveplace-pdf-view")) "makefile-executor" ("2024-04-29 23:39:01" ("emacs" "dash" "f" "s") (:type git :flavor melpa :host github :repo "Olivia5k/makefile-executor.el" :package "makefile-executor" :local-repo "makefile-executor.el")) "ivy-xref" ("2024-04-29 23:39:01" ("emacs" "ivy") (:type git :flavor melpa :host github :repo "alexmurray/ivy-xref" :package "ivy-xref" :local-repo "ivy-xref")) "wgrep" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo "Emacs-wgrep")) "counsel-projectile" ("2024-04-29 23:39:01" ("counsel" "projectile") (:type git :flavor melpa :host github :repo "ericdanan/counsel-projectile" :package "counsel-projectile" :local-repo "counsel-projectile")) "counsel" ("2024-04-29 23:39:01" ("emacs" "ivy" "swiper") (:flavor melpa :files ("counsel.el" "counsel-pkg.el") :package "counsel" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "amx" ("2024-04-29 23:39:01" ("emacs" "s") (:type git :flavor melpa :host github :repo "DarwinAwardWinner/amx" :package "amx" :local-repo "amx")) "ivy-avy" ("2024-04-29 23:39:01" ("emacs" "ivy" "avy") (:flavor melpa :files ("ivy-avy.el" "ivy-avy-pkg.el") :package "ivy-avy" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "ivy-hydra" ("2024-04-29 23:39:01" ("emacs" "ivy" "hydra") (:flavor melpa :files ("ivy-hydra.el" "ivy-hydra-pkg.el") :package "ivy-hydra" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "all-the-icons" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el" :package "all-the-icons" :local-repo "all-the-icons.el")) "all-the-icons-ivy-rich" ("2024-04-29 23:39:01" ("emacs" "ivy-rich" "all-the-icons") (:type git :flavor melpa :host github :repo "seagle0128/all-the-icons-ivy-rich" :package "all-the-icons-ivy-rich" :local-repo "all-the-icons-ivy-rich")) "bash-completion" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "szermatt/emacs-bash-completion" :package "bash-completion" :local-repo "emacs-bash-completion")) "fish-completion" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "LemonBreezes/emacs-fish-completion" :package "fish-completion" :local-repo "emacs-fish-completion")) "eshell-syntax-highlighting" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "akreisher/eshell-syntax-highlighting" :package "eshell-syntax-highlighting" :local-repo "eshell-syntax-highlighting")) "eshell-did-you-mean" ("2024-04-29 23:39:01" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "xuchunyang/eshell-did-you-mean" :package "eshell-did-you-mean" :local-repo "eshell-did-you-mean")) "esh-help" ("2024-04-29 23:39:01" ("dash") (:type git :flavor melpa :host github :repo "tom-tan/esh-help" :package "esh-help" :local-repo "esh-help")) "eshell-z" ("2024-04-29 23:39:01" ("cl-lib") (:type git :flavor melpa :host github :repo "xuchunyang/eshell-z" :package "eshell-z" :local-repo "eshell-z")) "eshell-up" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "peterwvj/eshell-up" :package "eshell-up" :local-repo "eshell-up")) "company-statistics" ("2024-04-29 23:39:01" ("emacs" "company") (:type git :flavor melpa :host github :repo "company-mode/company-statistics" :package "company-statistics" :local-repo "company-statistics")) "rainbow-mode" ("2024-04-29 23:39:01" nil (:type git :host github :repo "emacs-straight/rainbow-mode" :files ("*" (:exclude ".git")) :package "rainbow-mode" :local-repo "rainbow-mode")) "pretty-hydra" ("2024-04-29 23:39:01" ("hydra" "s" "dash" "emacs" "compat") (:flavor melpa :files ("pretty-hydra.el" "pretty-hydra-pkg.el") :package "pretty-hydra" :local-repo "major-mode-hydra.el" :type git :repo "jerrypnz/major-mode-hydra.el" :host github)) "mode-icons" ("2024-04-29 23:39:01" ("emacs" "cl-lib") (:type git :flavor melpa :files ("*.el" "icons" "mode-icons-pkg.el") :host github :repo "ryuslash/mode-icons" :package "mode-icons" :local-repo "mode-icons")) "major-mode-hydra" ("2024-04-29 23:39:01" ("dash" "pretty-hydra" "emacs") (:type git :flavor melpa :files ("major-mode-hydra.el" "major-mode-hydra-pkg.el") :host github :repo "jerrypnz/major-mode-hydra.el" :package "major-mode-hydra" :local-repo "major-mode-hydra.el")) "magit-delta" ("2024-04-29 23:39:01" ("emacs" "magit" "xterm-color") (:type git :flavor melpa :host github :repo "dandavison/magit-delta" :package "magit-delta" :local-repo "magit-delta")) "xterm-color" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "atomontage/xterm-color" :package "xterm-color" :local-repo "xterm-color")) "highlight-indentation" ("2024-04-29 23:39:01" nil (:type git :flavor melpa :host github :repo "antonj/Highlight-Indentation-for-Emacs" :package "highlight-indentation" :local-repo "Highlight-Indentation-for-Emacs")) "helm" ("2024-04-29 23:39:01" ("helm-core" "wfnames" "popup") (:type git :flavor melpa :files ("*.el" "emacs-helm.sh" (:exclude "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core.el") "helm-pkg.el") :host github :repo "emacs-helm/helm" :package "helm" :local-repo "helm")) "helm-core" ("2024-04-29 23:39:01" ("emacs" "async") (:flavor melpa :files ("helm-core.el" "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core-pkg.el") :package "helm-core" :local-repo "helm" :type git :repo "emacs-helm/helm" :host github)) "wfnames" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "thierryvolpiatto/wfnames" :package "wfnames" :local-repo "wfnames")) "goto-line-preview" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "emacs-vs/goto-line-preview" :package "goto-line-preview" :local-repo "goto-line-preview")) "flycheck-eglot" ("2024-04-29 23:39:01" ("emacs" "eglot" "flycheck") (:type git :flavor melpa :host github :repo "flycheck/flycheck-eglot" :package "flycheck-eglot" :local-repo "flycheck-eglot")) "eglot" ("2024-04-29 23:39:01" ("emacs" "jsonrpc" "flymake" "project" "xref" "eldoc" "seq" "external-completion") (:type git :host github :repo "emacs-straight/eglot" :files ("*" (:exclude ".git")) :package "eglot" :local-repo "eglot")) "jsonrpc" ("2024-04-29 23:39:01" ("emacs") (:type git :host github :repo "emacs-straight/jsonrpc" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "jsonrpc" :local-repo "jsonrpc")) "flymake" ("2024-04-29 23:39:01" ("emacs" "eldoc" "project") (:type git :host github :repo "emacs-straight/flymake" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "flymake" :local-repo "flymake")) "eldoc" ("2024-04-29 23:39:01" ("emacs") (:type git :host github :repo "emacs-straight/eldoc" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "eldoc" :local-repo "eldoc")) "external-completion" ("2024-04-29 23:39:01" nil (:type git :host github :repo "emacs-straight/external-completion" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style") :package "external-completion" :local-repo "external-completion")) "emojify-logos" ("2024-04-29 23:39:01" ("emojify") (:type git :flavor melpa :files (:defaults "logos" "emojify-logos-pkg.el") :host github :repo "mxgoldstein/emojify-logos" :package "emojify-logos" :local-repo "emojify-logos")) "crux" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "bbatsov/crux" :package "crux" :local-repo "crux")) "tree-sitter-indent" ("2024-04-29 23:39:01" ("emacs" "tree-sitter" "seq") (:type git :flavor melpa :host codeberg :repo "FelipeLema/tree-sitter-indent.el" :package "tree-sitter-indent" :local-repo "tree-sitter-indent.el")) "tree-sitter" ("2024-04-29 23:39:01" ("emacs" "tsc") (:type git :flavor melpa :files (:defaults (:exclude "lisp/tree-sitter-tests.el") "tree-sitter-pkg.el") :branch "release" :host github :repo "emacs-tree-sitter/elisp-tree-sitter" :package "tree-sitter" :local-repo "elisp-tree-sitter")) "tsc" ("2024-04-29 23:39:01" ("emacs") (:flavor melpa :files ("core/*.el" "core/Cargo.toml" "core/Cargo.lock" "core/src" "tsc-pkg.el") :package "tsc" :local-repo "elisp-tree-sitter" :type git :repo "emacs-tree-sitter/elisp-tree-sitter" :host github :branch "release")) "tree-sitter-langs" ("2024-04-29 23:39:01" ("emacs" "tree-sitter") (:type git :flavor melpa :files (:defaults "queries" "tree-sitter-langs-pkg.el") :branch "release" :host github :repo "emacs-tree-sitter/tree-sitter-langs" :package "tree-sitter-langs" :local-repo "tree-sitter-langs")) "ts-fold" ("2024-04-29 23:39:01" ("emacs" "tree-sitter" "s" "fringe-helper") (:host github :repo "emacs-tree-sitter/ts-fold" :package "ts-fold" :type git :local-repo "ts-fold")) "yaml-mode" ("2024-04-29 23:39:01" ("emacs") (:type git :flavor melpa :host github :repo "yoshiki/yaml-mode" :package "yaml-mode" :local-repo "yaml-mode"))))

#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())

#s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (org-elpa #s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 15 "use-package" nil "auto-minor-mode" nil "compat" nil "gcmh" nil "straight" nil "nerd-icons" nil "hide-mode-line" nil "highlight-numbers" nil "rainbow-delimiters" nil "restart-emacs" nil "better-jumper" nil "dtrt-indent" nil "helpful" nil "pcre2el" nil "smartparens" nil "ws-butler" nil "projectile" nil "project" nil "general" nil "which-key" nil "ivy-rich" nil "anzu" nil "company" nil "drag-stuff" nil "emojify" nil "flycheck" nil "hydra" nil "swiper" nil "undo-fu" nil "undo-fu-session" nil "vundo" nil "gdscript-mode" nil "company-dict" nil "amx" nil "counsel-projectile" nil "wgrep" nil "doom-themes" nil "solaire-mode" nil "hl-todo" nil "minimap" nil "doom-modeline" nil "volatile-highlights" nil "treemacs" nil "treemacs-nerd-icons" nil "git-gutter-fringe" nil "vi-tilde-fringe" nil "persp-mode" nil "yasnippet" nil "vimish-fold" nil "ts-fold" nil "auto-yasnippet" nil "doom-snippets" nil "diredfl" nil "dired-git-info" nil "dired-rsync" nil "fd-dired" nil "browse-at-remote" nil "git-commit" nil "git-timemachine" nil "git-modes" nil "eshell-up" nil "eshell-z" nil "shrink-path" nil "esh-help" nil "eshell-did-you-mean" nil "eshell-syntax-highlighting" nil "fish-completion" nil "bash-completion" nil "flycheck-popup-tip" nil "quickrun" nil "eros" nil "dumb-jump" nil "ivy-xref" nil "request" nil "magit" nil "magit-todos" nil "makefile-executor" nil "pdf-tools" nil "saveplace-pdf-view" nil "tree-sitter" nil "tree-sitter-langs" nil "tree-sitter-indent" nil "dart-mode" nil "flutter" nil "hover" nil "highlight-quoted" nil "macrostep" nil "overseer" nil "elisp-def" nil "elisp-demos" nil "flycheck-package" nil "flycheck-cask" nil "buttercup" nil "julia-mode" nil "julia-repl" nil "auctex" nil "adaptive-wrap" nil "latex-preview-pane" nil "company-auctex" nil "company-reftex" nil "company-math" nil "lua-mode" nil "company-lua" nil "markdown-mode" nil "markdown-toc" nil "edit-indirect" nil "org" (org :type git :repo "emacs-straight/org-mode" :local-repo "org" :depth 1 :pre-build (progn (with-temp-file "org-loaddefs.el") (with-temp-file "org-version.el" (let ((version (with-temp-buffer (insert-file-contents (doom-path "lisp/org.el") nil 0 1024) (if (re-search-forward "^;; Version: \\([^
-]+\\)" nil t) (match-string-no-properties 1) "Unknown")))) (insert (format "(defun org-release () %S)
" version) (format "(defun org-git-version (&rest _) \"%s-??-%s\")
" version (cdr (doom-call-process "git" "rev-parse" "--short" "HEAD"))) "(provide 'org-version)
")))) :build t :files (:defaults "etc") :host github) "org-contrib" (org-contrib :type git :includes (ob-csharp ob-eukleides ob-fomus ob-julia ob-mathomatic ob-oz ob-stata ob-tcl ob-vbnet ol-bookmark ol-elisp-symbol ol-git-link ol-man ol-mew ol-vm ol-wl org-annotate-file org-bibtex-extras org-checklist org-choose org-collector org-contribdir org-depend org-effectiveness org-eldoc org-eval org-eval-light org-expiry org-interactive-query org-invoice org-learn org-license org-mac-iCal org-mairix org-panel org-registry org-screen org-screenshot org-secretary org-static-mathjax org-sudoku orgtbl-sqlinsert org-toc org-track org-wikinodes ox-bibtex ox-confluence ox-deck ox-extra ox-freemind ox-groff ox-koma-letter ox-s5 ox-taskjuggler) :repo "emacsmirror/org-contrib" :files (:defaults "lisp/*.el") :host github) "avy" nil "htmlize" nil "org-yt" nil "ox-clip" nil "toc-org" nil "org-cliplink" nil "org-pdftools" nil "orgit" nil "ob-async" nil "company-shell" nil "yaml-mode" nil "calfw" nil "calfw-org" nil "calfw-cal" nil "calfw-ical" nil "org-gcal" nil "link-hint" nil "expand-region" nil "async" nil "seq" nil "with-editor" nil "tablist" nil "org-noter" nil "f" nil "math-symbol-lists" nil "package-lint" nil "pkg-info" nil "epl" nil "tsc" nil "ht" nil "fringe-helper" nil "git-gutter" nil "ace-window" nil "pfuture" nil "lv" nil "cfrs" nil "posframe" nil "parent-mode" nil "xterm-color" nil "helm-core" nil "wfnames" nil "jsonrpc" nil "flymake" nil "eldoc" nil "xref" nil "external-completion" nil "elisp-refs" nil "bind-key" nil "melpa" nil "nongnu-elpa" nil "gnu-elpa-mirror" nil "el-get" nil "emacsmirror-mirror" nil "ivy" nil "all-the-icons" nil "all-the-icons-ivy-rich" nil "company-statistics" nil "counsel" nil "crux" nil "eglot" nil "emojify-logos" nil "flycheck-eglot" nil "goto-line-preview" nil "helm" nil "highlight-indentation" nil "magit-delta" nil "magit-section" nil "major-mode-hydra" nil "mode-icons" nil "popup" nil "pretty-hydra" nil "rainbow-mode" nil "transient" nil "ivy-hydra" nil "ivy-avy" nil "treemacs-projectile" nil "treemacs-magit" nil "treemacs-persp" nil "cl-lib" nil "aio" nil "alert" nil "gntp" nil "log4e" nil "elnode" nil "web" nil "dash" nil "s" nil "noflet" nil "creole" nil "kv" nil "fakir" nil "db" nil "persist" nil "request-deferred" nil "deferred" nil)) melpa #s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "use-package" (use-package :type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package") "auto-minor-mode" (auto-minor-mode :type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode") "compat" nil "gcmh" (gcmh :type git :flavor melpa :host gitlab :repo "koral/gcmh") "straight" nil "nerd-icons" (nerd-icons :type git :flavor melpa :files (:defaults "data" "nerd-icons-pkg.el") :host github :repo "rainstormstudio/nerd-icons.el") "hide-mode-line" (hide-mode-line :type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line") "highlight-numbers" (highlight-numbers :type git :flavor melpa :host github :repo "Fanael/highlight-numbers") "rainbow-delimiters" (rainbow-delimiters :type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters") "restart-emacs" (restart-emacs :type git :flavor melpa :host github :repo "iqbalansari/restart-emacs") "better-jumper" (better-jumper :type git :flavor melpa :host github :repo "gilbertw1/better-jumper") "dtrt-indent" (dtrt-indent :type git :flavor melpa :host github :repo "jscheid/dtrt-indent") "helpful" (helpful :type git :flavor melpa :host github :repo "Wilfred/helpful") "pcre2el" (pcre2el :type git :flavor melpa :host github :repo "joddie/pcre2el") "smartparens" (smartparens :type git :flavor melpa :host github :repo "Fuco1/smartparens") "ws-butler" (ws-butler :type git :flavor melpa :host github :repo "hlissner/ws-butler") "projectile" (projectile :type git :flavor melpa :host github :repo "bbatsov/projectile") "project" nil "general" (general :type git :flavor melpa :host github :repo "noctuid/general.el") "which-key" (which-key :type git :flavor melpa :host github :repo "justbur/emacs-which-key") "ivy-rich" (ivy-rich :type git :flavor melpa :host github :repo "Yevgnen/ivy-rich") "anzu" (anzu :type git :flavor melpa :host github :repo "emacsorphanage/anzu") "company" (company :type git :flavor melpa :files (:defaults "icons" ("images/small" "doc/images/small/*.png") "company-pkg.el") :host github :repo "company-mode/company-mode") "drag-stuff" (drag-stuff :type git :flavor melpa :host github :repo "rejeep/drag-stuff.el") "emojify" (emojify :type git :flavor melpa :files (:defaults "data" "images" "emojify-pkg.el") :host github :repo "iqbalansari/emacs-emojify") "flycheck" (flycheck :type git :flavor melpa :host github :repo "flycheck/flycheck") "hydra" (hydra :type git :flavor melpa :files (:defaults (:exclude "lv.el") "hydra-pkg.el") :host github :repo "abo-abo/hydra") "swiper" (swiper :type git :flavor melpa :files ("swiper.el" "swiper-pkg.el") :host github :repo "abo-abo/swiper") "undo-fu" (undo-fu :type git :flavor melpa :host codeberg :repo "ideasman42/emacs-undo-fu") "undo-fu-session" (undo-fu-session :type git :flavor melpa :host codeberg :repo "ideasman42/emacs-undo-fu-session") "vundo" nil "gdscript-mode" (gdscript-mode :type git :flavor melpa :host github :repo "godotengine/emacs-gdscript-mode") "company-dict" (company-dict :type git :flavor melpa :host github :repo "hlissner/emacs-company-dict") "amx" (amx :type git :flavor melpa :host github :repo "DarwinAwardWinner/amx") "counsel-projectile" (counsel-projectile :type git :flavor melpa :host github :repo "ericdanan/counsel-projectile") "wgrep" (wgrep :type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep") "doom-themes" (doom-themes :type git :flavor melpa :files (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el" "doom-themes-pkg.el") :host github :repo "doomemacs/themes") "solaire-mode" (solaire-mode :type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode") "hl-todo" (hl-todo :type git :flavor melpa :host github :repo "tarsius/hl-todo") "minimap" nil "doom-modeline" (doom-modeline :type git :flavor melpa :host github :repo "seagle0128/doom-modeline") "volatile-highlights" (volatile-highlights :type git :flavor melpa :host github :repo "k-talo/volatile-highlights.el") "treemacs" (treemacs :type git :flavor melpa :files (:defaults "Changelog.org" "icons" "src/elisp/treemacs*.el" "src/scripts/treemacs*.py" (:exclude "src/extra/*") "treemacs-pkg.el") :host github :repo "Alexander-Miller/treemacs") "treemacs-nerd-icons" (treemacs-nerd-icons :type git :flavor melpa :host github :repo "rainstormstudio/treemacs-nerd-icons") "git-gutter-fringe" (git-gutter-fringe :type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe") "vi-tilde-fringe" (vi-tilde-fringe :type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe") "persp-mode" (persp-mode :type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el") "yasnippet" (yasnippet :type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet") "vimish-fold" (vimish-fold :type git :flavor melpa :host github :repo "matsievskiysv/vimish-fold") "ts-fold" nil "auto-yasnippet" (auto-yasnippet :type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet") "doom-snippets" nil "diredfl" (diredfl :type git :flavor melpa :host github :repo "purcell/diredfl") "dired-git-info" nil "dired-rsync" (dired-rsync :type git :flavor melpa :files ("dired-rsync.el" "dired-rsync-pkg.el") :host github :repo "stsquad/dired-rsync") "fd-dired" (fd-dired :type git :flavor melpa :host github :repo "yqrashawn/fd-dired") "browse-at-remote" (browse-at-remote :type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote") "git-commit" (git-commit :type git :flavor melpa :files ("lisp/git-commit.el" "lisp/git-commit-pkg.el" "git-commit-pkg.el") :host github :repo "magit/magit") "git-timemachine" (git-timemachine :type git :flavor melpa :host github :repo "emacsmirror/git-timemachine") "git-modes" (git-modes :type git :flavor melpa :host github :repo "magit/git-modes") "eshell-up" (eshell-up :type git :flavor melpa :host github :repo "peterwvj/eshell-up") "eshell-z" (eshell-z :type git :flavor melpa :host github :repo "xuchunyang/eshell-z") "shrink-path" (shrink-path :type git :flavor melpa :host gitlab :repo "bennya/shrink-path.el") "esh-help" (esh-help :type git :flavor melpa :host github :repo "tom-tan/esh-help") "eshell-did-you-mean" (eshell-did-you-mean :type git :flavor melpa :host github :repo "xuchunyang/eshell-did-you-mean") "eshell-syntax-highlighting" (eshell-syntax-highlighting :type git :flavor melpa :host github :repo "akreisher/eshell-syntax-highlighting") "fish-completion" (fish-completion :type git :flavor melpa :host github :repo "LemonBreezes/emacs-fish-completion") "bash-completion" (bash-completion :type git :flavor melpa :host github :repo "szermatt/emacs-bash-completion") "flycheck-popup-tip" (flycheck-popup-tip :type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip") "quickrun" (quickrun :type git :flavor melpa :host github :repo "emacsorphanage/quickrun") "eros" (eros :type git :flavor melpa :host github :repo "xiongtx/eros") "dumb-jump" (dumb-jump :type git :flavor melpa :host github :repo "jacktasia/dumb-jump") "ivy-xref" (ivy-xref :type git :flavor melpa :host github :repo "alexmurray/ivy-xref") "request" (request :type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request") "magit" (magit :type git :flavor melpa :files ("lisp/magit*.el" "lisp/git-rebase.el" "docs/magit.texi" "docs/AUTHORS.md" "LICENSE" "Documentation/magit.texi" "Documentation/AUTHORS.md" (:exclude "lisp/magit-libgit.el" "lisp/magit-libgit-pkg.el" "lisp/magit-section.el" "lisp/magit-section-pkg.el") "magit-pkg.el") :host github :repo "magit/magit") "magit-todos" (magit-todos :type git :flavor melpa :host github :repo "alphapapa/magit-todos") "makefile-executor" (makefile-executor :type git :flavor melpa :host github :repo "Olivia5k/makefile-executor.el") "pdf-tools" (pdf-tools :type git :flavor melpa :files (:defaults "README" ("build" "Makefile") ("build" "server") "pdf-tools-pkg.el") :host github :repo "vedang/pdf-tools") "saveplace-pdf-view" (saveplace-pdf-view :type git :flavor melpa :host github :repo "nicolaisingh/saveplace-pdf-view") "tree-sitter" (tree-sitter :type git :flavor melpa :files (:defaults (:exclude "lisp/tree-sitter-tests.el") "tree-sitter-pkg.el") :branch "release" :host github :repo "emacs-tree-sitter/elisp-tree-sitter") "tree-sitter-langs" (tree-sitter-langs :type git :flavor melpa :files (:defaults "queries" "tree-sitter-langs-pkg.el") :branch "release" :host github :repo "emacs-tree-sitter/tree-sitter-langs") "tree-sitter-indent" (tree-sitter-indent :type git :flavor melpa :host codeberg :repo "FelipeLema/tree-sitter-indent.el") "dart-mode" (dart-mode :type git :flavor melpa :host github :repo "emacsorphanage/dart-mode") "flutter" (flutter :type git :flavor melpa :files ("flutter.el" "flutter-project.el" "flutter-l10n.el" "flutter-pkg.el") :host github :repo "amake/flutter.el") "hover" (hover :type git :flavor melpa :host github :repo "ericdallo/hover.el") "highlight-quoted" (highlight-quoted :type git :flavor melpa :host github :repo "Fanael/highlight-quoted") "macrostep" (macrostep :type git :flavor melpa :host github :repo "emacsorphanage/macrostep") "overseer" (overseer :type git :flavor melpa :host github :repo "tonini/overseer.el") "elisp-def" (elisp-def :type git :flavor melpa :host github :repo "Wilfred/elisp-def") "elisp-demos" (elisp-demos :type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos") "flycheck-package" (flycheck-package :type git :flavor melpa :host github :repo "purcell/flycheck-package") "flycheck-cask" (flycheck-cask :type git :flavor melpa :host github :repo "flycheck/flycheck-cask") "buttercup" (buttercup :type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup") "julia-mode" (julia-mode :type git :flavor melpa :host github :repo "JuliaEditorSupport/julia-emacs") "julia-repl" (julia-repl :type git :flavor melpa :host github :repo "tpapp/julia-repl") "auctex" nil "adaptive-wrap" nil "latex-preview-pane" (latex-preview-pane :type git :flavor melpa :files ("*.el" "*.txt" "latex-preview-pane-pkg.el") :host github :repo "jsinglet/latex-preview-pane") "company-auctex" (company-auctex :type git :flavor melpa :host github :repo "alexeyr/company-auctex") "company-reftex" (company-reftex :type git :flavor melpa :host github :repo "TheBB/company-reftex") "company-math" (company-math :type git :flavor melpa :host github :repo "vspinu/company-math") "lua-mode" (lua-mode :type git :flavor melpa :files (:defaults (:exclude "init-tryout.el") "lua-mode-pkg.el") :host github :repo "immerrr/lua-mode") "company-lua" (company-lua :type git :flavor melpa :files (:defaults "lua" "company-lua-pkg.el") :host github :repo "ptrv/company-lua") "markdown-mode" (markdown-mode :type git :flavor melpa :host github :repo "jrblevin/markdown-mode") "markdown-toc" (markdown-toc :type git :flavor melpa :host github :repo "ardumont/markdown-toc") "edit-indirect" (edit-indirect :type git :flavor melpa :host github :repo "Fanael/edit-indirect") "avy" (avy :type git :flavor melpa :host github :repo "abo-abo/avy") "htmlize" (htmlize :type git :flavor melpa :host github :repo "hniksic/emacs-htmlize") "org-yt" nil "ox-clip" (ox-clip :type git :flavor melpa :host github :repo "jkitchin/ox-clip") "toc-org" (toc-org :type git :flavor melpa :host github :repo "snosov1/toc-org") "org-cliplink" (org-cliplink :type git :flavor melpa :host github :repo "rexim/org-cliplink") "org-pdftools" (org-pdftools :type git :flavor melpa :files ("org-pdftools.el" "org-pdftools-pkg.el") :host github :repo "fuxialexander/org-pdftools") "orgit" (orgit :type git :flavor melpa :host github :repo "magit/orgit") "ob-async" (ob-async :type git :flavor melpa :host github :repo "astahlman/ob-async") "company-shell" (company-shell :type git :flavor melpa :host github :repo "Alexander-Miller/company-shell") "yaml-mode" (yaml-mode :type git :flavor melpa :host github :repo "yoshiki/yaml-mode") "calfw" (calfw :type git :flavor melpa :files ("calfw.el" "calfw-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-org" (calfw-org :type git :flavor melpa :files ("calfw-org.el" "calfw-org-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-cal" (calfw-cal :type git :flavor melpa :files ("calfw-cal.el" "calfw-cal-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-ical" (calfw-ical :type git :flavor melpa :files ("calfw-ical.el" "calfw-ical-pkg.el") :host github :repo "kiwanami/emacs-calfw") "org-gcal" (org-gcal :type git :flavor melpa :host github :repo "kidd/org-gcal.el") "link-hint" (link-hint :type git :flavor melpa :host github :repo "noctuid/link-hint.el") "expand-region" (expand-region :type git :flavor melpa :host github :repo "magnars/expand-region.el") "async" (async :type git :flavor melpa :host github :repo "jwiegley/emacs-async") "seq" nil "with-editor" (with-editor :type git :flavor melpa :host github :repo "magit/with-editor") "tablist" (tablist :type git :flavor melpa :host github :repo "emacsorphanage/tablist") "org-noter" (org-noter :type git :flavor melpa :files ("*.el" "modules" (:exclude "*-test-utils.el" "*-devel.el") "org-noter-pkg.el") :host github :repo "org-noter/org-noter") "f" (f :type git :flavor melpa :host github :repo "rejeep/f.el") "math-symbol-lists" (math-symbol-lists :type git :flavor melpa :host github :repo "vspinu/math-symbol-lists") "package-lint" (package-lint :type git :flavor melpa :files (:defaults "data" (:exclude "*flymake.el") "package-lint-pkg.el") :host github :repo "purcell/package-lint") "pkg-info" (pkg-info :type git :flavor melpa :host github :repo "emacsorphanage/pkg-info") "epl" (epl :type git :flavor melpa :host github :repo "cask/epl") "tsc" (tsc :type git :flavor melpa :files ("core/*.el" "core/Cargo.toml" "core/Cargo.lock" "core/src" "tsc-pkg.el") :branch "release" :host github :repo "emacs-tree-sitter/elisp-tree-sitter") "ht" (ht :type git :flavor melpa :host github :repo "Wilfred/ht.el") "fringe-helper" (fringe-helper :type git :flavor melpa :host github :repo "nschum/fringe-helper.el") "git-gutter" (git-gutter :type git :flavor melpa :host github :repo "emacsorphanage/git-gutter") "ace-window" (ace-window :type git :flavor melpa :host github :repo "abo-abo/ace-window") "pfuture" (pfuture :type git :flavor melpa :host github :repo "Alexander-Miller/pfuture") "lv" (lv :type git :flavor melpa :files ("lv.el" "lv-pkg.el") :host github :repo "abo-abo/hydra") "cfrs" (cfrs :type git :flavor melpa :host github :repo "Alexander-Miller/cfrs") "posframe" (posframe :type git :flavor melpa :host github :repo "tumashu/posframe") "parent-mode" (parent-mode :type git :flavor melpa :host github :repo "Fanael/parent-mode") "xterm-color" (xterm-color :type git :flavor melpa :host github :repo "atomontage/xterm-color") "helm-core" (helm-core :type git :flavor melpa :files ("helm-core.el" "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core-pkg.el") :host github :repo "emacs-helm/helm") "wfnames" (wfnames :type git :flavor melpa :host github :repo "thierryvolpiatto/wfnames") "jsonrpc" nil "flymake" nil "eldoc" nil "xref" nil "external-completion" nil "elisp-refs" (elisp-refs :type git :flavor melpa :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs") "bind-key" (bind-key :type git :flavor melpa :files ("bind-key.el" "bind-key-pkg.el") :host github :repo "jwiegley/use-package") "nongnu-elpa" nil "gnu-elpa-mirror" nil "el-get" (el-get :type git :flavor melpa :files ("*.el" ("recipes" "recipes/el-get.rcp") "methods" "el-get-pkg.el") :host github :repo "dimitri/el-get") "emacsmirror-mirror" nil "ivy" (ivy :type git :flavor melpa :files (:defaults "doc/ivy-help.org" (:exclude "swiper.el" "counsel.el" "ivy-hydra.el" "ivy-avy.el") "ivy-pkg.el") :host github :repo "abo-abo/swiper") "all-the-icons" (all-the-icons :type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el") "all-the-icons-ivy-rich" (all-the-icons-ivy-rich :type git :flavor melpa :host github :repo "seagle0128/all-the-icons-ivy-rich") "company-statistics" (company-statistics :type git :flavor melpa :host github :repo "company-mode/company-statistics") "counsel" (counsel :type git :flavor melpa :files ("counsel.el" "counsel-pkg.el") :host github :repo "abo-abo/swiper") "crux" (crux :type git :flavor melpa :host github :repo "bbatsov/crux") "eglot" nil "emojify-logos" (emojify-logos :type git :flavor melpa :files (:defaults "logos" "emojify-logos-pkg.el") :host github :repo "mxgoldstein/emojify-logos") "flycheck-eglot" (flycheck-eglot :type git :flavor melpa :host github :repo "flycheck/flycheck-eglot") "goto-line-preview" (goto-line-preview :type git :flavor melpa :host github :repo "emacs-vs/goto-line-preview") "helm" (helm :type git :flavor melpa :files ("*.el" "emacs-helm.sh" (:exclude "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core.el") "helm-pkg.el") :host github :repo "emacs-helm/helm") "highlight-indentation" (highlight-indentation :type git :flavor melpa :host github :repo "antonj/Highlight-Indentation-for-Emacs") "magit-delta" (magit-delta :type git :flavor melpa :host github :repo "dandavison/magit-delta") "magit-section" (magit-section :type git :flavor melpa :files ("lisp/magit-section.el" "lisp/magit-section-pkg.el" "docs/magit-section.texi" "Documentation/magit-section.texi" "magit-section-pkg.el") :host github :repo "magit/magit") "major-mode-hydra" (major-mode-hydra :type git :flavor melpa :files ("major-mode-hydra.el" "major-mode-hydra-pkg.el") :host github :repo "jerrypnz/major-mode-hydra.el") "mode-icons" (mode-icons :type git :flavor melpa :files ("*.el" "icons" "mode-icons-pkg.el") :host github :repo "ryuslash/mode-icons") "popup" (popup :type git :flavor melpa :host github :repo "auto-complete/popup-el") "pretty-hydra" (pretty-hydra :type git :flavor melpa :files ("pretty-hydra.el" "pretty-hydra-pkg.el") :host github :repo "jerrypnz/major-mode-hydra.el") "rainbow-mode" nil "transient" (transient :type git :flavor melpa :host github :repo "magit/transient") "ivy-hydra" (ivy-hydra :type git :flavor melpa :files ("ivy-hydra.el" "ivy-hydra-pkg.el") :host github :repo "abo-abo/swiper") "ivy-avy" (ivy-avy :type git :flavor melpa :files ("ivy-avy.el" "ivy-avy-pkg.el") :host github :repo "abo-abo/swiper") "treemacs-projectile" (treemacs-projectile :type git :flavor melpa :files ("src/extra/treemacs-projectile.el" "treemacs-projectile-pkg.el") :host github :repo "Alexander-Miller/treemacs") "treemacs-magit" (treemacs-magit :type git :flavor melpa :files ("src/extra/treemacs-magit.el" "treemacs-magit-pkg.el") :host github :repo "Alexander-Miller/treemacs") "treemacs-persp" (treemacs-persp :type git :flavor melpa :files ("src/extra/treemacs-persp.el" "treemacs-persp-pkg.el") :host github :repo "Alexander-Miller/treemacs") "cl-lib" nil "aio" (aio :type git :flavor melpa :files ("aio.el" "README.md" "UNLICENSE" "aio-pkg.el") :host github :repo "skeeto/emacs-aio") "alert" (alert :type git :flavor melpa :host github :repo "jwiegley/alert") "gntp" (gntp :type git :flavor melpa :host github :repo "tekai/gntp.el") "log4e" (log4e :type git :flavor melpa :host github :repo "aki2o/log4e") "elnode" (elnode :type git :flavor melpa :files ("default*" "elnode*" "elnode-pkg.el") :branch "melpa" :host github :repo "jcaw/elnode") "web" (web :type git :flavor melpa :files ("web.el" "web-pkg.el") :host github :repo "nicferrier/emacs-web") "dash" (dash :type git :flavor melpa :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el") "s" (s :type git :flavor melpa :host github :repo "magnars/s.el") "noflet" (noflet :type git :flavor melpa :host github :repo "nicferrier/emacs-noflet") "creole" (creole :type git :flavor melpa :host github :repo "nicferrier/elwikicreole") "kv" (kv :type git :flavor melpa :host github :repo "nicferrier/emacs-kv") "fakir" (fakir :type git :flavor melpa :host github :repo "nicferrier/emacs-fakir") "db" (db :type git :flavor melpa :host github :repo "nicferrier/emacs-db") "persist" nil "request-deferred" (request-deferred :type git :flavor melpa :files ("request-deferred.el" "request-deferred-pkg.el") :host github :repo "tkf/emacs-request") "deferred" (deferred :type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred"))) nongnu-elpa #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 4 "compat" nil "straight" nil "project" nil "vundo" nil "minimap" nil "ts-fold" nil "doom-snippets" nil "dired-git-info" nil "auctex" nil "adaptive-wrap" nil "org-yt" nil "seq" nil "jsonrpc" nil "flymake" nil "eldoc" nil "xref" nil "external-completion" nil "gnu-elpa-mirror" nil "emacsmirror-mirror" nil "eglot" nil "rainbow-mode" nil "cl-lib" nil "persist" nil)) gnu-elpa-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 3 "compat" (compat :type git :host github :repo "emacs-compat/compat" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "straight" nil "project" (project :type git :host github :repo "emacs-straight/project" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "vundo" (vundo :type git :host github :repo "emacs-straight/vundo" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "minimap" (minimap :type git :host github :repo "emacs-straight/minimap" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "ts-fold" nil "doom-snippets" nil "dired-git-info" (dired-git-info :type git :host github :repo "emacs-straight/dired-git-info" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "auctex" (auctex :type git :host github :repo "emacs-straight/auctex" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "adaptive-wrap" (adaptive-wrap :type git :host github :repo "emacs-straight/adaptive-wrap" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "org-yt" nil "seq" (seq :type git :host github :repo "emacs-straight/seq" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "jsonrpc" (jsonrpc :type git :host github :repo "emacs-straight/jsonrpc" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "flymake" (flymake :type git :host github :repo "emacs-straight/flymake" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "eldoc" (eldoc :type git :host github :repo "emacs-straight/eldoc" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "xref" (xref :type git :host github :repo "emacs-straight/xref" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "external-completion" (external-completion :type git :host github :repo "emacs-straight/external-completion" :files ("*.el" "*.info" "dir" "doc" "etc" "images" "latex" "style")) "emacsmirror-mirror" nil "eglot" (eglot :type git :host github :repo "emacs-straight/eglot" :files ("*" (:exclude ".git"))) "rainbow-mode" (rainbow-mode :type git :host github :repo "emacs-straight/rainbow-mode" :files ("*" (:exclude ".git"))) "cl-lib" nil "persist" (persist :type git :host github :repo "emacs-straight/persist" :files ("*" (:exclude ".git"))))) el-get #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "straight" nil "ts-fold" nil "doom-snippets" nil "org-yt" nil "emacsmirror-mirror" nil "cl-lib" nil)) emacsmirror-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "straight" (straight :type git :host github :repo "radian-software/straight.el" :branch "develop" :local-repo "straight.el" :files ("straight*.el")) "ts-fold" nil "doom-snippets" nil "org-yt" nil "cl-lib" nil))))

("bind-key" "elisp-refs" "external-completion" "xref" "eldoc" "flymake" "jsonrpc" "wfnames" "helm-core" "xterm-color" "parent-mode" "posframe" "cfrs" "lv" "pfuture" "ace-window" "git-gutter" "fringe-helper" "ht" "tsc" "epl" "pkg-info" "package-lint" "math-symbol-lists" "f" "org-noter" "let-alist" "tablist" "with-editor" "seq" "async" "deferred" "request-deferred" "persist" "db" "fakir" "kv" "creole" "noflet" "s" "dash" "web" "elnode" "log4e" "gntp" "alert" "aio" "cl-lib" "emacs" "expand-region" "link-hint" "org-gcal" "calfw-ical" "calfw-cal" "calfw-org" "calfw" "yaml-mode" "company-shell" "ob-async" "orgit" "org-pdftools" "org-cliplink" "toc-org" "ox-clip" "org-yt" "htmlize" "avy" "org-contrib" "org" "edit-indirect" "markdown-toc" "markdown-mode" "company-lua" "lua-mode" "company-math" "company-reftex" "company-auctex" "latex-preview-pane" "adaptive-wrap" "auctex" "julia-repl" "julia-mode" "buttercup" "flycheck-cask" "flycheck-package" "elisp-demos" "elisp-def" "overseer" "macrostep" "highlight-quoted" "hover" "flutter" "dart-mode" "tree-sitter-indent" "tree-sitter-langs" "tree-sitter" "saveplace-pdf-view" "pdf-tools" "makefile-executor" "magit-todos" "magit" "request" "ivy-xref" "dumb-jump" "eros" "quickrun" "flycheck-popup-tip" "bash-completion" "fish-completion" "eshell-syntax-highlighting" "eshell-did-you-mean" "esh-help" "shrink-path" "eshell-z" "eshell-up" "git-modes" "git-timemachine" "git-commit" "browse-at-remote" "fd-dired" "dired-rsync" "dired-git-info" "diredfl" "doom-snippets" "auto-yasnippet" "ts-fold" "vimish-fold" "yasnippet" "persp-mode" "vi-tilde-fringe" "git-gutter-fringe" "treemacs-persp" "treemacs-magit" "treemacs-projectile" "treemacs-nerd-icons" "treemacs" "volatile-highlights" "doom-modeline" "minimap" "hl-todo" "solaire-mode" "doom-themes" "wgrep" "counsel-projectile" "amx" "ivy-avy" "ivy-hydra" "company-dict" "gdscript-mode" "vundo" "undo-fu-session" "undo-fu" "transient" "swiper" "rainbow-mode" "pretty-hydra" "popup" "mode-icons" "major-mode-hydra" "magit-section" "magit-delta" "hydra" "highlight-indentation" "helm" "goto-line-preview" "flycheck-eglot" "flycheck" "emojify-logos" "emojify" "eglot" "drag-stuff" "crux" "counsel" "company-statistics" "company" "anzu" "all-the-icons-ivy-rich" "all-the-icons" "ivy-rich" "ivy" "which-key" "general" "project" "projectile" "ws-butler" "smartparens" "pcre2el" "helpful" "dtrt-indent" "better-jumper" "restart-emacs" "rainbow-delimiters" "highlight-numbers" "hide-mode-line" "nerd-icons" "gcmh" "compat" "auto-minor-mode" "use-package" "straight" "emacsmirror-mirror" "el-get" "gnu-elpa-mirror" "nongnu-elpa" "melpa" "org-elpa")

t
